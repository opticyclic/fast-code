/**
 * This class has been generated by Fast Code Eclipse Plugin
 * For more information please go to http://fast-code.sourceforge.net/
 * @author : Gautam
 * Created : 01/09/2012
 */

package org.fastcode.popup.actions.easycreate;

import static org.fastcode.common.FastCodeConstants.DOT;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.jdt.core.ICompilationUnit;
import org.eclipse.jdt.core.IField;
import org.eclipse.jface.window.Window;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.IActionDelegate;
import org.eclipse.ui.IWorkbenchWindowActionDelegate;
import org.fastcode.common.CreateVariableData;
import org.fastcode.dialog.CreateVariableDialog;

public class DetailedNewMemberCreateAction extends NewMemberCreateActionSupport implements IActionDelegate, IWorkbenchWindowActionDelegate {

	/**
	 *
	 */
	/* (non-Javadoc)
	 * @see org.fastcode.popup.actions.easycreate.NewMemberCreateActionSupport#getCreateVariableData(org.eclipse.jdt.core.ICompilationUnit)
	 */
	@Override
	protected CreateVariableData getCreateVariableData(final ICompilationUnit compUnit) throws Exception {
		if (this.createVariableData == null) {
			this.createVariableData = new CreateVariableData();
		}
		final List<String> exstField = new ArrayList<String>();
		final List<IField> iExistFileds = new ArrayList<IField>();
		final IField[] fields = compUnit.findPrimaryType().getFields();

		for (final IField field : fields) {
			iExistFileds.add(field);
			//System.out.println(iField.getElementName());
			exstField.add(field.getElementName());
		}
		this.createVariableData.setiClassFields(iExistFileds);
		final String[] existFields = exstField.toArray(new String[0]);

		this.createVariableData.setExistingFields(existFields);
		this.createVariableData.setJavaProject(compUnit.getJavaProject());
		final String fileName = this.editorPart.getEditorInput().getName();
		this.createVariableData.setCompUnitType(fileName.substring(fileName.lastIndexOf(DOT) + 1, fileName.length()));
		this.createVariableData.setCreateClassDetailed(false);
		this.createVariableData.setCreateClassSimple(false);
		this.createVariableData.setInterface(compUnit.findPrimaryType().isInterface());
		final CreateVariableDialog createVariableDialog = new CreateVariableDialog(new Shell(), this.createVariableData);
		if (createVariableDialog.open() == Window.CANCEL) {
			return null;
		}

		return createVariableDialog.getCreateVariableData();
	}

	@Override
	protected boolean isSimpleType() {
		return true;
	}

	@Override
	protected boolean doesRequireMoreInfoFromUser() {
		return false;
	}

	@Override
	protected boolean canActOnClassesOnly() {
		return false;
	}
}
