/**
 * This class has been generated by Fast Code Eclipse Plugin
 * For more information please go to http://fast-code.sourceforge.net/
 * @author : Gautam
 * Created : 01/09/2012
 */

package org.fastcode.popup.actions.easycreate;

import static org.eclipse.jface.dialogs.MessageDialog.openError;
import static org.fastcode.common.FastCodeConstants.BUILDER_CLASS_NAME;
import static org.fastcode.common.FastCodeConstants.DOT;
import static org.fastcode.common.FastCodeConstants.EMPTY_STR;
import static org.fastcode.common.FastCodeConstants.EQUAL;
import static org.fastcode.common.FastCodeConstants.FINAL;
import static org.fastcode.common.FastCodeConstants.SPACE;
import static org.fastcode.common.FastCodeConstants.STATIC;
import static org.fastcode.util.SourceUtil.getTypeFromProject;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.eclipse.jdt.core.ICompilationUnit;
import org.eclipse.jdt.core.IField;
import org.eclipse.jdt.core.IImportDeclaration;
import org.eclipse.jdt.core.IJavaElement;
import org.eclipse.jdt.core.IMember;
import org.eclipse.jdt.core.IMethod;
import org.eclipse.jdt.core.IType;
import org.eclipse.jdt.core.JavaModelException;
import org.eclipse.jdt.core.search.IJavaSearchConstants;
import org.eclipse.jdt.core.search.IJavaSearchScope;
import org.eclipse.jdt.core.search.SearchEngine;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.text.ITextSelection;
import org.eclipse.jface.window.Window;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.IActionDelegate;
import org.eclipse.ui.IWorkbenchWindowActionDelegate;
import org.fastcode.common.CreateVariableData;
import org.fastcode.common.FastCodeConstants.ACCESS_MODIFIER;
import org.fastcode.common.FastCodeConstants.GETTER_SETTER;
import org.fastcode.common.FastCodeField;
import org.fastcode.dialog.CreateVariableDialog;
import org.fastcode.util.SearchUtil;

public class DetailedMemberModifyAction extends NewMemberCreateActionSupport implements IActionDelegate, IWorkbenchWindowActionDelegate {

	/**
	 * @param compUnit
	 *
	 */
	@Override
	protected CreateVariableData getCreateVariableData(final ICompilationUnit compUnit) throws Exception {
		final CreateVariableData createVariableData = new CreateVariableData();
		final String selectedVriable = findSelectedJavaElement(compUnit).getElementName();

		final IField selectedField = compUnit.findPrimaryType().getField(selectedVriable);
		if (!isMemberNameSelected(selectedField, (ITextSelection) this.selection)) {
			openError(this.editorPart.getSite().getShell(), "Selecttion Error",
					"Please select part or whole name of a field and try again.");
			return null;
		}
		final FastCodeField fastCodeField = new FastCodeField(selectedField);
		/*
		 * if (isVariableReferenced(selectedVriable, IJavaSearchConstants.FIELD,
		 * fastCodeField) || isVariableReferenced(fastCodeField.getSetter(),
		 * IJavaSearchConstants.METHOD, fastCodeField) ||
		 * isVariableReferenced(fastCodeField.getGetter(),
		 * IJavaSearchConstants.METHOD, fastCodeField)) { return null; }
		 */
		if (isVariableReferenced(selectedField, IJavaSearchConstants.FIELD, fastCodeField)) {
			return null;
		}
		final IType type1 = getTypeFromProject(compUnit.getJavaProject(), compUnit.findPrimaryType().getFullyQualifiedName());
		// IJavaElement[] content=compUnit.getChildren();
		final IMethod[] content = type1.getMethods();
		String getterSetter = EMPTY_STR;
		for (int i = 0; i < content.length; i++) {

			if (content[i].getElementName().equals(fastCodeField.getGetter())) {
				getterSetter = "getter";
				if (isVariableReferenced(content[i], IJavaSearchConstants.METHOD, fastCodeField)) {
					return null;
				}

			}
			if (content[i].getElementName().equals(fastCodeField.getSetter())) {
				getterSetter = getterSetter + "setter";
				if (isVariableReferenced(content[i], IJavaSearchConstants.METHOD, fastCodeField)) {
					return null;
				}
			}
			if (content[i].getElementName().equals("add" + selectedField.getElementName())) {
				getterSetter = getterSetter + "adder";
				if (isVariableReferenced(content[i], IJavaSearchConstants.METHOD, fastCodeField)) {
					return null;
				}
			}
			if (content[i].getElementName().contains(BUILDER_CLASS_NAME)) {
				createVariableData.setBuilderReqd(true);
			}
		}

		final List<String> exstField = new ArrayList<String>();
		final List<IField> iExistFileds = new ArrayList<IField>();
		final IField[] fields = compUnit.findPrimaryType().getFields();
		final String[] fieldArr = new String[1];

		fieldArr[0] = selectedVriable;
		boolean isNextSibling = false;
		int pos = 0;
		for (final IField field : fields) {
			if (!field.getElementName().equals(selectedVriable)) {
				iExistFileds.add(field);
				exstField.add(field.getElementName());
				if (isNextSibling) {
					isNextSibling = false;
					if (pos > 0) {
						createVariableData.setInsertionPoint(iExistFileds.get(pos - 1));
					}

				}
				pos++;

			} else {
				if (pos == 0) {
					createVariableData.setStringInsertionPoint("First Member");

				}
				isNextSibling = true;
			}
		}
		createVariableData.setiClassFields(iExistFileds);
		final String[] existFields = exstField.toArray(new String[0]);

		createVariableData.setExistingFields(existFields);
		createVariableData.setJavaProject(compUnit.getJavaProject());
		final String fileName = this.editorPart.getEditorInput().getName();
		createVariableData.setCompUnitType(fileName.substring(fileName.lastIndexOf(DOT) + 1, fileName.length()));
		createVariableData.setFieldNames(fieldArr);

		createVariableData.setFieldType(selectedField.getElementName());
		final String src = selectedField.getSource();

		if (selectedField.getConstant() != null) {
			createVariableData.setInitialValue(selectedField.getConstant().toString());
			createVariableData.setInitialized(true);

		}

		final String[] sourceArr = src.split(SPACE);

		ACCESS_MODIFIER access_modifier = ACCESS_MODIFIER.getGetterSetter(sourceArr[0]);
		if (access_modifier.equals(ACCESS_MODIFIER.PRIVATE) && !sourceArr[0].equals("private")) {
			access_modifier = ACCESS_MODIFIER.DEFAULT;
		}
		createVariableData.setAccessModifier(access_modifier);
		for (int i = 0; i < sourceArr.length; i++) {
			if (sourceArr[i].contains(STATIC)) {
				createVariableData.setStatic(true);
			}
			if (sourceArr[i].contains(FINAL)) {
				createVariableData.setFinal(true);
			}

		}
		final String type = fastCodeField.getType().getName();
		if (type.indexOf("<") != -1) {
			createVariableData.setList(type.contains("List"));
			createVariableData.setSet(type.contains("Set"));
			createVariableData.setFieldType(type.substring(type.indexOf("<") + 1, type.indexOf(">")));
		} else if (type.indexOf("[") != -1) {
			createVariableData.setArray(true);
			createVariableData.setFieldType(type.substring(0, type.indexOf("[")));
			final int count = StringUtils.countMatches(type, "[]");
			createVariableData.setArrayDim(count);

		} else {
			createVariableData.setFieldType(type);
		}
		if (createVariableData.isList() && src.contains(EQUAL)) {
			createVariableData.setInitialized(true);
			createVariableData.setInitialValue(SPACE);
			createVariableData.setListType(src.substring(src.indexOf("new") + 4, src.lastIndexOf("<")));
		}
		if (createVariableData.isSet() && src.contains(EQUAL)) {
			createVariableData.setInitialized(true);
			createVariableData.setInitialValue(SPACE);
			createVariableData.setSetType(src.substring(src.indexOf("new") + 4, src.lastIndexOf("<")));
		}
		if (createVariableData.isArray() && src.contains("=")) {
			createVariableData.setInitialized(true);
			createVariableData.setInitialValue(src.substring(src.indexOf("=") + 1, src.length() - 1).trim());

		}
		createVariableData.setVariableModifyAction(true);
		final IImportDeclaration[] imports = type1.getCompilationUnit().getImports();
		for (final IImportDeclaration declaration : imports) {
			if (createVariableData.getFieldType().equalsIgnoreCase("Date")) {
				if (!declaration.getElementName().contains(createVariableData.getFieldType())) {
					createVariableData.setFieldType(declaration.getElementName());
					break;
				}
			}
		}

		createVariableData.setGetterSetter(GETTER_SETTER.getGetterSetter(getterSetter));
		createVariableData.setModifiedVarOrigName(selectedField.getElementName());
		createVariableData.setInterface(compUnit.findPrimaryType().isInterface());
		final CreateVariableDialog createVariableDialog = new CreateVariableDialog(new Shell(), createVariableData);
		if (createVariableDialog.open() == Window.CANCEL) {
			return null;
		}
		return createVariableDialog.getCreateVariableData();
	}

	/**
	 *
	 * @param member
	 * @param selection
	 * @return
	 */
	private boolean isMemberNameSelected(final IMember member, final ITextSelection selection) {
		int offset;
		try {
			offset = member.getNameRange().getOffset();
			final int length = member.getNameRange().getLength();
			final int selOffset = selection.getOffset();
			final int selLength = selection.getLength();
			return selOffset >= offset && selOffset <= offset + length && selLength <= length - (selOffset - offset);

		} catch (final JavaModelException e) {
			return false;
		}
	}

	/**
	 *
	 * @param searchJavaElement
	 * @param type
	 * @param field
	 * @return
	 */
	private boolean isVariableReferenced(final IJavaElement searchJavaElement, final int type, final FastCodeField field) {
		final IJavaSearchScope scope = SearchEngine.createWorkspaceScope();
		final List<IJavaElement> javaElements = new SearchUtil().search(searchJavaElement, type, scope);
		try {
			if (javaElements.size() > 0) {

				for (final IJavaElement element : javaElements) {
					if (type == IJavaSearchConstants.FIELD) {
						if (element.getElementName().equals(field.getSetter()) || element.getElementName().equals(field.getGetter())) {
							continue;
						} else {
							final boolean confirm = MessageDialog.openQuestion(this.editorPart.getSite().getShell(), "Warning",
									"Cannot modify the variable as it is referenced in other places.-"
											+ element.getUnderlyingResource().getName()
											+ "\n Want to proceed without changing variable in referenced places?");
							/*openError(this.editorPart.getSite().getShell(), "Error",
									"Cannot modify the variable as it is referenced in other places.-"
											+ element.getUnderlyingResource().getName());*/

							return !confirm;

						}
					} else if (type == IJavaSearchConstants.METHOD) {
						final boolean confirm = MessageDialog.openQuestion(this.editorPart.getSite().getShell(), "Warning",
								"Cannot modify the variable as it is referenced in other places.-"
										+ element.getUnderlyingResource().getName()
										+ "\n Want to proceed without changing variable in referenced places?");
						/*openError(this.editorPart.getSite().getShell(), "Error",
								"Cannot modify the variable as it is referenced in other places.-"
										+ element.getUnderlyingResource().getName());*/

						return !confirm;
					}
				}

			}
		} catch (final JavaModelException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return false;
	}

	@Override
	protected boolean canActOnClassesOnly() {
		return false;
	}
}
