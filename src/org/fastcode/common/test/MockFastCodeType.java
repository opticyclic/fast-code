/**
 * This class has been generated by Fast Code Eclipse Plugin
 * For more information please go to http://fast-code.sourceforge.net/
 * @author : Gautam
 * Created : 07/15/2011
 */

package org.fastcode.common.test;

import static org.fastcode.common.FastCodeConstants.DOT;
import static org.fastcode.util.StringUtil.changeFirstLetterToLowerCase;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.eclipse.jdt.core.IType;
import org.fastcode.common.FastCodePackage;
import org.fastcode.common.FastCodeType;

public class MockFastCodeType{
	private String							name;
	private String							fullyQualifiedName;
	// private String packageName;
	private String							defaultInstance;
	public static final Map<String, String>	defaultValues	= new HashMap<String, String>();
	private String							value;
	private final boolean							defaultConstructor;
	private FastCodeType					superType;
	private final List<FastCodeType>		interfaces		= new ArrayList<FastCodeType>();
	// private String javaProject;
	final private List<FastCodeType>		parameters		= new ArrayList<FastCodeType>();
	private FastCodePackage					packge;
	private IType							iType;
	private final boolean							isClass;
	private final boolean							isInterface;
	private final boolean							isEnum;
	private final boolean							isAbstract;
	private final List<FastCodeType>		implementations	= new ArrayList<FastCodeType>();
	static {
		defaultValues.put("Boolean", "false");
		defaultValues.put("boolean", "false");
		defaultValues.put("Integer", "0");
		defaultValues.put("int", "0");
		defaultValues.put("float", "0");
		defaultValues.put("Float", "0");
		defaultValues.put("Double", "0");
		defaultValues.put("double", "0");
		defaultValues.put("byte", "0");
		defaultValues.put("char", "''");
		defaultValues.put("float", "0.0f");
		defaultValues.put("long", "0");
		defaultValues.put("short", "0");
	}
	public MockFastCodeType(final String fullyQualifiedName) {

		final int off = fullyQualifiedName.lastIndexOf(DOT);
		if (off > 0) {
			this.name = fullyQualifiedName.substring(off + 1);
			this.fullyQualifiedName = fullyQualifiedName;
			// this.packageName = fullyQualifiedName.substring(0, off);
			this.defaultInstance = changeFirstLetterToLowerCase(this.name);
			this.value = defaultValues.containsKey(this.name) ? defaultValues.get(this.name) : "null";

		} else {
			this.name = fullyQualifiedName;
			this.fullyQualifiedName = fullyQualifiedName;
			this.defaultInstance = changeFirstLetterToLowerCase(this.name);
			this.value = defaultValues.containsKey(this.name) ? defaultValues.get(this.name) : "null";
		}
		this.packge = new FastCodePackage(getFullyQualifiedName().substring(0, off), "Sample");
		this.isClass = false;
		this.isInterface = false;
		this.isEnum = false;
		this.isAbstract=false;
		this.defaultConstructor=false;
	}
	public String getName() {
		return this.name;
	}
	public void setName(final String name) {
		this.name = name;
	}
	public String getFullyQualifiedName() {
		return this.fullyQualifiedName;
	}
	public void setFullyQualifiedName(final String fullyQualifiedName) {
		this.fullyQualifiedName = fullyQualifiedName;
	}
	public String getDefaultInstance() {
		return this.defaultInstance;
	}
	public void setDefaultInstance(final String defaultInstance) {
		this.defaultInstance = defaultInstance;
	}
	public String getValue() {
		return this.value;
	}
	public void setValue(final String value) {
		this.value = value;
	}
	public FastCodeType getSuperType() {
		return this.superType;
	}
	public void setSuperType(final FastCodeType superType) {
		this.superType = superType;
	}
	public IType getiType() {
		return this.iType;
	}
	public void setiType(final IType iType) {
		this.iType = iType;
	}
	public static Map<String, String> getDefaultvalues() {
		return defaultValues;
	}
	public boolean isDefaultConstructor() {
		return this.defaultConstructor;
	}
	public List<FastCodeType> getInterfaces() {
		return this.interfaces;
	}
	public List<FastCodeType> getParameters() {
		return this.parameters;
	}
	public boolean isClass() {
		return this.isClass;
	}
	public boolean isInterface() {
		return this.isInterface;
	}
	public boolean isEnum() {
		return this.isEnum;
	}
	public boolean isAbstract() {
		return this.isAbstract;
	}
	public List<FastCodeType> getImplementations() {
		return this.implementations;
	}
	public FastCodePackage getPackage() {
		return this.packge;
	}

	public void setPackage(final FastCodePackage fastCodePackage) {
		this.packge = fastCodePackage;
	}



}
