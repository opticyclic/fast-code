/**
 * This class has been generated by Fast Code Eclipse Plugin
 * For more information please go to http://fast-code.sourceforge.net/
 * @author : Biswarup
 * Created : 06/25/2014 09:44:39
 */

package org.fastcode.common;

import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.Device;
import org.eclipse.swt.graphics.Font;
import org.eclipse.swt.widgets.Display;

public class FastCodeFont {

	private static Font	boldFont;
	private static Font	SimpleFont;
	private static Font	lineNumberFont;

	/**
	 * @param fontName
	 * @param fontHeight
	 * @return
	 */
	public static Font getBoldFont(final String fontName, final int fontHeight) {
		//Font boldFont = null;
		if (boldFont == null) {
			final Device device = Display.getCurrent();
			boldFont = new Font(device, fontName, fontHeight, SWT.BOLD);
		}
		return boldFont;

	}

	/**
	 * @param fontName
	 * @param fontHeight
	 * @return
	 */
	public static Font getSimpleFont(final String fontName, final int fontHeight) {
		//Font SimpleFont = null;
		if (SimpleFont == null) {
			final Device device = Display.getCurrent();
			SimpleFont = new Font(device, fontName, fontHeight, SWT.SIMPLE);
		}
		return SimpleFont;

	}

	/**
	 *
	 * @param fontName
	 * @param fontHeight
	 * @return
	 */
	public static Font getLineNumberFont(final String fontName, final int fontHeight) {
		//Font lineNumberFont = null;
		if (lineNumberFont == null) {
			final Device device = Display.getCurrent();
			lineNumberFont = new Font(device, fontName, 8, SWT.SIMPLE);
		}
		return lineNumberFont;

	}

	public static void disposeFont() {
		if (boldFont != null && !boldFont.isDisposed()) {
			boldFont.dispose();
		}

		if (SimpleFont != null && !SimpleFont.isDisposed()) {
			SimpleFont.dispose();
		}

		if (lineNumberFont != null && !lineNumberFont.isDisposed()) {
			lineNumberFont.dispose();
		}
	}

}
