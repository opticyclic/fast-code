/**
 * This class has been generated by Fast Code Eclipse Plugin
 * For more information please go to http://fast-code.sourceforge.net/
 * @author : Biswarup
 * Created : 09/08/2014 04:13:34
 */
package org.fastcode.handler;

import static org.fastcode.common.FastCodeConstants.AUTO_CHECKIN;
import static org.fastcode.common.FastCodeConstants.COLON;
import static org.fastcode.common.FastCodeConstants.COMMA;
import static org.fastcode.common.FastCodeConstants.DIR;
import static org.fastcode.common.FastCodeConstants.EMPTY_STR;
import static org.fastcode.common.FastCodeConstants.FC_OBJ_CREATED;
import static org.fastcode.common.FastCodeConstants.FORWARD_SLASH;
import static org.fastcode.common.FastCodeConstants.OPTIONAL;
import static org.fastcode.common.FastCodeConstants.PLACEHOLDER_FOLDER;
import static org.fastcode.common.FastCodeConstants.PLACEHOLDER_NAME;
import static org.fastcode.common.FastCodeConstants.PLACEHOLDER_PROJECT;
import static org.fastcode.common.FastCodeConstants.SPACE;
import static org.fastcode.common.FastCodeConstants.TEMPLATE_TAG_PREFIX;
import static org.fastcode.common.FastCodeConstants.XML_START;
import static org.fastcode.popup.actions.snippet.TemplateTagsProcessor.proceedWithAutoCheckin;
import static org.fastcode.util.SourceUtil.createFolder;
import static org.fastcode.util.SourceUtil.getIFileFromFile;
import static org.fastcode.util.SourceUtil.getJavaProject;
import static org.fastcode.util.StringUtil.isEmpty;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IFolder;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IWorkspaceRoot;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.Path;
import org.eclipse.jdt.core.ICompilationUnit;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.ui.IViewPart;
import org.eclipse.ui.IViewReference;
import org.eclipse.ui.PlatformUI;
import org.fastcode.common.Action;
import org.fastcode.common.FastCodeConstants.ACTION_ENTITY;
import org.fastcode.common.FastCodeConstants.ACTION_TYPE;
import org.fastcode.common.FastCodeConstants.TemplateTag;
import org.fastcode.common.FastCodeEntityHolder;
import org.fastcode.common.FastCodeFolder;
import org.fastcode.exception.FastCodeRepositoryException;
import org.fastcode.popup.actions.snippet.TemplateTagsProcessor;

public class FCFolderTagHandler implements FCTagHandler {

	@Override
	public Action populateTagAction(final TemplateTag tagFound, final String tagBody, final String insideTagBody,
			final ICompilationUnit compUnit, final boolean hasSubAction1, final Map<String, Object> placeHolders,
			final Map<String, Object> contextMap, final String spacesBeforeCursor, final Map<String, String> attributes,
			final StringBuilder existingMembersBuilder, final List<Action> actionList) throws Exception {
		String folderPath = null;
		boolean optional = false;
		final ACTION_TYPE actionType = ACTION_TYPE.Create;
		folderPath = attributes.containsKey(PLACEHOLDER_NAME) ? attributes.get(PLACEHOLDER_NAME) : null;
		if (folderPath == null) {
			folderPath = attributes.containsKey(PLACEHOLDER_FOLDER) ? attributes.get(PLACEHOLDER_FOLDER) : null;
		}
		if (folderPath == null) {
			folderPath = attributes.containsKey(DIR) ? attributes.get(DIR) : null;
		}
		optional = attributes.containsKey(OPTIONAL) ? Boolean.valueOf(attributes.get(OPTIONAL)) : false;
		final String folderProject = attributes.containsKey(PLACEHOLDER_PROJECT) ? attributes.get(PLACEHOLDER_PROJECT) : null;
		if (isEmpty(folderPath)) {
			throw new Exception("Please provide attribute \"folder\" for <fc:folder> tag  in the XML and try again. ");
		}

		/*if (isEmpty(folderProject)) {
			throw new Exception("Please provide attribute \"project\" for <fc:folder> tag  in the XML and try again. ");
		}*/
		final TemplateTagsProcessor templateTagsProcessor = new TemplateTagsProcessor();
		folderPath = templateTagsProcessor.validateFolderPath(folderPath, folderProject, placeHolders);
		if (!isEmpty(insideTagBody) && insideTagBody.contains(XML_START + TEMPLATE_TAG_PREFIX + COLON)) {
			throw new Exception("There should not be any other tags inside <fc:folder>,  exiting....");
		}
		//String prjt = null;
		/*if (folderPath.contains(FORWARD_SLASH)) {
			prjt = folderPath.substring(0, folderPath.indexOf(FORWARD_SLASH)).equals(EMPTY_STR) ? null : folderPath.substring(0,
					folderPath.indexOf(FORWARD_SLASH));
		}*/
		IProject project1 = null;
		if (folderProject != null) {
			project1 = ResourcesPlugin.getWorkspace().getRoot().getProject(folderProject);//getJavaProject(folderProject).getProject();
			final IWorkspaceRoot root = project1.getWorkspace().getRoot();
			//final IPath searchPath = project.getFullPath().append(dir);
			final IFolder existingFolder = root.getFolder(new Path(folderPath));
			if (existingFolder.exists()) {
				final String folderName = folderPath.contains(FORWARD_SLASH) ? folderPath.substring(
						folderPath.lastIndexOf(FORWARD_SLASH) + 1, folderPath.length()) : folderPath;
				existingMembersBuilder.append("Folder with Name: " + folderName);
				existingMembersBuilder.append(SPACE + COMMA + SPACE);
				return null;
			}
		}
		final Action actionFolder = new Action.Builder().withEntity(ACTION_ENTITY.Folder).withType(actionType).withFolderPath(folderPath)
				.withLabelMsg(actionType.toString() + SPACE + "Folder: " + folderPath).withOptional(optional).withProject(project1).build();
		return actionFolder;
		//break;
	}

	/**
	 * @param dir
	 * @param project
	 * @param placeHolders
	 * @param contextMap
	 * @throws Exception
	 */
	public void createFolderFromTag(final Object dir, final Object prj, final Map<String, Object> placeHolders,
			final Map<String, Object> contextMap) throws Exception {
		final String prjURI = getJavaProject((IProject) prj).getResource().getLocationURI().toString();
		final String path = prjURI.substring(prjURI.indexOf(COLON) + 1);
		final File file = new File(path + ((String) dir).replace(((IProject) prj).getName(), EMPTY_STR));
		/*final FastCodeCheckinCache checkinCache = FastCodeCheckinCache.getInstance();
		checkinCache.getFilesToCheckIn().add(new FastCodeFileForCheckin(INITIATED, file.getAbsolutePath()));*/
		//addOrUpdateFileStatusInCache(file);

		final IFolder folder = createFolder(new Path((String) dir));

		try {
			/*final boolean prjShared = !isEmpty(folder.getProject().getPersistentProperties());
			final boolean prjConfigured = !isEmpty(isPrjConfigured(folder.getProject().getName()));*/
			if ((Boolean) placeHolders.get(AUTO_CHECKIN)) {
				if (proceedWithAutoCheckin(file, folder.getProject())) {
					final IFile ifile = getIFileFromFile(file);
					List<FastCodeEntityHolder> chngsForType = ((Map<Object, List<FastCodeEntityHolder>>) contextMap.get(FC_OBJ_CREATED))
							.get(ifile);
					if (chngsForType == null) {
						chngsForType = new ArrayList<FastCodeEntityHolder>();
						chngsForType.add(new FastCodeEntityHolder(PLACEHOLDER_FOLDER, new FastCodeFolder(folder)));
					}
					((Map<Object, List<FastCodeEntityHolder>>) contextMap.get(FC_OBJ_CREATED)).put(ifile, chngsForType);
				}
			}
		} catch (final FastCodeRepositoryException ex) {
			ex.printStackTrace();
		}
		final ISelection selection = new StructuredSelection(folder);
		final IViewReference[] views = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getViewReferences();
		PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().resetPerspective();
		for (final IViewReference view : views) {
			if ("org.eclipse.jdt.ui.PackageExplorer".equals(view.getId())) {
				final IViewPart pExplorer = view.getView(true);
				pExplorer.getViewSite().getSelectionProvider().setSelection(selection);
				break;
			}
		}

	}
}
