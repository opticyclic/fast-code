/**
 * This class has been generated by Fast Code Eclipse Plugin
 * For more information please go to http://fast-code.sourceforge.net/
 * @author : Biswarup
 * Created : 09/08/2014 04:13:34
 */
package org.fastcode.handler;

import static org.fastcode.common.FastCodeConstants.COLON;
import static org.fastcode.common.FastCodeConstants.EMPTY_STR;
import static org.fastcode.common.FastCodeConstants.FORWARD_SLASH;
import static org.fastcode.common.FastCodeConstants.HASH;
import static org.fastcode.common.FastCodeConstants.LEFT_PAREN;
import static org.fastcode.common.FastCodeConstants.NEWLINE;
import static org.fastcode.common.FastCodeConstants.NODE;
import static org.fastcode.common.FastCodeConstants.OPTIONAL;
import static org.fastcode.common.FastCodeConstants.PARENT;
import static org.fastcode.common.FastCodeConstants.PLACEHOLDER_TARGET;
import static org.fastcode.common.FastCodeConstants.TEMPLATE_TAG_PREFIX;
import static org.fastcode.common.FastCodeConstants.XML_END;
import static org.fastcode.common.FastCodeConstants.XML_START;
import static org.fastcode.util.SourceUtil.findFileFromPath;
import static org.fastcode.util.SourceUtil.getEditorPartFromFile;
import static org.fastcode.util.SourceUtil.getFileContents;
import static org.fastcode.util.StringUtil.formatXmlWithCDATA;
import static org.fastcode.util.StringUtil.isEmpty;

import java.util.List;
import java.util.Map;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.jdt.core.ICompilationUnit;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.text.IDocument;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.IEditorPart;
import org.eclipse.ui.texteditor.IDocumentProvider;
import org.eclipse.ui.texteditor.ITextEditor;
import org.fastcode.common.Action;
import org.fastcode.common.FastCodeConstants.ACTION_ENTITY;
import org.fastcode.common.FastCodeConstants.ACTION_TYPE;
import org.fastcode.common.FastCodeConstants.TARGET;
import org.fastcode.common.FastCodeConstants.TemplateTag;
import org.fastcode.common.FastCodeFile;

public class FCXmlTagHandler implements FCTagHandler {

	@Override
	public Action populateTagAction(final TemplateTag tagFound, final String tagBody, final String insideTagBody,
			final ICompilationUnit compUnit, final boolean hasSubAction1, final Map<String, Object> placeHolders,
			final Map<String, Object> contextMap, final String spacesBeforeCursor, final Map<String, String> attributes,
			final StringBuilder existingMembersBuilder, final List<Action> actionList) throws Exception {
		boolean optional = false;
		final ACTION_TYPE actionType = ACTION_TYPE.Create;
		/*
		 * if
		 * (ResourceUtil.getResource(editorPart.getEditorInput()).getProject
		 * ().isSynchronized(0)) { throw new Exception("Project: " +
		 * ResourceUtil
		 * .getResource(editorPart.getEditorInput()).getProject().getName()
		 * + " is not synchronized ,Please refresh and try again."); }
		 */
		final String nodeName = attributes.containsKey(NODE) ? attributes.get(NODE) : null;
		final String rootNodeName = attributes.containsKey(PARENT) ? attributes.get(PARENT) : null;
		String targetFile = attributes.containsKey(TARGET.file.getValue()) ? attributes.get(TARGET.file.getValue()) : null;
		if (targetFile == null) {
			targetFile = attributes.containsKey(PLACEHOLDER_TARGET) ? attributes.get(PLACEHOLDER_TARGET) : null;
		}
		optional = attributes.containsKey(OPTIONAL) ? Boolean.valueOf(attributes.get(OPTIONAL)) : false;

		if (!isEmpty(insideTagBody) && insideTagBody.contains(XML_START + TEMPLATE_TAG_PREFIX + COLON)) {
			throw new Exception("There should not be any other tags inside <fc:xml>,  exiting....");
		}

		final Action actionXML = new Action.Builder().withEntity(ACTION_ENTITY.Xml).withType(actionType).withNodeName(nodeName)
				.withRootNodeName(rootNodeName).withSource(isEmpty(insideTagBody) ? insideTagBody : insideTagBody.trim())
				.withTarget(targetFile)
				.withLabelMsg(actionType.toString() + " Xml tag with root node   " + rootNodeName + "  and with node  " + nodeName)
				.withOptional(optional).build();

		return actionXML;

		//break;
	}

	/**
	 * @param nodeName
	 * @param rootNodeName
	 * @param insideTagBody
	 * @param target
	 * @param editorPart
	 * @param contextMap
	 * @param placeHolders
	 * @throws Exception
	 */
	public void createXMLTag(final String nodeName, final String rootNodeName, final String insideTagBody, final String target,
			IEditorPart editorPart, final Map<String, Object> contextMap, final Map<String, Object> placeHolders) throws Exception {

		final String rootNodeEndTag = XML_START + FORWARD_SLASH + rootNodeName + XML_END;
		final String rootNodeStartTag = XML_START + rootNodeName + XML_END;
		IFile file = null;
		if (!isEmpty(target)) {
			file = target.startsWith(HASH) ? ((FastCodeFile) placeHolders.get(target.replace(HASH, EMPTY_STR).trim())).getFile()
					: findFileFromPath(target);
		} else {
			file = findFileFromPath(getFullPathFromEditor(editorPart));
		}

		if (file == null) {
			MessageDialog.openError(new Shell(), "Error", "File " + target + " not found.");
		}
		final String xmlFileContents = getFileContents(file);

		if (isEmpty(xmlFileContents)) {
			MessageDialog.openError(new Shell(), "Error", "Empty XML file.");
			return;
		}
		int positionToInsertSnippet = xmlFileContents.indexOf(rootNodeEndTag);

		String finalSnippet;
		if (positionToInsertSnippet == -1) {
			finalSnippet = rootNodeStartTag + insideTagBody.trim() + rootNodeEndTag;
			positionToInsertSnippet = xmlFileContents.length() + 1;
		} else {
			finalSnippet = insideTagBody.trim();
		}

		if (!isEmpty(target)) {
			editorPart = getEditorPartFromFile(file);
		}
		finalSnippet = finalSnippet.replace("&lt;", "<");
		finalSnippet = finalSnippet.replace("&gt;", ">");
		final ITextEditor editor = (ITextEditor) editorPart.getAdapter(ITextEditor.class);
		final IDocumentProvider documentProvider = editor.getDocumentProvider();
		final IDocument document = documentProvider.getDocument(editor.getEditorInput());
		document.replace(positionToInsertSnippet, 0, NEWLINE + formatXmlWithCDATA(finalSnippet));
		editor.doSave(new NullProgressMonitor());

		/*List<Object> fileList = ((Map<Object, Map<String, List>>) contextMap.get(COMMIT_MESSAGE)).get(file).get("CREATE_FILE");
		if (fileList == null) {
			fileList = new ArrayList<Object>();
		}
		fileList.add(new FastCodeFile(file.getName(), file.getFullPath().toString()));


		((Map<Object, Map<String, List<Object>>>) contextMap.get(COMMIT_MESSAGE)).get(file).put("CREATE_FILE", fileList);*/
	}

	/**
	 * @param editorPart
	 * @return
	 */
	private String getFullPathFromEditor(final IEditorPart editorPart) {
		final String editorInputPath = editorPart.getEditorInput().toString();
		return editorInputPath.substring(editorInputPath.indexOf(LEFT_PAREN) + 1, editorInputPath.length() - 1);
	}
}
