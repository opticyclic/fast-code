/**
 * This class has been generated by Fast Code Eclipse Plugin
 * For more information please go to http://fast-code.sourceforge.net/
 * @author : Biswarup
 * Created : 09/08/2014 04:13:34
 */
package org.fastcode.handler;

import static org.fastcode.common.FastCodeConstants.COLON;
import static org.fastcode.common.FastCodeConstants.COMMA;
import static org.fastcode.common.FastCodeConstants.EMPTY_STR;
import static org.fastcode.common.FastCodeConstants.OPTIONAL;
import static org.fastcode.common.FastCodeConstants.PLACEHOLDER_NAME;
import static org.fastcode.common.FastCodeConstants.SPACE;
import static org.fastcode.common.FastCodeConstants.TEMPLATE_TAG_PREFIX;
import static org.fastcode.common.FastCodeConstants.TYPE;
import static org.fastcode.common.FastCodeConstants.XML_START;
import static org.fastcode.util.SourceUtil.createFolder;
import static org.fastcode.util.StringUtil.isEmpty;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.codehaus.groovy.eclipse.core.model.GroovyRuntime;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IProjectDescription;
import org.eclipse.core.resources.IWorkspaceRoot;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.jdt.core.IClasspathEntry;
import org.eclipse.jdt.core.ICompilationUnit;
import org.eclipse.jdt.core.IJavaProject;
import org.eclipse.jdt.core.JavaCore;
import org.eclipse.jdt.launching.JavaRuntime;
import org.fastcode.common.Action;
import org.fastcode.common.FastCodeConstants.ACTION_ENTITY;
import org.fastcode.common.FastCodeConstants.ACTION_TYPE;
import org.fastcode.common.FastCodeConstants.TemplateTag;

public class FCProjectTagHandler implements FCTagHandler {

	@Override
	public Action populateTagAction(final TemplateTag tagFound, final String tagBody, final String insideTagBody,
			final ICompilationUnit compUnit, final boolean hasSubAction1, final Map<String, Object> placeHolders,
			final Map<String, Object> contextMap, final String spacesBeforeCursor, final Map<String, String> attributes,
			final StringBuilder existingMembersBuilder, final List<Action> actionList) throws Exception {
		String memberName = null;
		boolean optional = false;
		final ACTION_TYPE actionType = ACTION_TYPE.Create;
		String typeToCreate = null;
		memberName = attributes.containsKey(PLACEHOLDER_NAME) ? attributes.get(PLACEHOLDER_NAME) : null;
		typeToCreate = attributes.containsKey(TYPE) ? attributes.get(TYPE) : null;
		optional = attributes.containsKey(OPTIONAL) ? Boolean.valueOf(attributes.get(OPTIONAL)) : false;
		final String srcPath = attributes.containsKey("srcPath") ? attributes.get("srcPath") : "src";

		if (memberName == null || memberName.equals(EMPTY_STR)) {
			throw new Exception("Please provide attribute \"name\" for <fc:project> tag  in the XML and try again");
		}
		if (!isEmpty(insideTagBody) && insideTagBody.contains(XML_START + TEMPLATE_TAG_PREFIX + COLON)) {
			throw new Exception("There should not be any other tags inside <fc:project>,  exiting....");
		}
		for (final IProject project11 : ResourcesPlugin.getWorkspace().getRoot().getProjects()) {
			if (project11.getName().equals(memberName)) {
				existingMembersBuilder.append("Project with Name " + memberName);
				existingMembersBuilder.append(SPACE + COMMA + SPACE);
				return null;
			}
		}

		if (typeToCreate == null || typeToCreate.equals(EMPTY_STR)) {
			throw new Exception("Please provide attribute \"type\" for <fc:project> tag  in the XML and try again");
		}
		final Action actionProject = new Action.Builder().withEntity(ACTION_ENTITY.Project).withType(actionType).withEntityName(memberName)
				.withTypeToCreate(typeToCreate).withProjectSrcPath(srcPath)
				.withLabelMsg(actionType.toString() + SPACE + typeToCreate + " Project: " + memberName).withOptional(optional).build();
		return actionProject;
		//break;
	}

	/**
	 * @param entityName
	 * @param typeToCreate
	 * @param projectSrcPath
	 * @throws Exception
	 */
	public void createProjectFromTag(final String entityName, final String typeToCreate, final String projectSrcPath) throws Exception {
		final IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();
		//create eclipse project
		final IProject project = root.getProject(entityName);
		if (!project.exists()) {
			project.create(null);
			project.open(null);
		}
		final IProjectDescription description = project.getDescription();
		if (!isEmpty(typeToCreate)) {
			if (typeToCreate.equals("java")) {
				//set the java project nature
				description.setNatureIds(new String[] { JavaCore.NATURE_ID });
				project.setDescription(description, null);
				//create java project
				final IJavaProject javaProject = JavaCore.create(project);

				createSourceFolderInProject(project, projectSrcPath, javaProject);
			} else if (typeToCreate.equals("groovy")) {
				description.setNatureIds(new String[] { "org.eclipse.jdt.groovy.core.groovyNature", "org.eclipse.jdt.core.javanature" });
				project.setDescription(description, null);
				final IJavaProject javaProject = JavaCore.create(project);
				//for (String srcPath : projectSrcPath.split(SPACE)) {
				createSourceFolderInProject(project, projectSrcPath, javaProject);
				//}
				GroovyRuntime.addGroovyClasspathContainer(javaProject);//addMinimalGroovyClasspathContainer(javaProject);

			} else if (typeToCreate.equals("php")) {
				description.setNatureIds(new String[] { "org.eclipse.php.core.PHPNature" });
				project.setDescription(description, null);
			} else if (typeToCreate.equals("jee")) {
				description.setNatureIds(new String[] { "org.eclipse.jem.workbench.JavaEMFNature",
						"org.eclipse.wst.common.modulecore.ModuleCoreNature", "org.eclipse.wst.common.project.facet.core.nature",
						"org.eclipse.jdt.core.javanature", "org.eclipse.wst.jsdt.core.jsNature" });
				project.setDescription(description, null);
			}
		}

	}

	/**
	 * @param project
	 * @param projectSrcPath
	 * @param javaProject
	 * @throws Exception
	 */
	private void createSourceFolderInProject(final IProject project, final String projectSrcPath, final IJavaProject javaProject)
			throws Exception {

		if (!isEmpty(projectSrcPath)) {
			final List<IClasspathEntry> newEntries = new ArrayList<IClasspathEntry>();
			for (final String srcPath : projectSrcPath.split("\\s+")) {
				newEntries.add(JavaCore.newSourceEntry(javaProject.getPath().append(srcPath)));
				createFolder(project.getFullPath().append(srcPath));
			}
			newEntries.add(JavaRuntime.getDefaultJREContainerEntry());
			/*final IClasspathEntry[] buildPath = { JavaCore.newSourceEntry(javaProject.getPath().append(srcPath)),
					JavaRuntime.getDefaultJREContainerEntry() };*/

			javaProject.setRawClasspath(newEntries.toArray(new IClasspathEntry[newEntries.size()]), project.getFullPath().append("bin"),
					null);

		}
	}
}
