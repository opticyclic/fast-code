/**
 * This class has been generated by Fast Code Eclipse Plugin
 * For more information please go to http://fast-code.sourceforge.net/
 * @author : Biswarup
 * Created : 09/10/2014 03:54:40
 */
package org.fastcode.handler;

import static org.fastcode.common.FastCodeConstants.COLON;
import static org.fastcode.common.FastCodeConstants.COMMA;
import static org.fastcode.common.FastCodeConstants.EMPTY_STR;
import static org.fastcode.common.FastCodeConstants.EQUAL;
import static org.fastcode.common.FastCodeConstants.HASH;
import static org.fastcode.common.FastCodeConstants.NEWLINE;
import static org.fastcode.common.FastCodeConstants.PLACEHOLDER_NAME;
import static org.fastcode.common.FastCodeConstants.PLACEHOLDER_TARGET;
import static org.fastcode.common.FastCodeConstants.SPACE;
import static org.fastcode.common.FastCodeConstants.TEMPLATE_TAG_PREFIX;
import static org.fastcode.common.FastCodeConstants.XML_START;
import static org.fastcode.util.FastCodeUtil.closeInputStream;
import static org.fastcode.util.SourceUtil.getFileContents;
import static org.fastcode.util.SourceUtil.isFileSaved;
import static org.fastcode.util.StringUtil.isEmpty;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.core.runtime.Path;
import org.eclipse.jdt.core.ICompilationUnit;
import org.fastcode.common.Action;
import org.fastcode.common.FastCodeConstants.ACTION_ENTITY;
import org.fastcode.common.FastCodeConstants.ACTION_TYPE;
import org.fastcode.common.FastCodeConstants.TARGET;
import org.fastcode.common.FastCodeConstants.TemplateTag;
import org.fastcode.common.FastCodeFile;

public class FCPropertyTagHandler implements FCTagHandler {

	@Override
	public Action populateTagAction(final TemplateTag tagFound, final String tagBody, String insideTagBody,
			final ICompilationUnit compUnit, final boolean hasSubAction1, final Map<String, Object> placeHolders,
			final Map<String, Object> contextMap, final String spacesBeforeCursor, final Map<String, String> attributes,
			final StringBuilder existingMembersBuilder, final List<Action> actionList) throws Exception {
		final ACTION_TYPE actionType = ACTION_TYPE.Create;
		String targetFile = attributes.containsKey(TARGET.file.getValue()) ? attributes.get(TARGET.file.getValue()) : null;
		if (targetFile == null) {
			targetFile = attributes.containsKey(PLACEHOLDER_TARGET) ? attributes.get(PLACEHOLDER_TARGET) : null;
		}
		String propertyKey = attributes.containsKey(PLACEHOLDER_NAME) ? attributes.get(PLACEHOLDER_NAME) : null;
		final String propertyValue = attributes.containsKey("value") ? attributes.get("value") : null;
		//final IFile file = ResourcesPlugin.getWorkspace().getRoot().getFile(new Path(targetFile).makeAbsolute());
		final IFile file = !isEmpty(targetFile) && targetFile.startsWith(HASH) ? ((FastCodeFile) placeHolders.get(targetFile.replace(HASH,
				EMPTY_STR).trim())).getFile() : ResourcesPlugin.getWorkspace().getRoot().getFile(new Path(targetFile).makeAbsolute());
		final String fileFullPath = !isEmpty(targetFile) && targetFile.startsWith(HASH) ? file.getFullPath().toString() : targetFile;

		/*	if (!file.getFileExtension().equals("properties")) {
				throw new Exception("The File selected is not a property file. Please select one properties file and try again.");
			}*/
		if (!file.isSynchronized(0)) {
			throw new Exception(file.getName() + " is not Synchronized, please refresh and try again.");
		}

		if (!isFileSaved(file.getName(), file)) {
			throw new Exception(file.getName() + "  is not saved, please save and try again");
		}
		if (!isEmpty(insideTagBody) && insideTagBody.contains(XML_START + TEMPLATE_TAG_PREFIX + COLON)) {
			throw new Exception("There should not be any other tags inside <fc:properties>,  exiting....");
		}

		final InputStream inputStream = file.getContents();
		final Properties properties = new Properties();
		properties.load(inputStream);
		if (!isEmpty(insideTagBody)) {
			propertyKey = insideTagBody.substring(0, insideTagBody.indexOf(EQUAL)).replaceAll("\\s*", EMPTY_STR).trim();
		} else {
			insideTagBody = propertyKey + EQUAL + propertyValue;
		}

		if (properties.containsKey(propertyKey)) {
			closeInputStream(inputStream);
			existingMembersBuilder.append("Property key " + propertyKey + " in " + fileFullPath);
			existingMembersBuilder.append(SPACE + COMMA + SPACE);
			return null;
		}
		closeInputStream(inputStream);
		final Action actionProperty = new Action.Builder().withEntity(ACTION_ENTITY.Property).withType(actionType)
				.withSource(insideTagBody.trim()).withTarget(file).withLabelMsg("Create Property in " + fileFullPath).build();
		return actionProperty;
	}

	/**
	 * @param targetFile
	 * @param tagBody
	 */
	public void createPropertyFromTag(final Object targetFile, final String tagBody) {
		InputStream inputStream = null;
		String fileContent = EMPTY_STR;
		try {
			fileContent = getFileContents((IFile) targetFile);

			if (isEmpty(fileContent)) {
				fileContent = tagBody.trim();
			} else {
				fileContent = fileContent + NEWLINE + tagBody.trim();
			}
			inputStream = new ByteArrayInputStream(fileContent.trim().getBytes());
			((IFile) targetFile).setContents(inputStream, false, true, new NullProgressMonitor());
		} catch (final Exception ex) {
			ex.printStackTrace();
		} finally {
			closeInputStream(inputStream);
		}
	}
}
