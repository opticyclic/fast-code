/**
 * This class has been generated by Fast Code Eclipse Plugin
 * For more information please go to http://fast-code.sourceforge.net/
 * @author : Biswarup
 * Created : 09/08/2014 04:08:51
 */
package org.fastcode.handler;

import static org.fastcode.common.FastCodeConstants.AUTO_CHECKIN;
import static org.fastcode.common.FastCodeConstants.COLON;
import static org.fastcode.common.FastCodeConstants.COMMA;
import static org.fastcode.common.FastCodeConstants.DELIMITER;
import static org.fastcode.common.FastCodeConstants.DIR;
import static org.fastcode.common.FastCodeConstants.EMPTY_STR;
import static org.fastcode.common.FastCodeConstants.FC_OBJ_CREATED;
import static org.fastcode.common.FastCodeConstants.FORWARD_SLASH;
import static org.fastcode.common.FastCodeConstants.HASH;
import static org.fastcode.common.FastCodeConstants.NAMES;
import static org.fastcode.common.FastCodeConstants.OPTIONAL;
import static org.fastcode.common.FastCodeConstants.PLACEHOLDER_FILE;
import static org.fastcode.common.FastCodeConstants.PLACEHOLDER_FOLDER;
import static org.fastcode.common.FastCodeConstants.PLACEHOLDER_NAME;
import static org.fastcode.common.FastCodeConstants.PLACEHOLDER_PROJECT;
import static org.fastcode.common.FastCodeConstants.SPACE;
import static org.fastcode.common.FastCodeConstants.TEMPLATE_TAG_PREFIX;
import static org.fastcode.common.FastCodeConstants.XML_EXTENSION;
import static org.fastcode.common.FastCodeConstants.XML_START;
import static org.fastcode.popup.actions.snippet.TemplateTagsProcessor.proceedWithAutoCheckin;
import static org.fastcode.util.FastCodeUtil.closeInputStream;
import static org.fastcode.util.SourceUtil.createFolder;
import static org.fastcode.util.SourceUtil.getRepositoryServiceClass;
import static org.fastcode.util.SourceUtil.getWorkingJavaProjectFromUser;
import static org.fastcode.util.StringUtil.format;
import static org.fastcode.util.StringUtil.formatXml;
import static org.fastcode.util.StringUtil.isEmpty;
import static org.fastcode.util.StringUtil.isValidXml;
import static org.fastcode.util.VersionControlUtil.isPrjConfigured;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IFolder;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.core.runtime.Path;
import org.eclipse.jdt.core.ICompilationUnit;
import org.eclipse.jdt.core.IJavaProject;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.IWorkbench;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.ide.IDE;
import org.fastcode.common.Action;
import org.fastcode.common.FastCodeConstants.ACTION_ENTITY;
import org.fastcode.common.FastCodeConstants.ACTION_TYPE;
import org.fastcode.common.FastCodeConstants.TemplateTag;
import org.fastcode.common.FastCodeEntityHolder;
import org.fastcode.common.FastCodeFile;
import org.fastcode.common.FastCodeFolder;
import org.fastcode.common.FastCodeObject;
import org.fastcode.exception.FastCodeRepositoryException;
import org.fastcode.popup.actions.snippet.TemplateTagsProcessor;
import org.fastcode.preferences.VersionControlPreferences;
import org.fastcode.util.RepositoryService;

public class FCFileTagHandler implements FCTagHandler {

	@Override
	public Action populateTagAction(final TemplateTag tagFound, final String tagBody, String insideTagBody,
			final ICompilationUnit compUnit, final boolean hasSubAction1, final Map<String, Object> placeHolders,
			final Map<String, Object> contextMap, final String spacesBeforeCursor, final Map<String, String> attributes,
			final StringBuilder existingMembersBuilder, final List<Action> actionList) throws Exception {
		String memberName = null;
		String folderPath = null;
		boolean optional = false;
		final ACTION_TYPE actionType = ACTION_TYPE.Create;
		String delimiter = null;
		if (tagFound == TemplateTag.FILE) {
			memberName = attributes.containsKey(PLACEHOLDER_NAME) ? attributes.get(PLACEHOLDER_NAME) : null;
		} else if (tagFound == TemplateTag.FILES) {
			memberName = attributes.containsKey(NAMES) ? attributes.get(NAMES) : null;
		}
		folderPath = attributes.containsKey(PLACEHOLDER_FOLDER) ? attributes.get(PLACEHOLDER_FOLDER) : null;
		if (isEmpty(folderPath)) {
			folderPath = attributes.containsKey(DIR) ? attributes.get(DIR) : null;
		}
		optional = attributes.containsKey(OPTIONAL) ? Boolean.valueOf(attributes.get(OPTIONAL)) : false;
		delimiter = attributes.containsKey(DELIMITER) ? attributes.get(DELIMITER) : SPACE;
		final String fileProject = attributes.containsKey(PLACEHOLDER_PROJECT) ? attributes.get(PLACEHOLDER_PROJECT) : null;

		/*if (isEmpty(folderPath)) {
			throw new Exception("Please provide attribute \"folder\" for <fc:" + tagFound.toString().toLowerCase()
					+ "> folder attribute in the XML and try again. ");
		}*/
		/*if (isEmpty(fileProject)) {
			throw new Exception("Please provide attribute \"project\" for <fc:" + tagFound.toString().toLowerCase()
					+ "> folder attribute in the XML and try again. ");
		}*/
		if (isEmpty(memberName)) {
			final String name = tagFound == TemplateTag.FILE ? PLACEHOLDER_NAME : NAMES;
			throw new Exception("Please provide attribute" + "\"" + name + "\" for <fc:" + tagFound.toString().toLowerCase()
					+ ">  tag in the XML and try again. ");
		}
		if (!isEmpty(insideTagBody) && insideTagBody.contains(XML_START + TEMPLATE_TAG_PREFIX + COLON)) {
			throw new Exception("There should not be any other tags inside <fc:" + tagFound.toString().toLowerCase() + ">,  exiting....");
		}
		final List<String> fileNamesList = new ArrayList<String>();
		if (tagFound == TemplateTag.FILE) {
			if (!isEmpty(memberName) && memberName.endsWith(XML_EXTENSION)) {
				if (!isEmpty(insideTagBody)) {
					insideTagBody = isValidXml(insideTagBody) ? formatXml(insideTagBody) : format(insideTagBody, EMPTY_STR);
				}
			}

		} else if (tagFound == TemplateTag.FILES) {
			if (!isEmpty(memberName)) {
				for (final String file : memberName.split(delimiter)) {
					fileNamesList.add(file);
					if (!isEmpty(file.trim()) && file.trim().endsWith(XML_EXTENSION)) {
						if (!isEmpty(insideTagBody)) {
							insideTagBody = isValidXml(insideTagBody) ? formatXml(insideTagBody) : format(insideTagBody, EMPTY_STR);
						}
					}
				}
			}
			final String[] namesarr = memberName.split(delimiter);
			boolean duplicate = false;
			for (int j = 0; j < namesarr.length; j++) {
				for (int k = j + 1; k < namesarr.length; k++) {
					if (namesarr[k].equals(namesarr[j])) {
						duplicate = true;
						break;
					}
					if (duplicate) {
						break;
					}
				}
			}
			if (duplicate) {
				throw new Exception(
						"Attribute \"names\" contains duplicate file name,Please provide correct attribute \"names\"  for <fc:files> tag in the XML and try again");
			}
		}

		IFolder folder = null;
		boolean createInDefaultPath = false;
		IProject prj = null;
		final TemplateTagsProcessor templateTagsProcessor = new TemplateTagsProcessor();
		if (!isEmpty(folderPath)) {
			if (!folderPath.startsWith(HASH)) {
				folderPath = templateTagsProcessor.validateFolderPath(folderPath, fileProject, placeHolders);
			}
		}
		if (!isEmpty(folderPath) && folderPath.startsWith(HASH)) {
			folder = ((FastCodeFolder) placeHolders.get(folderPath.replace(HASH, EMPTY_STR).trim())).getFolder();
		}
		if (!isEmpty(folderPath)) {
			if (!folderPath.startsWith(HASH)) {
				boolean createProject = false;
				folder = ResourcesPlugin.getWorkspace().getRoot().getFolder(new Path(folderPath));
				for (final Action action : actionList) {
					if (action.getEntity() == ACTION_ENTITY.Project) {
						if (action.getEntityName().equals(
								folderPath.substring(0, folderPath.indexOf(FORWARD_SLASH)).equals(EMPTY_STR) ? null : folderPath.substring(
										0, folderPath.indexOf(FORWARD_SLASH)))) {
							//javaProject = null;
							createProject = true;
						}
					}
				}
				if (!createProject) {
					if (folder.getProject() == null || !folder.getProject().exists()) {
						final boolean confirm = MessageDialog.openConfirm(new Shell(), "Confirmation", "Project:  "
								+ folder.getProject().getName()
								+ "  Does not exist,\n Would You like to select another project for creating file?");
						if (!confirm) {
							return null;
						} else {
							IJavaProject project1 = null;
							if (folder.getProject() == null || !folder.getProject().exists()) {
								project1 = getWorkingJavaProjectFromUser();
								folderPath = project1.getElementName() + FORWARD_SLASH + folder.getParent().getName() + FORWARD_SLASH
										+ folder.getName();
								folder = ResourcesPlugin.getWorkspace().getRoot().getFolder(new Path(folderPath));
							}
						}
					}
				}
				/*if (!isEmpty(fileProject) && (!fileProject.equals(folder.getProject().getName()))) {
					throw new Exception(
							"Project in attribute \"folder/dir\" does not match with attribute \"project\" of <fc:file> tag in the XML.Please provide same project and try again.");
				}*/
			}
		} else {
			if (!isEmpty(fileProject)) {
				if (isEmpty(folderPath)) {
					folder = null;
					createInDefaultPath = true;
					//folderPath = fileProject + FORWARD_SLASH + memberName;
				} else {
					folderPath = fileProject + FORWARD_SLASH + folderPath;
					folder = ResourcesPlugin.getWorkspace().getRoot().getFolder(new Path(folderPath));
				}
			}
		}

		if (createInDefaultPath) {
			prj = ResourcesPlugin.getWorkspace().getRoot().getProject(fileProject);
		}
		//folder = ResourcesPlugin.getWorkspace().getRoot().getFolder(new Path(dir));
		boolean isFileExist = false;
		//if (folder != null && folder.exists()) {
		if (tagFound == TemplateTag.FILE) {
			final IFile file = createInDefaultPath ? ResourcesPlugin.getWorkspace().getRoot()
					.getFile(new Path(fileProject + FORWARD_SLASH + memberName)) : folder.getFile(new Path(memberName));
			if (file != null && file.exists()) {
				isFileExist = true;
			}
		} else if (tagFound == TemplateTag.FILES) {
			for (final String fileName : memberName.split(delimiter)) {
				final IFile file = createInDefaultPath ? ResourcesPlugin.getWorkspace().getRoot()
						.getFile(new Path(fileProject + FORWARD_SLASH + fileName)) : folder.getFile(new Path(fileName));
				if (file != null && file.exists()) {
					existingMembersBuilder.append("File with Name:  " + fileName);
					existingMembersBuilder.append(SPACE + COMMA + SPACE);
					fileNamesList.remove(fileName);
					continue;
				}
			}

			String fileNames = EMPTY_STR;
			if (!fileNamesList.isEmpty()) {
				for (final String fileName : fileNamesList) {
					fileNames = fileNames + fileName + delimiter;
				}
				memberName = fileNames;
			} else {
				return null;
			}
		}
		if (isEmpty(memberName)) {
			return null;
		}
		String msg1 = EMPTY_STR;
		if (!createInDefaultPath) {
			msg1 = folder == null || !folder.exists() ? "new folder" : EMPTY_STR;
		} else {
			msg1 = folder == null || !folder.exists() ? "default path" : EMPTY_STR;
		}
		final String msg2 = isFileExist ? " (File already exists.)" : EMPTY_STR;
		final String actionTypeLbl = isFileExist ? "Overwrite " : actionType.toString();
		final String fileNames1 = memberName;
		final String labelMsgPart = memberName.contains(delimiter) ? fileNames1.replace(delimiter, COMMA + SPACE) : memberName;
		/*
		 * if (folder.getProject().isSynchronized(0)) { throw new
		 * Exception("Project: " + folder.getProject().getName() +
		 * " is not synchronized ,Please refresh and try again."); }
		 */
		final Action actionFile = new Action.Builder()
				.withEntity(tagFound == TemplateTag.FILE ? ACTION_ENTITY.File : ACTION_ENTITY.Files)
				.withType(actionType)
				.withEntityName(memberName)
				.withFolderPath(createInDefaultPath ? null : folder.getFullPath().toString())
				.withSource(isEmpty(insideTagBody) ? insideTagBody : insideTagBody.trim())
				.withLabelMsg(
						createInDefaultPath ? actionTypeLbl + SPACE + tagFound.toString().toLowerCase() + SPACE + labelMsgPart + "  in  "
								+ msg1 + SPACE + msg2 : actionTypeLbl + SPACE + tagFound.toString().toLowerCase() + SPACE + labelMsgPart
								+ "  in  " + msg1 + SPACE + folder.getFullPath().toString() + msg2).withOptional(optional)
				.withDelimiter(delimiter).withExist(isFileExist).withProject(prj).build();

		return actionFile;
		//break;
	}

	/**
	 * @param name
	 * @param dir
	 * @param insideTagBody
	 * @param contextMap
	 * @param placeHolders
	 * @param isExist
	 * @param project
	 * @param overWrite
	 * @throws Exception
	 */
	public void createFileFromTag(final String name, final Object dir, final String insideTagBody, final Map<String, Object> contextMap,
			final Map<String, Object> placeHolders, final boolean isExist, final Object project, final boolean overWrite) throws Exception {

		InputStream inputStream = null;
		final VersionControlPreferences versionControlPreferences = VersionControlPreferences.getInstance();
		if (!isEmpty(insideTagBody)) {
			inputStream = new ByteArrayInputStream(insideTagBody.trim().getBytes());
		} else {
			inputStream = new ByteArrayInputStream(EMPTY_STR.getBytes());
		}
		IFile file;
		if (dir == null) {
			file = ((IProject) project).getFile(name);
		} else {
			IFolder folder = dir instanceof String ? ResourcesPlugin.getWorkspace().getRoot().getFolder(new Path((String) dir))
					: ((FastCodeFolder) dir).getFolder();
			if (folder == null || !folder.exists()) {
				folder = createFolder(new Path((String) dir));
			}
			file = folder.getFile(new Path(name));
		}
		boolean createFileAlone = true;
		try {
			final File newFileObj = new File(file.getLocationURI());
			if ((Boolean) placeHolders.get(AUTO_CHECKIN)) {
				final boolean prjShared = !isEmpty(file.getProject().getPersistentProperties());
				final boolean prjConfigured = !isEmpty(isPrjConfigured(file.getProject().getName()));
				createFileAlone = !(versionControlPreferences.isEnable() && prjShared && prjConfigured);
				if (proceedWithAutoCheckin(newFileObj, file.getProject())) {
					final RepositoryService repositoryService = getRepositoryServiceClass();
					try {
						if (repositoryService.isFileInRepository(newFileObj)) { // && !MessageDialog.openQuestion(new Shell(), "File present in repository", "File already present in repository. Click yes to overwrite")) {
							/*MessageDialog.openWarning(new Shell(), "File present in repository", name + " is already present in repository. Please synchronise and try again.");
							return;*/
							createFileAlone = MessageDialog
									.openQuestion(
											new Shell(),
											"File present in repository",
											"File "
													+ newFileObj.getName()
													+ " already present in repository. Click yes to just create the file, No to return without any action.");
							if (!createFileAlone) {
								return;
							}
						}
					} catch (final Throwable th) {
						th.printStackTrace();
						createFileAlone = true;
					}
				}
			}
		} catch (final FastCodeRepositoryException ex1) {
			ex1.printStackTrace();
		}
		try {
			if (isExist) {
				/*final boolean overWrite = MessageDialog.openQuestion(new Shell(), "Overwrite File", "File " + dir + FORWARD_SLASH + name
						+ " already exists, Would you like to overwrite?");*/
				if (overWrite) {
					//backUpExistingExportFile(file, name, folder.getProjectRelativePath().toString());
					file.setContents(inputStream, false, true, new NullProgressMonitor());
				} else {
					return;
				}
			} else {
				file.create(inputStream, true, null);
			}
		} catch (final Exception ex) {
			ex.printStackTrace();
			throw new Exception(ex.getMessage());
		} finally {
			closeInputStream(inputStream);
		}

		final IWorkbench wb = PlatformUI.getWorkbench();
		final IWorkbenchPage page = wb.getActiveWorkbenchWindow().getActivePage();
		IDE.openEditor(page, file);
		contextMap.put("File_" + file.getName(), new FastCodeObject(file, ACTION_ENTITY.File.getValue()));
		/*
		 * final IEditorPart editorPart = getEditorPartFromFile(file);
		 * editorPart.doSave(new NullProgressMonitor());
		 */
		if (!createFileAlone) {
			List<FastCodeEntityHolder> chngsForType = ((Map<Object, List<FastCodeEntityHolder>>) contextMap.get(FC_OBJ_CREATED)).get(file);//.getLocation().toFile());
			if (chngsForType == null) {
				chngsForType = new ArrayList<FastCodeEntityHolder>();
				chngsForType.add(new FastCodeEntityHolder(PLACEHOLDER_FILE, new FastCodeFile(file.getName(), file.getProjectRelativePath()
						.toString())));
			}
			((Map<Object, List<FastCodeEntityHolder>>) contextMap.get(FC_OBJ_CREATED)).put(file, chngsForType);
		}
	}
}
