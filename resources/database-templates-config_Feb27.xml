<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE templates PUBLIC "//UNKNOWN/" "http://fast-code.sourceforge.net/dtd/template.dtd">

<templates>
	<template name="INSERT_SIMPLE">
		<description>Used to insert statement.</description>
		<allowed-file-names>*.java</allowed-file-names>
		<template-body>
			<![CDATA[
				// Creating new insert statement
				#set ($vsnpt = "")
				#foreach ($field in ${fields})
					#if ($vsnpt == "")
						#set ($vsnpt = "${field.name}")
					#else
						#set ($vsnpt = "${vsnpt}, ${field.name}")
					#end
				#end
				#set ($snpt = "")
				#foreach ($field in ${fields})
					#if ($snpt == "")
						#set ($snpt = "?")
					#else
						#set ($snpt = "${snpt}, ?")
					#end
				#end
				String sql = "insert into ${table} (${vsnpt}) values (${snpt})";
				PreparedStatement ps = con.prepareStatement(sql);
				//set the insert fields
				#foreach ($field in ${fields})
					<fc:import>${field.javaTypeName}</fc:import>
					ps.${MethodFieldMap.get(${field.type.toLowerCase()})}($foreach.count, ${field.value});
				#end
				int insertCount=ps.executeUpdate();
			]]>
		</template-body>
	</template>

	<template name="INSERT_WITH_NAMED_PARAMETER">
		<description>Used to insert statement with named parameter.</description>
		<allowed-file-names>*.java</allowed-file-names>
		<template-body>
			<![CDATA[
				// Creating new insert statement
				#set ($vsnpt = "")
				#foreach ($field in ${fields})
					#if ($vsnpt == "")
						#set ($vsnpt = "${field.name}")
					#else
						#set ($vsnpt = "${vsnpt}, ${field.name}")
					#end
				#end
				#set ($snpt = "")
				#foreach ($field in ${fields})
					#if ($snpt == "")
						#set ($snpt = ":${field.name}")
					#else
						#set ($snpt = "${snpt}, :${field.name}")
					#end
				#end
				String sqlQuery = "insert into ${table} (${vsnpt}) values (${snpt})";
				Map namedParameters = new HashMap();
				#foreach ($field in ${fields})
					<fc:import>${field.javaTypeName}</fc:import>
					namedParameters.put("${field.name}", ${field.value});
				#end
				namedParameterJdbcTemplate.update(sqlQuery, namedParameters);
			]]>
		</template-body>
	</template>

	<template name="INSERT_WITH_NAMED_QUERY">
		<description>Used to insert statement with named query.</description>
		<allowed-file-names>*.java</allowed-file-names>
		<template-body>
			<![CDATA[
				// Creating new insert statement
				#set ($Qt = '"')
				#set ($vsnpt = "")
				#foreach ($field in ${fields})
					#if ($vsnpt == "")
						#set ($vsnpt = "${field.name}")
					#else
						#set ($vsnpt = "${vsnpt}, ${field.name}")
					#end
				#end
				#set ($snpt = "")
				#foreach ($field in ${fields})
					#if ($snpt == "")
						#set ($snpt = "?")
					#else
						#set ($snpt = "${snpt}, ?")
					#end
				#end
				##String sql = "insert into ${table} (${vsnpt}) values (${snpt})";
				EntityManager em = ...
				Query q = em.createNamedQuery(${Qt}${queryName}${Qt}).execute();
			   #if (!${useExistingNamedQuery})
				<fc:xml parent="entity-mappings" node="sql-query" target="${target}">
					#set ($vsnpt = "")
				    #foreach ($field in ${fields})
					 #if ($vsnpt == "")
						#set ($vsnpt = "${field.name}")
					#else
						#set ($vsnpt = "${vsnpt}, ${field.name}")
					#end
				#end
				#set ($snpt = "")
				#foreach ($field in ${fields})
					#if ($snpt == "")
						#set ($snpt = "?")
					#else
						#set ($snpt = "${snpt}, ?")
					#end
				#end
   				<sql-query name="${queryName}">
      				<query>
      				&lt;![CDATA[
						insert into ${table} (${vsnpt}) values (${snpt})
					]]&gt;
      				</query>
   				</sql-query>
			</fc:xml>
			#end
			]]>
		</template-body>
	</template>

	<template name="INSERT_WITH_NAMED_QUERY_ANNOTATION">
		<description>Used to insert statement with named query and annotation.</description>
		<allowed-file-names>*.java</allowed-file-names>
		<template-body>
			<![CDATA[
				// Creating new insert statement
				#set ($Qt = '"')
				#set ($vsnpt = "")
				#foreach ($field in ${fields})
					#if ($vsnpt == "")
						#set ($vsnpt = "${field.name}")
					#else
						#set ($vsnpt = "${vsnpt}, ${field.name}")
					#end
				#end
				#set ($snpt = "")
				#foreach ($field in ${fields})
					#if ($snpt == "")
						#set ($snpt = "?")
					#else
						#set ($snpt = "${snpt}, ?")
					#end
				#end
				##String sql = "insert into ${table} (${vsnpt}) values (${snpt})";
				EntityManager em = ...
				Query q = em.createNamedQuery(${Qt}${queryName}${Qt}).execute();

			   #if (!${useExistingNamedQuery})
				<fc:xml parent="entity-mappings" node="sql-query" target="${target}">
					#set ($vsnpt = "")
				#foreach ($field in ${fields})
					#if ($vsnpt == "")
						#set ($vsnpt = "${field.name}")
					#else
						#set ($vsnpt = "${vsnpt}, ${field.name}")
					#end
				#end
				#set ($snpt = "")
				#foreach ($field in ${fields})
					#if ($snpt == "")
						#set ($snpt = "?")
					#else
						#set ($snpt = "${snpt}, ?")
					#end
				#end
   					<sql-query name="${queryName}">
      					<query>
      					&lt;![CDATA[
						insert into ${table} (${vsnpt}) values (${snpt})
						]]&gt;
      					</query>
   					</sql-query>
				</fc:xml>
			#end
			]]>
		</template-body>
	</template>

	<template name="UPDATE_SIMPLE">
		<description>Used to create update statement.</description>
		<allowed-file-names>*.java</allowed-file-names>
		<template-body>
			<![CDATA[
				// Creating new update statement
				#set ($update_part = "")
				#foreach ($field in ${fields})
				#set ($update_part = "${update_part} ${field.name} = ?")
					#if ($foreach.count < ${fields.size()})
						#set ($update_part = "${update_part}, ")
					#end
				#end
				#set ($where_part = "")
				#if (${where_fields} && ${where_fields.size()} > 0)
						#set ($where_part = "where ")
					#end
				#foreach ($field in ${where_fields})
					#if (${field.whereQualifier.count} == 0)
						#set ($where_part = "${where_part} ${instance}.${field.name} ${field.whereQualifier.sign} ")
					#elseif (${field.whereQualifier.count} == 2)
						#set ($where_part = "${where_part} ${instance}.${field.name} ${field.whereQualifier.sign} ( ? AND ? )")
						#set ($count = ${count} + 1)
						#set ($betweenset = "${field.name}")
					#elseif (${field.whereQualifier.count} == 1 )
						#set ($where_part = "${where_part} ${instance}.${field.name} ${field.whereQualifier.sign} ? ")
					#end
				        #if ($foreach.count < ${where_fields.size()})
							#set ($where_part = "${where_part} ${where_separator} ")
					 	#end
				#end
				String sql = "update ${table} ${instance} set ${update_part} ${where_part}";
				PreparedStatement ps = con.prepareStatement(sql);
				#set ($velCount = 0)
				// Set the update fields
				#foreach ($field in ${fields})
					<fc:import>${field.javaTypeName}</fc:import>
					ps.${MethodFieldMap.get(${field.type.toLowerCase()})}($foreach.count, ${field.value});
					#set ($velCount = $foreach.count + 1)
				#end
				// Set the where fields
				#foreach ($field in ${where_fields})
					<fc:import>${field.javaTypeName}</fc:import>
					#if (${field.whereQualifier.count} > 0)
						#if (${field.whereQualifier.count}==2)
							ps.${MethodWhereFieldMap.get(${field.type.toLowerCase()})}(${velCount}, ${field.value});
							#set ($velCount = ${velCount} + 1)
						#end
						ps.${MethodWhereFieldMap.get(${field.type.toLowerCase()})}(${velCount}, ${field.value});
							#set ($velCount = ${velCount} + 1)
					#end
				#end
				int updateCount = ps.executeUpdate();
			]]>
		</template-body>
	</template>

	<template name="UPDATE_WITH_NAMED_PARAMETER">
		<description>Used to create update statement with named parameter.</description>
		<allowed-file-names>*.java</allowed-file-names>
		<template-body>
			<![CDATA[
				// Creating new update statement
				#set ($update_part = "")
				#foreach ($field in ${fields})
					#set ($update_part = "${update_part} ${field.name} = :${field.name}")
					#if ($foreach.count < ${fields.size()})
						#set ($update_part = "${update_part}, ")
					#end
				#end
				#set ($where_part = "")
				#if (${where_fields} && ${where_fields.size()} > 0)
						#set ($where_part = "where ")
					#end
				#foreach ($field in ${where_fields})
					#set ($where_part = "${where_part} ${field.name} =:${field.name}")
				    #if ($foreach.count < ${where_fields.size()})
						#set ($where_part = "${where_part} ${where_separator} ")
					#end
				#end
				String sqlQuery = "update ${table} set ${update_part} ${where_part}";
				Map namedParameters = new HashMap();
				#foreach ($field in ${fields})
					<fc:import>${field.javaTypeName}</fc:import>
					namedParameters.put("${field.name}", ${field.value});
				#end
				#foreach ($field in ${where_fields})
					<fc:import>${field.javaTypeName}</fc:import>
					#if (${field.whereQualifier.count} > 0)
						namedParameters.put("${field.name}", ${field.value});
					#end
				#end
				namedParameterJdbcTemplate.update(sqlQuery, namedParameters);
			]]>
		</template-body>
	</template>

	<template name="UPDATE_WITH_NAMED_QUERY">
		<description>Used to create update statement with named query.</description>
		<allowed-file-names>*.java</allowed-file-names>
		<template-body>
			<![CDATA[
				// Creating new update statement
				#set ($Qt = '"')
				#set ($update_part = "")
				#foreach ($field in ${fields})
					#set ($update_part = "${update_part} ${field.name} = :${field.name}")
					#if ($foreach.count < ${fields.size()})
						#set ($update_part = "${update_part}, ")
					#end
				#end
				#set ($where_part = "")
				#if (${where_fields} && ${where_fields.size()} > 0)
						#set ($where_part = "where ")
					#end
				#foreach ($field in ${where_fields})
					#set ($where_part = "${where_part} ${field.name}")
				    #if ($foreach.count < ${where_fields.size()})
						#set ($where_partt = "${where_part} ${where_separator} ")
					#end
				#end
				##String sql = "update ${table} set ${update_part} ${where_part}";
				EntityManager em = ...
				Query q = em.createNamedQuery(${Qt}${queryName}${Qt});
				#foreach ($field in ${where_fields})
					#if (${field.whereQualifier.count} > 0)
						q.setParameter("${field.name}", "${field.name}");
					#end
				#end
				int res = q.executeUpdate();
				#if (!${useExistingNamedQuery})
				<fc:xml parent="entity-mappings" node="sql-query" target="${target}">
					#set ($update_part = "")
					#foreach ($field in ${fields})
						#set ($update_part = "${update_part} ${field.name} = :${field.name}")
						#if ($foreach.count < ${fields.size()})
							#set ($update_part = "${update_part}, ")
						#end
					#end
					#set ($where_part = "")
					#if (${where_fields} && ${where_fields.size()} > 0)
						#set ($where_part = "where ")
					#end
					#foreach ($field in ${where_fields})
						#set ($where_part = "${where_part} ${field.name} ${field.whereQualifier.sign} :${field.name}")
						#if ($foreach.count < ${where_fields.size()})
							#set ($where_part = "${where_part} ${where_separator} ")
						#end
					#end
   						<sql-query name="${queryName}">
      						<query>
      						&lt;![CDATA[
      						update ${table} set ${update_part} ${where_part}
							]]&gt;
      					</query>
   					</sql-query>
				</fc:xml>
			#end
			]]>
		</template-body>
	</template>

	<template name="UPDATE_WITH_NAMED_QUERY_ANNOTATION">
		<description>Used to create update statement with named query and annoation.</description>
		<allowed-file-names>*.java</allowed-file-names>
		<template-body>
			<![CDATA[
				// Creating new update statement
				#set ($Qt = '"')
				#set ($update_part = "")
				#foreach ($field in ${fields})
					#set ($update_part = "${update_part} ${field.name} = :${field.name}")
					#if ($foreach.count < ${fields.size()})
						#set ($update_part = "${update_part}, ")
					#end
				#end
				#set($where_part = "")
				#foreach ($field in ${where_fields})
					#set ($where_part = "${where_part} ${field.name}")
				    #if ($foreach.count < ${where_fields.size()})
						#set ($where_part = "${where_part} ${where_separator} ")
					#end
				#end
				##String sql = "update ${table} set ${update_part} where ${where_part}";
				EntityManager em = ...
				Query q = em.createNamedQuery(${Qt}${queryName}${Qt});
				#foreach ($field in ${where_fields})
					#if (${field.whereQualifier.count} > 0)
						q.setParameter("${field.name}", "${field.name}");
					#end
				#end
				int res = q.executeUpdate();
				#if(!${useExistingNamedQuery})
				<fc:xml parent="entity-mappings" node="sql-query" target="${target}">
					#set ($update_part = "")
					#foreach ($field in ${fields})
						#set ($update_part = "${update_part} ${field.name} = :${field.name}")
						#if ($foreach.count < ${fields.size()})
							#set ($update_part = "${update_part}, ")
						#end
					#end
					#set ($where_part = "")
					#if (${where_fields} && ${where_fields.size()} > 0)
						#set ($where_part = "where ")
					#end
					#foreach ($field in ${where_fields})
						#set ($where_part = "${where_part} ${field.name} ${field.whereQualifier.sign} :${field.name}")
						#if ($foreach.count < ${where_fields.size()})
							#set ($where_part = "${where_part} ${where_separator} ")
						#end
					#end
   						<sql-query name="${queryName}">
      						<query>
      						&lt;![CDATA[
      						update ${table} set ${update_part} ${where_part}
							]]&gt;
      						</query>
   						</sql-query>
					</fc:xml>
				#end
			]]>
		</template-body>
	</template>

	<template name="DELETE_SIMPLE">
		<description>Used to create delete statement.</description>
		<allowed-file-names>*.java</allowed-file-names>
		<template-body>
			<![CDATA[
				//create delete statement
				#set ($where_part = "")
				#if (${where_fields} && ${where_fields.size()} > 0)
					#set ($where_part = "where ")
				#end
				#foreach ($field in ${where_fields})
					#if (${field.whereQualifier.count} == 0)
						#set ($where_part = "${where_part} ${field.name} ${field.whereQualifier.sign} ")
					#elseif(${field.whereQualifier.count} == 2)
						#set ($where_part = "${where_part} ${field.name} ${field.whereQualifier.sign} ( ? AND ? )")
						#set ($count = ${count} + 1)
						#set ($betweenset = "${field.name}")
					#elseif (${field.whereQualifier.count} == 1 )
						#set ($where_part = "${where_part} ${field.name} ${field.whereQualifier.sign} ? ")
					#end
					#if ($foreach.count < ${where_fields.size()})
						#set ($where_part = "${where_part} ${where_separator} ")
					#end
				#end
				final String sqlQuery = "delete from ${table} ${where_part}";
				PreparedStatement ps = con.prepareStatement(sqlQuery);
				#set ($whereCount = 1)
				//set the where fields
				#foreach ($field in ${where_fields})
					#if (${field.whereQualifier.count} > 0)
						<fc:import>${field.javaTypeName}</fc:import>
						#if (${field.whereQualifier.count}==2)
							ps.${MethodWhereFieldMap.get(${field.type.toLowerCase()})}(${whereCount}, ${field.value});
							#set ($whereCount = ${whereCount} + 1)
						#end
						ps.${MethodWhereFieldMap.get(${field.type.toLowerCase()})}(${whereCount}, ${field.value});
						#set ($whereCount = ${whereCount} + 1)
					#end
				#end
				int deleteCount = ps.executeUpdate();
			]]>
		</template-body>
	</template>

	<template name="DELETE_WITH_NAMED_PARAMETER">
		<description>Used to create delete statement with named parameter.</description>
		<allowed-file-names>*.java</allowed-file-names>
		<template-body>
			<![CDATA[
				//create delete statement
				#set ($where_part = "")
				#if (${where_fields} && ${where_fields.size()} > 0)
					#set ($where_part = "where ")
				#end
				#foreach ($field in ${where_fields})
					#set ($where_part = "${where_part} ${field.name} ${field.whereQualifier.sign} :${field.name}")
					#if ($foreach.count < ${where_fields.size()})
						#set ($where_part = "${where_part} ${where_separator} ")
					#end
				#end
				final String sqlQuery = "delete from ${table} ${where_part}";
				Map namedParameters = new HashMap();
				#foreach ($field in ${where_fields})
					<fc:import>${field.javaTypeName}</fc:import>
					#if (${field.whereQualifier.count} > 0)
						namedParameters.put("${field.name}", ${field.value});
					#end
				#end
				namedParameterJdbcTemplate.update(sqlQuery, namedParameters);
			]]>
		</template-body>
	</template>

	<template name="DELETE_WITH_NAMED_QUERY">
		<description>Used to create delete statement with named query.</description>
		<allowed-file-names>*.java</allowed-file-names>
		<template-body>
			<![CDATA[
				//create delete statement
				#set ($Qt = '"')
				#set ($where_part = "")
				#if (${where_fields} && ${where_fields.size()} > 0)
					#set ($where_part = "where ")
				#end
				#foreach ($field in ${where_fields})
					#set ($where_part = "${where_part} ${field.name} ${field.whereQualifier.sign} :${field.name}")
					#if ($foreach.count < ${where_fields.size()})
						#set ($where_part = "${where_part} ${where_separator} ")
					#end
				#end
				EntityManager em = ...
				Query q = em.createNamedQuery(${Qt}${queryName}${Qt});
				#foreach ($field in ${where_fields})
					#if (${field.whereQualifier.count} > 0)
						q.setParameter("${field.name}", "${field.name}");
					#end
				#end
				int res = q.executeUpdate();
				#if (!${useExistingNamedQuery})
				<fc:xml parent="entity-mappings" node="sql-query" target="${target}">
					#set ($where_part = "")
					#if (${where_fields} && ${where_fields.size()} > 0)
						#set ($where_part = "where ")
					#end
					#foreach ($field in ${where_fields})
						#set ($where_part = "${where_part} ${field.name} ${field.whereQualifier.sign} :${field.name}")
						#if ($foreach.count < ${where_fields.size()})
							#set ($where_part = "${where_part} ${where_separator} ")
						#end
					#end
   						<sql-query name="${queryName}">
      						<query>
      							&lt;![CDATA[
								delete from ${table} ${where_part}
								]]&gt;
      						</query>
   						</sql-query>
					</fc:xml>
				#end
			]]>
		</template-body>
	</template>

	<template name="DELETE_WITH_NAMED_QUERY_ANNOTATION">
		<description>Used to create delete statement with naemd query and annotaion.</description>
		<allowed-file-names>*.java</allowed-file-names>
		<template-body>
			<![CDATA[
				//create delete statement
				#set ($Qt = '"')
				#set ($where_part = "")
				#if (${where_fields} && ${where_fields.size()} > 0)
					#set ($where_part = "where ")
				#end
				#foreach ($field in ${where_fields})
					#set ($where_part = "${where_part} ${field.name} ${field.whereQualifier.sign} :${field.name}")
					#if ($foreach.count < ${where_fields.size()})
						#set ($where_part = "${where_part} ${where_separator} ")
					#end
				#end
				EntityManager em = ...
				Query q = em.createNamedQuery(${Qt}${queryName}${Qt});
				#foreach ($field in ${where_fields})
					#if (${field.whereQualifier.count} > 0)
						q.setParameter("${field.name}", "${field.name}");
					#end
				#end
				int res = q.executeUpdate();
				#if (!${useExistingNamedQuery})
				<fc:xml parent="entity-mappings" node="sql-query" target="${target}">
					#set ($where_part = "")
					#if (${where_fields} && ${where_fields.size()} > 0)
						#set ($where_part = "where ")
					#end
					#foreach ($field in ${where_fields})
						#set ($where_part = "${where_part} ${field.name} ${field.whereQualifier.sign} :${field.name}")
						#if ($foreach.count < ${where_fields.size()})
							#set ($where_part = "${where_part} ${where_separator} ")
						#end
					#end
   				<sql-query name="${queryName}">
      			<query>
      				&lt;![CDATA[
						delete from ${table} ${where_part}
					]]&gt;
      			</query>
   				</sql-query>
			</fc:xml>
		#end
			]]>
		</template-body>
	</template>

	<template name="SELECT_SIMPLE">
		<description>Used to create select statement.</description>
		<allowed-file-names>*.java</allowed-file-names>
		<template-body>
			<![CDATA[
				//create select statement
				#set ($select_part = "")
				#if (!${fields} || ${fields.size()} == 0)
					#set ($select_part = "${instance}")
				#end
				#foreach ($field in ${fields})
					#if (${field.getSQLFunction()} != "select")
						#if ($field.getSQLFunction() == "now")
							#set ($select_part = "${select_part} ${field.getSQLFunction().toUpperCase()}()")
						#elseif (${field.getSQLFunction()} == "mid")
							#set ($select_part = "${select_part} ${field.getSQLFunction().toUpperCase()}(${instance}.${field.name},  ,  )")
						#elseif (${field.getSQLFunction()} == "round")
							#set ($select_part = "${select_part} ${field.getSQLFunction().toUpperCase()}(${instance}.${field.name},   )")
						#else
							#set ($select_part = "${select_part} ${field.getSQLFunction().toUpperCase()}(${instance}.${field.name})")
						#end
					#else
						#set($select_part = "${select_part}${instance}.${field.name}")
					#end
					#if ($foreach.count < ${fields.size()})
						#set ($select_part = "${select_part}, ")
					#end
				#end
				#set ($join_part = "")
				#foreach ($field in ${join_fields})
					#set ($join_part = "${join_part} join ${instance}.${field.name}")
				#end
				#set ($where_part = "")
				#if (${where_fields} && ${where_fields.size()} > 0)
					#set ($where_part = "where ")
				#end
				#foreach ($field in ${where_fields})
					#if( ${field.whereQualifier.count} == 0)
						#set ($where_part = "${where_part} ${instance}.${field.name} ${field.whereQualifier.sign} ")
					#elseif (${field.whereQualifier.count} == 2)
						#set ($where_part = "${where_part} ${instance}.${field.name} ${field.whereQualifier.sign} ( ? AND ? )")
						#set ($count = ${count} + 1)
						#set ($betweenset = "${field.name}")
					#elseif (${field.whereQualifier.count} == 1 )
						#set ($where_part = "${where_part} ${instance}.${field.name} ${field.whereQualifier.sign} ? ")
					#end
					#if ($foreach.count < ${where_fields.size()})
						#set ($where_part = "${where_part} ${where_separator} ")
					#end
				#end
				#set ($group_part = "")
				#if (${group_by_fields})
					#set ($group_part = "GROUP BY")
					#set ($size = ${group_by_fields.size()})
					#set ($i = 1)
					#foreach ($field in ${group_by_fields})
						#set ($group_part = "${group_part} ${field.name}")
						#set ($size = ${size} - ${i})
						#if (${size} > 0)
							#set ($group_part = "${group_part},")
						#end
					#end
				#end
				#set ($order_part = "")
				#if (${order_by_fields})
					#set ($order_part = "ORDER BY")
					#set ($size = ${order_by_fields.size()})
					#set ($i = 1)
					#foreach ($field in ${order_by_fields})
						#set ($order_part = "${order_part} ${field.name}")
						#set ($size = ${size} - ${i})
						#if (${size} > 0)
							#set ($order_part = "${order_part},")
						#end
					#end
				#end
				final String sqlQuery = "select ${select_part} from ${table} ${instance} ${where_part} ${group_part} ${order_part}";
				PreparedStatement ps = con.prepareStatement(sqlQuery);
				#set ($whereCount = 1)
				//set the where fields
				#foreach ($field in ${where_fields})
					#if (${field.whereQualifier.count} > 0)
						<fc:import>${field.javaTypeName}</fc:import>
						#if (${field.whereQualifier.count}==2)
							ps.${MethodWhereFieldMap.get(${field.type.toLowerCase()})}(${whereCount}, ${field.value});
							#set ($whereCount = ${whereCount} + 1)
						#end
						ps.${MethodWhereFieldMap.get(${field.type.toLowerCase()})}(${whereCount}, ${field.value});
						#set ($whereCount = ${whereCount} + 1)
					#end
				#end
				#set ($data_type = "")
				#set ($jFieldName = "")
				##set ($setMethodNameFromPojoClass = "")
				ResultSet rs=ps.executeQuery();
				while(rs.next()){
				#foreach ($field in ${fields})
					<fc:import>${field.javaTypeName}</fc:import>
					#if (${nameMethodMap} && ${nameMethodMap.size()}>0)
						#set ($setMethodNameFromPojoClass = "${nameMethodMap.get(${field.name})}")
					#end
					#set ($jFieldName = "${field.javaName.substring(0,1).toLowerCase()}${field.javaName.substring(1)}")
					#set ($methodName = ${MethodFieldMap.get(${field.type.toLowerCase().trim()})})
					#set ($getMthName = ${GetMethodFieldMap.get(${field.type.toLowerCase().trim()})})
					${setMethodNameFromPojoClass}
					#if(${setMethodNameFromPojoClass} && !${setMethodNameFromPojoClass.equals("")})
						${pojo_class_instance}.${setMethodNameFromPojoClass}(rs.${getMthName}($foreach.count));
					#else
						#set ($data_type = ${methodName.substring(3)})
						#if (${data_type} == "Int")
							#set ($data_type = "Integer")
						#end
					 	$data_type ${jFieldName} = rs.${getMthName}($foreach.count);
					 #end
					##set ($setMethodNameFromPojoClass = "") 
				#end
				}
			]]>
		</template-body>
	</template>

	<template name="SELECT_WITH_NAMED_PARAMETER">
		<description>Used to create select statement with named parameter.</description>
		<allowed-file-names>*.java</allowed-file-names>
		<template-body>
			<![CDATA[
				//create select statement
				#set ($select_part = "")
				#if (!${fields} || ${fields.size()} == 0)
					#set ($select_part = "${instance}")
				#end
				#foreach ($field in ${fields})
					#set ($select_part = "${select_part} ${instance}.${field.name}")
					#if ($foreach.count < ${fields.size()})
						#set ($select_part = "${select_part}, ")
					#end
				#end
				#set ($join_part = "")
				#foreach ($field in ${join_fields})
					#set ($join_part = "${join_part} join ${instance}.${field.name}")
				#end
				#set ($where_part = "")
				#if (${where_fields} && ${where_fields.size()} > 0)
					#set ($where_part = "where ")
				#end
				#foreach ($field in ${where_fields})
					#set ($where_part = "${where_part} ${field.name} ${field.whereQualifier.sign} :${field.name}")
					#if ($foreach.count < ${where_fields.size()})
						#set ($where_part = "${where_part} ${where_separator} ")
					#end
				#end
				final String sqlQuery = "select ${select_part} from ${table} ${instance} ${where_part}";
				Map namedParameters = new HashMap();
				#foreach ($field in ${where_fields})
					<fc:import>${field.javaTypeName}</fc:import>
					#if (${field.whereQualifier.count} > 0)
						namedParameters.put("${field.name}", ${field.value});
					#end
				#end
				List result = namedParameterJdbcTemplate.queryForList(sqlQuery, namedParameters);
			]]>
		</template-body>
	</template>

	<template name="SELECT_WITH_NAMED_QUERY">
		<description>Used to create select statement with named query.</description>
		<allowed-file-names>*.java</allowed-file-names>
		<template-body>
			<![CDATA[
				//create select statement
				#set ($Qt = '"')
				#set ($select_part = "")
				#if (!${fields} || ${fields.size()} == 0)
					#set ($select_part = "${instance}")
				#end
				#foreach ($field in ${fields})
					#set ($select_part = "${select_part} ${instance}.${field.name}")
					#if ($foreach.count < ${fields.size()})
						#set ($select_part = "${select_part}, ")
					#end
				#end
				#set ($where_part = "")
				#if (${where_fields} && ${where_fields.size()} > 0)
					#set ($where_part = "where ")
				#end
				#foreach ($field in ${where_fields})
					#set ($where_part = "${where_part} ${field.name} ${field.whereQualifier.sign} :${field.name}")
					#if ($foreach.count < ${where_fields.size()})
						#set ($where_part = "${where_part} ${where_separator} ")
					#end
				#end
				EntityManager em = ...
				Query q = em.createNamedQuery(${Qt}${queryName}${Qt});
				#foreach ($field in ${where_fields})
					#if (${field.whereQualifier.count} > 0)
						q.setParameter("${field.name}", "${field.name}");
					#end
				#end
				List<> results = (List<>) q.getResultList();
				 #if (!${useExistingNamedQuery})
					<fc:xml parent="entity-mappings" node="sql-query" target="${target}">
						#set ($select_part = "")
						#if (!${fields} || ${fields.size()} == 0)
							#set($select_part = "${instance}")
						#end
						#foreach ($field in ${fields})
							#set( $select_part = "${select_part} ${instance}.${field.name}")
							#if ($foreach.count < ${fields.size()})
								#set($select_part = "${select_part}, ")
							#end
						#end
						#set ($where_part = "")
						#if (${where_fields} && ${where_fields.size()} > 0)
							#set ($where_part = "where")
						#end
						#foreach ($field in ${where_fields})
							#set ($where_part = "$where_part ${field.name} ${field.whereQualifier.sign} :${field.name}")
							#if ($foreach.count < ${where_fields.size()})
								#set ($where_part = "${where_part} ${where_separator} ")
							#end
						#end
   							<sql-query name="${queryName}">
      							<query>
      								&lt;![CDATA[
									select ${select_part} from ${table} ${instance} ${where_part}
									]]&gt;
      							</query>
   							</sql-query>
						</fc:xml>
					#end
			]]>
		</template-body>
	</template>

	<template name="SELECT_WITH_NAMED_QUERY_ANNOTATION">
		<description>Used to create select statement with named query and annotation.</description>
		<allowed-file-names>*.java</allowed-file-names>
		<template-body>
			<![CDATA[
				//create select statement
				#set ($Qt = '"')
				#set ($select_part = "")
				#if (!${fields} || ${fields.size()} == 0)
					#set($select_part = "${instance}")
				#end
				#foreach ($field in ${fields})
					#set ($select_part = "${select_part} ${instance}.${field.name}")
					#if ($foreach.count < ${fields.size()})
						#set ($select_part = "${select_part}, ")
					#end
				#end
				#set ($where_part = "")
				#if (${where_fields} && ${where_fields.size()} > 0)
					#set ($where_part = "where ")
				#end
				#foreach ($field in ${where_fields})
					#set ($where_part = "${where_part} ${field.name} ${field.whereQualifier.sign} :${field.name}")
					#if ($foreach.count < ${where_fields.size()})
						#set ($where_part = "${where_part} ${where_separator} ")
					#end
				#end
				EntityManager em = ...
				Query q = em.createNamedQuery(${Qt}${queryName}${Qt});
				#foreach ($field in ${where_fields})
					#if (${field.whereQualifier.count} > 0)
						q.setParameter("${field.name}", "${field.name}");
					#end
				#end
				List<> results = (List<>) q.getResultList();
				#if (!${useExistingNamedQuery})
				<fc:xml parent="entity-mappings" node="sql-query" target="${target}">
					#set ($select_part = "")
					#if (!${fields} || ${fields.size()} == 0)
						#set ($select_part = "${instance}")
					#end
					#foreach ($field in ${fields})
						#set ($select_part = "${select_part} ${instance}.${field.name}")
						#if ($foreach.count < ${fields.size()})
							#set ($select_part = "${select_part}, ")
						#end
					#end
					#set ($where_part = "")
					#if (${where_fields} && ${where_fields.size()} > 0)
						#set ($where_part = "where")
					#end
					#foreach ($field in ${where_fields})
						#set ($where_part = "$where_part ${field.name} ${field.whereQualifier.sign} :${field.name}")
						#if ($foreach.count < ${where_fields.size()})
							#set ($where_part = "${where_part} ${where_separator} ")
						#end
					#end
   						<sql-query name="${queryName}">
      						<query>
      						&lt;![CDATA[
							select ${select_part} from ${table} ${instance} ${where_part}
							]]&gt;
      					</query>
   					</sql-query>
				</fc:xml>
			#end
			]]>
		</template-body>
	</template>

	<template name="POJO_CLASS">
		<description>Used to create pojo class</description>
		<allowed-file-names>*.java</allowed-file-names>
		<template-body>
			<![CDATA[
				#set ($Qt = '"')
				#set ($class_annotation = "@Entity\n@Table(name = ${Qt}${table}${Qt}) ")
				#set ($field_annotation = "")
				#set ($pk_field_annotation = "")
				#set ($classToImport = "import javax.persistence.CascadeType;\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.FetchType;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport javax.persistence.JoinColumn;\nimport javax.persistence.OneToMany;\nimport javax.persistence.Table;")
				#set ($var_list = "")
				#set ($get_method_list = "")
				#set ($set_method_list = "")
				#set ($data_type = "")
				#set ($jFieldName = "")
				#foreach ($field in ${fields})
					#set ($methodName = ${MethodFieldMap.get(${field.type.toLowerCase().trim()})})
					#set ($data_type = ${methodName.substring(3)})
					#if (${data_type} == "Int")
						#set ($data_type = "Integer")
					#end
					#if (${data_type} == "BigDecimal")
						#set ($classToImport = "$classToImport \nimport java.math.BigDecimal;")
					#end
					#if (${data_type} == "Timestamp")
						#set ($classToImport = "$classToImport \nimport java.sql.Timestamp;")
					#end
					#if (${data_type} == "Date")
						#set ($classToImport = "$classToImport \nimport java.sql.Date;")
					#end
					#if (${data_type} == "Time")
						#set ($classToImport = "$classToImport \nimport java.sql.Time;")
					#end
					#set ($field_annotation = "@Column(name = ${Qt}${field.name}${Qt},nullable=${field.nullable},length = ${field.size})\n")
					#set ($jFieldName = "${field.javaName.substring(0,1).toLowerCase()}${field.javaName.substring(1)}")
					#set ($var_list = "${var_list} private ${data_type} ${jFieldName};")
					#if (${field.id})
						#set ($pk_field_annotation = " @Id \n@Column(name = ${Qt}${field.id.name}${Qt},nullable= ${field.id.nullable})\n @GeneratedValue(strategy = GenerationType.AUTO)\n")
						#set ($get_method_list= "${get_method_list} ${pk_field_annotation} public ${data_type} get${field.javaName}(){\n\t return ${jFieldName};\n\t}")
					#else
						#set ($get_method_list= "${get_method_list} ${field_annotation} public ${data_type} get${field.javaName}(){\n\t return ${jFieldName};\n\t}")
					#end
					#set ($set_method_list = "${set_method_list} \tpublic void set${field.javaName}(${data_type} ${jFieldName}){\n\tthis.${jFieldName}=${jFieldName};\n\t}")
					#if ($foreach.count < ${fields.size()})
							#set ($var_list = "${var_list}\n ")
							#set ($get_method_list = "${get_method_list}\n ")
							#set ($set_method_list = "${set_method_list}\n ")
					#end
				#end
				${classToImport}
				${class_annotation}
				public class ${table.substring(0,1).toUpperCase()}${table.substring(1).toLowerCase()}POJO ${baseClass} ${implementInterface} {

				\t${var_list}\n
				\t${get_method_list}\n
				\t${set_method_list}\n
				}
			]]>
		</template-body>
	</template>

	<template name="POJO_CLASS_WITHOUT_ANNOTATION">
		<description>Used to create pojo class without annotation</description>
		<allowed-file-names>*.java</allowed-file-names>
		<template-body>
			<![CDATA[
				##set ($Qt = '"')
				##set ($class_annotation = "@Entity(name = ${Qt}${table}${Qt}) ")
				##set ($field_annotation = "")
				##set ($pk_field_annotation = "")
				#set ($classToImport = "")
				#set ($var_list = "")
				#set ($get_method_list = "")
				#set ($set_method_list = "")
				#set ($data_type = "")
				#set ($jFieldName = "")
				#foreach ($field in ${fields})
					#set ($methodName = ${MethodFieldMap.get(${field.type.toLowerCase().trim()})})
					#set ($data_type = ${methodName.substring(3)})
					#if (${data_type} == "Int")
						#set ($data_type = "Integer")
					#end
					#if (${data_type} == "BigDecimal")
						#set ($classToImport = "$classToImport \nimport java.math.BigDecimal;")
					#end
					#if (${data_type} == "Timestamp")
						#set ($classToImport = "$classToImport \nimport java.sql.Timestamp;")
					#end
					#if (${data_type} == "Date")
						#set ($classToImport = "$classToImport \nimport java.sql.Date;")
					#end
					#if (${data_type} == "Time")
						#set ($classToImport = "$classToImport \nimport java.sql.Time;")
					#end
					##set ($field_annotation = "@Column(name = ${Qt}${field.name}${Qt},nullable=${field.nullable},length = ${field.size})\n")
					#set ($jFieldName = "${field.javaName.substring(0,1).toLowerCase()}${field.javaName.substring(1)}")
					#if (${field.id})
						##set($pk_field_annotation = " @Id \n@Column(name = ${Qt}${field.id.name}${Qt},nullable= ${field.id.nullable})\n @GeneratedValue(strategy = GenerationType.AUTO)\n")
						#set ($var_list = "${var_list} private ${data_type} ${jFieldName};")
					#else
						#set ($var_list = "${var_list} private ${data_type} ${jFieldName};")
					#end
					#set ($get_method_list = "${get_method_list} \tpublic ${data_type} get${field.javaName}(){\n\t return ${jFieldName};\n\t}")
					#set ($set_method_list = "${set_method_list} \tpublic void set${field.javaName}(${data_type} ${jFieldName}){\n\tthis.${jFieldName}=${jFieldName};\n\t}")
					#if ($foreach.count < ${fields.size()})
						#set ($var_list = "${var_list}\n ")
						#set ($get_method_list= "${get_method_list}\n ")
						#set ($set_method_list = "${set_method_list}\n ")
					#end
				#end
				${classToImport}
				##${class_annotation}
				public class ${table.substring(0,1).toUpperCase()}${table.substring(1).toLowerCase()}POJO ${baseClass} ${implementInterface} {

				\t${var_list}\n
				\t${get_method_list}\n
				\t${set_method_list}\n
				}
			]]>
		</template-body>
	</template>

	<template name="ADD_FIELDS_TO_POJO_CLASS">
		<description>Used to create pojo method</description>
		<allowed-file-names>*.java</allowed-file-names>
		<template-body>
			<![CDATA[
				#set ($Qt = '"')
				#set ($field_annotation = "")
				#set ($pk_field_annotation = "")
				##set ($classToImport = "javax.persistence.Column")
				##set ($var_list = "")
				##set ($get_method_list = "")
				##set ($set_method_list = "")
				#set ($data_type = "")
				#set ($jFieldName = "")
				<fc:import>javax.persistence.Column</fc:import>
				#foreach ($field in ${fields})
					<fc:import>${field.javaTypeName}</fc:import>
					#set ($methodName = ${MethodFieldMap.get(${field.type.toLowerCase().trim()})})
					#set ($data_type = ${methodName.substring(3)})
					#if (${data_type} == "Int")
						#set ($data_type = "Integer")
					#end
					#set ($field_annotation = "@Column(name = ${Qt}${field.name}${Qt},nullable=${field.nullable},length = ${field.size})\n")
					#set ($jFieldName = "${field.javaName.substring(0,1).toLowerCase()}${field.javaName.substring(1)}")
					
					<fc:field name="${jFieldName}">
						private ${data_type} ${jFieldName};
					</fc:field>
					
					#if (${field.id})
						#set ($pk_field_annotation = " @Id \n@Column(name = ${Qt}${field.id.name}${Qt},nullable= ${field.id.nullable})\n @GeneratedValue(strategy = GenerationType.AUTO)\n")
						
						<fc:method name="get${field.javaName}">
						${pk_field_annotation} public ${data_type} get${field.javaName}(){\n\t return ${jFieldName};\n}
						</fc:method>	
						
					#else
						<fc:method name="get${field.javaName}">
					 		${field_annotation} public ${data_type} get${field.javaName}(){\n\t return ${jFieldName};\n}
						</fc:method>
					#end
					<fc:method name="set${field.javaName}">
						public void set${field.javaName}(${data_type} ${jFieldName} ){\n\t this.${jFieldName}=${jFieldName};\n}
					</fc:method>
				#end
						##set ($var_list = "${var_list} <pojo_field_list> private ${data_type} ${jFieldName};</pojo_field_list>")
						##set ($get_method_list = "${get_method_list}\t<pojo_get_method_list> ${pk_field_annotation} public ${data_type} get${field.javaName}(){\n\t return ${jFieldName};\n}</pojo_get_method_list>")
					##else
						##set ($get_method_list = "${get_method_list}\t<pojo_get_method_list> ${field_annotation} public ${data_type} get${field.javaName}(){\n\t return ${jFieldName};\n}</pojo_get_method_list>")
					##end
					##set ($set_method_list = "${set_method_list} \t<pojo_set_method_list>public void set${field.javaName}(${data_type} ${jFieldName} ){\n\t this.${jFieldName}=${jFieldName};\n}</pojo_set_method_list>")
						##if ($foreach.count < ${fields.size()})
							##set ($var_list = "${var_list}\n ")
							##set ($get_method_list = "${get_method_list}\n ")
							##set ($set_method_list = "${set_method_list}\n ")
						##end
				
				##<create_pojo_method>
				##<pojo_import_list>${classToImport}</pojo_import_list>
				##${var_list}
				##${get_method_list}
				##${set_method_list}</create_pojo_method>
			]]>
		</template-body>
	</template>

	<template name="ADD_FIELDS_TO_POJO_CLASS_WITHOUT_ANNOTATION">
		<description>Used to create pojo method</description>
		<allowed-file-names>*.java</allowed-file-names>
		<template-body>
			<![CDATA[
				##set ($Qt = '"')
				##set ($classToImport = "")
				##set ($var_list = "")
				##set ($get_method_list = "")
				##set ($set_method_list = "")
				#set ($data_type = "")
				#set ($jFieldName = "")
				
				#foreach ($field in ${fields})
					<fc:import>${field.javaTypeName}</fc:import>
					#set ($methodName = ${MethodFieldMap.get(${field.type.toLowerCase().trim()})})
					#set ($data_type = ${methodName.substring(3)})
					#if (${data_type} == "Int")
						#set ($data_type = "Integer")
					#end
					#set ($jFieldName = "${field.javaName.substring(0,1).toLowerCase()}${field.javaName.substring(1)}")
					<fc:field name="${jFieldName}">
						private ${data_type} ${jFieldName};
					</fc:field>
					<fc:method name="get${field.javaName}">
					 	public ${data_type} get${field.javaName}(){\n\t return ${jFieldName};\n}
					</fc:method>
					<fc:method name="set${field.javaName}">
						public void set${field.javaName}(${data_type} ${jFieldName} ){\n\t this.${jFieldName}=${jFieldName};\n}
					</fc:method>
					#end
					##set ($var_list = "${var_list} <pojo_field_list> private ${data_type} ${jFieldName};</pojo_field_list>")
					##set ($get_method_list = "${get_method_list}\t<pojo_get_method_list>public ${data_type} get${field.javaName}(){\n\t return ${jFieldName};\n}</pojo_get_method_list>")
					##set ($set_method_list = "${set_method_list} \t<pojo_set_method_list>public void set${field.javaName}(${data_type} ${jFieldName} ){\n\t this.${jFieldName}=${jFieldName};\n}</pojo_set_method_list>")
					##if ($foreach.count < ${fields.size()})
						##set($var_list = "${var_list}\n ")
						##set($get_method_list = "${get_method_list}\n ")
						##set($set_method_list = "${set_method_list}\n ")
					##end
				
				##<create_pojo_method>
				##<pojo_import_list>${classToImport}</pojo_import_list>
				##${var_list}
				##${get_method_list}
				##${set_method_list}</create_pojo_method>
			]]>
		</template-body>
	</template>

	<template name="SIMPLE_SNIPPET">
		<description>Used to create table snippet</description>
		<variation>table column</variation>
		<allowed-file-names>*.java</allowed-file-names>
		<template-body>
			<![CDATA[
			#if (${_template_variation} == "table")
				${table}
			#end
			#if (${_template_variation} == "column")
				#foreach ($field in ${fields})
					${instance}.${field.name}
				#end
			#end
			]]>
		</template-body>
	</template>

	<template name="SELECT_WITH_JOIN">
		<description>Used to create select statement with Join.</description>
		<allowed-file-names>*.java</allowed-file-names>
		<template-body>
			<![CDATA[
				//create select statement
				#set ($select_part = "")
				#if (!${fields} || ${fields.size()} == 0)
					#set($select_part = "${instance}")
				#end
				#foreach ($field in ${fields})
					#set($instance = "")
					#if (${field.tableName} == ${First_Table})
						#set ($instance = "${First_Table_Instance}")
					#elseif (${field.tableName} == ${Second_Table})
						#set ($instance = "${Second_Table_Instance}")
					#elseif (${field.tableName} == ${Third_Table})
						#set ($instance = "${Third_Table_Instance}")
					#end
					#if (${field.getSQLFunction()} == "select")
							#set ($select_part = "${select_part} ${instance}.${field.name}")
						#elseif (${field.getSQLFunction()} == "now")
							#set ($select_part = "${select_part} ${field.getSQLFunction().toUpperCase()} ()")
						#elseif (${field.getSQLFunction()} == "round")
							#set ($select_part = "${select_part} ${field.getSQLFunction().toUpperCase()} (${instance}.${field.name},  )")
						#elseif (${field.getSQLFunction()} == "mid")
							#set ($select_part = "${select_part} ${field.getSQLFunction().toUpperCase()} (${instance}.${field.name},  ,   )")
						#else
							#set ($select_part = "${select_part} ${field.getSQLFunction().toUpperCase()} (${instance}.${field.name})")
						#end
					#if ($foreach.count < ${fields.size()})
						#set($select_part = "${select_part}, ")
					#end
				#end
				#set ($join_part = "")
				#set ($join_part1 = "")
				#set ($join_part2 = "")
				#if (${Number_Of_Join_Tables.getValue()} == 2)
					#set ($join_part = "${join_part} ${First_Table_Instance}.${First_Table_Join_Column} = ${Second_Table_Instance}.${Second_Table_Join_Column} ")
				#elseif (${Number_Of_Join_Tables.getValue()} == 3)
					#set ($join_part1 = "${join_part1} ${First_Table_Instance}.${First_Table_Join_Column} = ${Third_Table_Instance}.${Third_Table_Join_Column} ")
					#set ($join_part2 = "${join_part2} ${Second_Table_Instance}.${Second_Table_Join_Column} = ${Third_Table_Instance}.${Copy_Of_Third_Table_Join_Column} ")
				#end
				#set ($where_part = "")
				#if (${where_fields} && ${where_fields.size()} > 0)
					#set ($where_part = "where ")
				#end
				#foreach ($field in ${where_fields})
					#if (${field.tableName} == ${First_Table})
						#if (${field.whereQualifier.count} == 2)
							#set ($where_part = "${where_part} ${First_Table_Instance}.${field.name} ${field.whereQualifier.sign} (? AND ?) ")
						#elseif (${field.whereQualifier.count} == 0)
							#set ($where_part = "${where_part} ${First_Table_Instance}.${field.name} ${field.whereQualifier.sign} ")
						#elseif (${field.whereQualifier.count} == 1)
							#set ($where_part = "${where_part} ${First_Table_Instance}.${field.name} ${field.whereQualifier.sign} ?")
						#end
					#elseif (${field.tableName} == ${Second_Table})
						#if (${field.whereQualifier.count} == 2)
							#set ($where_part = "${where_part} ${Second_Table_Instance}.${field.name} ${field.whereQualifier.sign} (? AND ?) ")
						#elseif (${field.whereQualifier.count} == 0)
							#set ($where_part = "${where_part} ${Second_Table_Instance}.${field.name} ${field.whereQualifier.sign} ")
						#elseif (${field.whereQualifier.count} == 1)
							#set ($where_part = "${where_part} ${Second_Table_Instance}.${field.name} ${field.whereQualifier.sign} ?")
						#end
					#elseif (${field.tableName} == ${Third_Table})
						#if (${field.whereQualifier.count} == 2)
							#set ($where_part = "${where_part} ${Third_Table_Instance}.${field.name} ${field.whereQualifier.sign} (? AND ?) ")
						#elseif( ${field.whereQualifier.count} == 0)
							#set ($where_part = "${where_part} ${Third_Table_Instance}.${field.name} ${field.whereQualifier.sign} ")
						#elseif (${field.whereQualifier.count} == 1)
							#set ($where_part = "${where_part} ${Third_Table_Instance}.${field.name} ${field.whereQualifier.sign} ?")
						#end
					#end
					#if ($foreach.count < ${where_fields.size()})
						#set ($where_part = "${where_part} ${where_separator} ")
					#end
				#end
				#set ($group_part = "")
				#if (${group_by_fields})
					#set ($group_part = "GROUP BY")
					#set ($size = ${group_by_fields.size()})
					#set ($i = 1)
					#foreach ($field in ${group_by_fields})
						#if (${field.tableName} == ${First_Table})
							#set ($group_part = "${group_part} ${First_Table_Instance}.${field.name}")
						#elseif (${field.tableName} == ${Second_Table})
							#set ($group_part = "${group_part} ${Second_Table_Instance}.${field.name}")
						#else
							#set ($group_part = "${group_part} ${Third_Table_Instance}.${field.name}")
						#end
					#set ($size = ${size} - ${i})
					#if (${size} > 0)
						#set ($group_part = "${group_part},")
					#end
				#end
				#end
				#set ($order_part = "")
				#if (${order_by_fields})
					#set ($order_part = "ORDER BY")
					#set ($size = ${order_by_fields.size()})
					#set ($i = 1)
					#foreach ($field in ${order_by_fields})
						#if (${field.tableName} == ${First_Table})
							#set ($order_part = "${order_part} ${First_Table_Instance}.${field.name}")
						#elseif (${field.tableName} == ${Second_Table})
							#set ($order_part = "${order_part} ${Second_Table_Instance}.${field.name}")
						#else
							#set ($order_part = "${order_part} ${Third_Table_Instance}.${field.name}")
						#end
						#set ($size = ${size} - ${i})
						#if (${size} > 0)
							#set ( $order_part = "${order_part},")
						#end
					#end
				#end
				#if (${Number_Of_Join_Tables.getValue()} == 2)
					final String sqlQuery = "select ${select_part} from ${First_Table} ${First_Table_Instance} ${JoinTypes} ${Second_Table} ${Second_Table_Instance} ON ${join_part} ${where_part} ${group_part} ${order_part}";
				#elseif(${Number_Of_Join_Tables.getValue} == 3)
					final String sqlQuery ="select ${select_part} from ${First_Table} ${First_Table_Instance},${Second_Table} ${Second_Table_Instance},${Third_Table} ${Third_Table_Instance} ${JoinTypes}  ${First_Table} ${First_Table_Instance} ON ${join_part1}  ${JoinTypes} ${Second_Table} ${Second_Table_Instance} ON ${join_part2} ${where_part} ${group_part} ${order_part}";
				#end
				PreparedStatement ps = con.prepareStatement(sqlQuery);
				#set ($whereCount = 1)
				//set the where fields
				#foreach ($field in ${where_fields})
					#if (${field.whereQualifier.count} > 0)
						<fc:import>${field.javaTypeName}</fc:import>
						#if (${field.whereQualifier.count}==2)
							ps.${MethodWhereFieldMap.get(${field.type.toLowerCase()})}(${whereCount}, ${field.value});
							#set ($whereCount = ${whereCount} + 1)
						#end
						ps. ${MethodWhereFieldMap.get(${field.type.toLowerCase().trim()})}(${whereCount}, ${field.value});
						#set ($whereCount = ${whereCount} + 1)
					#end
				#end
				#set ($data_type = "")
				#set ($jFieldName = "")
				ResultSet rs = ps.executeQuery();
				while(rs.next()){
				#foreach ($field in ${fields})
					<fc:import>${field.javaTypeName}</fc:import>
					#set ($jFieldName = "${field.javaName.substring(0,1).toLowerCase()}${field.javaName.substring(1)}")
					#set ($methodName = ${MethodFieldMap.get(${field.type.toLowerCase().trim()})})
					#set ($getMthName = ${GetMethodFieldMap.get(${field.type.toLowerCase().trim()})})
					#set ($data_type = ${methodName.substring(3)})
					#if (${data_type} == "Int")
						#set ($data_type = "Integer")
					#end
					$data_type ${jFieldName} = rs.${getMthName}($foreach.count);
				#end
				}
			]]>
		</template-body>
	</template>

	<template name="ROWMAPPER_AS_CLASS">
		<description>Used to create a Row Mapper class.</description>
		<allowed-file-names>*</allowed-file-names>
		<additional-parameters>TargetPackage:package</additional-parameters>
		<template-body>
			<![CDATA[
			<fc:class name="${class.name}Mapper" package="${TargetPackage.getName()}" project="${TargetPackage.javaProject}">
				import java.sql.ResultSet;
				import java.sql.SQLException;
				import org.springframework.jdbc.core.RowMapper;
				import ${class.fullyQualifiedName};

				public class ${class.name}Mapper implements RowMapper<${class.name}> {

					@Override
					public ${class.name} mapRow(ResultSet rs, int rowNum) throws SQLException {
						${class.name} ${class.defaultInstance} = new ${class.name}();
						#foreach ($field in ${fields})
							#if (${nameMethodMap} && ${nameMethodMap.size()}>0)
								#set ($setMethodNameFromPojoClass = ${nameMethodMap.get(${field.name})})
							#end
							##set ($jFieldName = "${field.javaName.substring(0,1).toLowerCase()}${field.javaName.substring(1)}")
							##set ($methodName = ${MethodFieldMap.get(${field.type.toLowerCase().trim()})})
							#set ($getMthName = ${GetMethodFieldMap.get(${field.type.toLowerCase().trim()})})
							${class.defaultInstance}.${setMethodNameFromPojoClass}(rs.${getMthName}("${field.name}"));
						#end
						return ${class.defaultInstance};
					}
				}
			</fc:class>
			]]>
		</template-body>
	</template>

	<template name="SELECT_WITH_ROWMAPPER_AS_METHOD">
		<description>Used to create RowMapper as a method, using select statement.</description>
		<allowed-file-names>*.java</allowed-file-names>
		<additional-parameters>methodName</additional-parameters>
		<template-body>
			<![CDATA[
			<fc:import>java.sql.ResultSet</fc:import>
			<fc:import>java.sql.SQLException</fc:import>
			<fc:import>org.springframework.jdbc.core.RowMapper</fc:import>
			<fc:import>org.springframework.jdbc.core.JdbcTemplate</fc:import>
			<fc:import>java.util.List</fc:import>
			<fc:import>${class.fullyQualifiedName}</fc:import>
			<fc:method name="${methodName}">
			/**
					 * This will create an instance of ${class.name}
					 *
					 #foreach ($field in ${where_fields})
					 * @parm ${field.name}
					 #end
					 * @return
					 *
					 */
			@Override
			public List<${class.name}> ${methodName} (#foreach ($field in ${where_fields}) #if (${field.whereQualifier.count} > 0) #set ($type = "${field.javaTypeName.substring($field.javaTypeName.lastIndexOf('.'))}") final ${type.replace('.','')} ${field.name} #if ($foreach.count < ${where_fields.size()}),#end #end #end) throws SQLException {
				//create select statement\n
					#set ($select_part = "")
					#if (!${fields} || ${fields.size()} == 0)
						#set ($select_part = "${instance}")
					#end
					#foreach ($field in ${fields})
						#set ($select_part = "${select_part} ${instance}.${field.name}")
						#if ($foreach.count < ${fields.size()})
							#set ($select_part = "${select_part}, ")
						#end
					#end
					#set ($where_part = "")
					#if (${where_fields} && ${where_fields.size()} > 0)
						#set ($where_part = "where ")
					#end
					#foreach ($field in ${where_fields})
						#if (${field.whereQualifier.count} == 0)
							#set ($where_part = "${where_part} ${instance}.${field.name} ${field.whereQualifier.sign} ")
						#elseif (${field.whereQualifier.count} == 2)
							#set ($where_part = "${where_part} ${instance}.${field.name} ${field.whereQualifier.sign} ( ? AND ? )")
							#set ($count = ${count} + 1)
							#set ($betweenset = "${field.name}")
						#elseif (${field.whereQualifier.count} == 1 )
							#set ($where_part = "${where_part} ${instance}.${field.name} ${field.whereQualifier.sign} ? ")
						#end
						#if ($foreach.count < ${where_fields.size()})
							#set ($where_part = "${where_part} ${where_separator} ")
						#end
					#end
					final String sqlQuery = "select ${select_part} from ${table} ${instance} ${where_part}";
					JdbcTemplate jdbcTemplate = new JdbcTemplate();
					Object[] params = new Object[]{#foreach ($field in ${where_fields}) #if (${field.whereQualifier.count} > 0) ${field.name} #if ($foreach.count < ${where_fields.size()}),#end #end #end};
					List<${class.name}> ${class.defaultInstance}List = jdbcTemplate.query(sqlQuery,new RowMapper<${class.name}>() {
						public ${class.name} mapRow(ResultSet rs, int rowNum) throws SQLException {
							${class.name} ${class.defaultInstance} = new ${class.name}();
							#foreach ($field in ${fields})
								#if(${nameMethodMap} && ${nameMethodMap.size()} > 0)
									#set ($setMethodNameFromPojoClass = ${nameMethodMap.get(${field.name})})
								#end
								##set ($jFieldName = "${field.javaName.substring(0,1).toLowerCase()}${field.javaName.substring(1)}")
								##set ($methodName = ${MethodFieldMap.get(${field.type.toLowerCase().trim()})})
								#set ($getMthName = ${GetMethodFieldMap.get(${field.type.toLowerCase().trim()})})
								#if (${setMethodNameFromPojoClass})
									${class.defaultInstance}.${setMethodNameFromPojoClass}(rs.${getMthName}("${field.name}"));
									#set ($setMethodNameFromPojoClass = "")
								#end
							#end
							return ${class.defaultInstance};

									}
					},params);
					return ${class.defaultInstance}List;
					}

					</fc:method>
			]]>
		</template-body>
	</template>

	<template name="POJO_INSTANCE_FROM_DB_FIELD">
		<description>Create Pojo class instance fromt he fields of a table</description>
		<allowed-file-names>*.java</allowed-file-names>
		<template-body>
			<![CDATA[
					${class.name} ${class.defaultInstance} = new ${class.name}();
					#foreach ($field in ${fields})
						#if (${nameMethodMap} && ${nameMethodMap.size()} > 0 )
							#set ($setMethodNameFromPojoClass = ${nameMethodMap.get(${field.name})})
						#end
						##set ($jFieldName = "${field.javaName.substring(0,1).toLowerCase()}${field.javaName.substring(1)}")
						##set ($methodName = ${MethodFieldMap.get(${field.type.toLowerCase().trim()})})
						#set ($getMthName = ${GetMethodFieldMap.get(${field.type.toLowerCase().trim()})})
						#if (${setMethodNameFromPojoClass})
							${class.defaultInstance}.${setMethodNameFromPojoClass}(rs.${getMthName}("${field.name}"));
							#set ($setMethodNameFromPojoClass = "")
						#end
					#end
					]]>
		</template-body>
	</template>

	<template name="SELECT_WITH_JOIN_ROWMAPPER_AS_METHOD">
		<description>Used to create RowMapper as a method, using select statement with join.</description>
		<allowed-file-names>*.java</allowed-file-names>
		<additional-parameters>methodName</additional-parameters>
		<template-body>
			<![CDATA[
			<fc:import>java.sql.ResultSet</fc:import>
			<fc:import>java.sql.SQLException</fc:import>
			<fc:import>org.springframework.jdbc.core.RowMapper</fc:import>
			<fc:import>org.springframework.jdbc.core.JdbcTemplate</fc:import>
			<fc:import>java.util.List</fc:import>
			<fc:import>${class.fullyQualifiedName}</fc:import>
			<fc:method name="${methodName}">

			/**
					 * This will create an instance of ${class.name}
					 *
					 #foreach ($field in ${where_fields})
					 * @parm ${field.name}
					 #end
					 * @return
					 *
					 */
			@Override
			public List<${class.name}> ${methodName} (#foreach ($field in ${where_fields}) #if (${field.whereQualifier.count} > 0) #set ($type = "${field.javaTypeName.substring($field.javaTypeName.lastIndexOf('.'))}") final ${type.replace('.','')} ${field.name} #if ($foreach.count < ${where_fields.size()}),#end #end #end) throws SQLException {
					#set($select_part = "")
					#if (!${fields} || ${fields.size()} == 0)
						#set ($select_part = "${instance}")
					#end
					#foreach ($field in ${fields})
						#if (${field.tableName} == ${First_Table})
							#set ($instance = "${First_Table_Instance}")
						#elseif (${field.tableName} == ${Second_Table})
							#set ($instance = "${Second_Table_Instance}")
						#elseif (${field.tableName} == ${Third_Table})
							#set ($instance = "${Third_Table_Instance}")
						#end
						#if (${field.getSQLFunction()} == "select")
							#set ($select_part = "${select_part} ${instance}.${field.name}")
						#elseif (${field.getSQLFunction()} == "now")
							#set( $select_part = "${select_part} ${field.getSQLFunction().toUpperCase()} ()")
						#elseif (${field.getSQLFunction()} == "round")
							#set ($select_part = "${select_part} ${field.getSQLFunction().toUpperCase()} (${instance}.${field.name},  )")
						#elseif (${field.getSQLFunction()} == "mid")
							#set ($select_part = "${select_part} ${field.getSQLFunction().toUpperCase()} (${instance}.${field.name},  ,   )")
						#else
							#set ($select_part = "${select_part} ${field.getSQLFunction().toUpperCase()} (${instance}.${field.name})")
						#end
						#if ($foreach.count < ${fields.size()})
							#set ($select_part = "${select_part}, ")
						#end
					#end
					#set ($join_part = "")
					#set ($join_part1 = "")
					#set ($join_part2 = "")

					#if (${Number_Of_Join_Tables.getValue()} == 2)
						#set ($join_part = "${join_part} ${First_Table_Instance}.${First_Table_Join_Column} = ${Second_Table_Instance}.${Second_Table_Join_Column} ")
					#elseif (${Number_Of_Join_Tables.getValue()} == 3)
						#set ($join_part1 = "${join_part1} ${First_Table_Instance}.${First_Table_Join_Column} = ${Third_Table_Instance}.${Third_Table_Join_Column} ")
						#set ($join_part2 = "${join_part2} ${Second_Table_Instance}.${Second_Table_Join_Column} = ${Third_Table_Instance}.${Copy_Of_Third_Table_Join_Column} ")
					#end
					#set ($where_part = "")
					#if (${where_fields} && ${where_fields.size()} > 0)
						#set ($where_part = "where ")
					#end
					#foreach ($field in ${where_fields})
						#if (${field.tableName} == ${First_Table})
							#if (${field.whereQualifier.count} == 2)
								#set ($where_part = "${where_part} ${instance}.${field.name} ${field.whereQualifier.sign} (? AND ?) ")
							#elseif (${field.whereQualifier.count} == 0)
								#set ($where_part = "${where_part} ${instance}.${field.name} ${field.whereQualifier.sign} ")
							#elseif (${field.whereQualifier.count} == 1)
								#set ($where_part = "${where_part} ${instance}.${field.name} ${field.whereQualifier.sign} ?")
							#end
						#elseif (${field.tableName} == ${Second_Table})
							#if (${field.whereQualifier.count} == 2)
								#set ($where_part = "${where_part} ${instance}.${field.name} ${field.whereQualifier.sign} (? AND ?) ")
							#elseif (${field.whereQualifier.count} == 0)
								#set ($where_part = "${where_part} ${instance}.${field.name} ${field.whereQualifier.sign} ")
							#elseif (${field.whereQualifier.count} == 1)
								#set ($where_part = "${where_part} ${instance}.${field.name} ${field.whereQualifier.sign} ?")
							#end
						#elseif (${field.tableName} == ${Third_Table})
							#if (${field.whereQualifier.count} == 2)
								#set ($where_part = "${where_part} ${instance}.${field.name} ${field.whereQualifier.sign} (? AND ?) ")
							#elseif (${field.whereQualifier.count} == 0)
								#set ($where_part = "${where_part} ${instance}.${field.name} ${field.whereQualifier.sign} ")
							#elseif (${field.whereQualifier.count} == 1)
								#set ($where_part = "${where_part} ${instance}.${field.name} ${field.whereQualifier.sign} ?")
							#end
						#end
						#if ($foreach.count < ${where_fields.size()})
							#set ($where_part = "${where_part} ${where_separator} ")
						#end
					#end
					#set ($group_part = "")
					#if (${group_by_fields})
						#set ($group_part = "GROUP BY")
						#set ($size = ${group_by_fields.size()})
						#set ($i = 1)
						#foreach ($field in ${group_by_fields})
							#if (${field.tableName} == ${First_Table})
								#set ($group_part = "${group_part} ${First_Table_Instance}.${field.name}")
							#elseif (${field.tableName} == ${Second_Table})
								#set ($group_part = "${group_part} ${Second_Table_Instance}.${field.name}")
							#else
								#set ($group_part = "${group_part} ${Third_Table_Instance}.${field.name}")
							#end
							#set ($size = ${size} - ${i})
							#if (${size} > 0)
								#set ($group_part = "${group_part},")
							#end
						#end
					#end
					#set ($order_part = "")
					#if (${order_by_fields})
						#set ($order_part = "ORDER BY")
						#set ($size = ${order_by_fields.size()})
						#set ($i = 1)
						#foreach ($field in ${order_by_fields})
							#if (${field.tableName} == ${First_Table})
								#set ($order_part = "${order_part} ${First_Table_Instance}.${field.name}")
							#elseif (${field.tableName} == ${Second_Table})
								#set ($order_part = "${order_part} ${Second_Table_Instance}.${field.name}")
							#else
								#set ($order_part = "${order_part} ${Third_Table_Instance}.${field.name}")
							#end
							#set ($size = ${size} - ${i})
							#if (${size} > 0)
								#set ($order_part = "${order_part}, ")
							#end
						#end
					#end
					#if (${Number_Of_Join_Tables.getValue()} == 2)
						final String sqlQuery = "select ${select_part} from ${First_Table} ${First_Table_Instance} ${JoinTypes} ${Second_Table} ${Second_Table_Instance} ON ${join_part} ${where_part} ${group_part} ${order_part}";
					#elseif (${Number_Of_Join_Tables.getValue()} == 3)
						final String sqlQuery = "select ${select_part} from ${First_Table} ${First_Table_Instance},${Second_Table} ${Second_Table_Instance},${Third_Table} ${Third_Table_Instance} ${JoinTypes}  ${First_Table} ${First_Table_Instance} ON ${join_part1}  ${JoinTypes} ${Second_Table} ${Second_Table_Instance} ON ${join_part2} ${where_part} ${group_part} ${order_part}";
					#end
					#set ($data_type = "")
					#set ($jFieldName = "")
					JdbcTemplate jdbcTemplate = new JdbcTemplate();
					Object[] params = new Object[]{#foreach ($field in ${where_fields})#if (${field.whereQualifier.count} > 0)${field.name} #if ($foreach.count < ${where_fields.size()}),#end #end #end};
					List<${class.name}> ${class.defaultInstance}List = jdbcTemplate.query(sqlQuery,new RowMapper<${class.name}>() {
							public ${class.name} mapRow(ResultSet rs, int rowNum) throws SQLException {
								${class.name} ${class.defaultInstance} = new ${class.name}();
								#foreach ($field in ${fields})
									#if (${nameMethodMap} && ${nameMethodMap.size()}>0)
										#set ($setMethodNameFromPojoClass = ${nameMethodMap.get(${field.name})})
									#end
									#set ($jFieldName = "${field.javaName.substring(0,1).toLowerCase()}${field.javaName.substring(1)}")
									#set ($methodName = ${MethodFieldMap.get(${field.type.toLowerCase().trim()})})
									#set ($getMthName = ${GetMethodFieldMap.get(${field.type.toLowerCase().trim()})})
									#if (${setMethodNameFromPojoClass})
										${class.defaultInstance}.${setMethodNameFromPojoClass}(rs.${getMthName}("${field.name}"));
										#set ($setMethodNameFromPojoClass = "")
									#end
								#end
							return ${class.defaultInstance};
						}
					},params);
					return ${class.defaultInstance}List;
				}
				</fc:method>
			]]>
		</template-body>
	</template>
</templates>
