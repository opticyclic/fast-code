
<!DOCTYPE html>
<html lang="en">
	<head>
		<title>FastCode-Documentation</title>
		<meta charset="utf-8">
		<link rel="stylesheet" href="css/reset.css" type="text/css" media="screen">
		<link rel="stylesheet" href="css/style.css" type="text/css" media="screen">
		<link rel="stylesheet" href="css/grid.css" type="text/css" media="screen">
		<script type="text/javascript" src="js/shCore.js"></script>
		<script type="text/javascript" src="js/shAutoloader.js"></script>
		<script type="text/javascript" src="js/shBrushJava.js"></script>
		<script type="text/javascript" src="js/shBrushXml.js"></script>
		<script type="text/javascript" src="js/shBrushJScript.js"></script>
 <!--	 <script type="text/javascript" src="js/shCore.js"></script>
	 <script type="text/javascript" src="css/shBrushJScript.js"></script>-->
	 <link href="css/shCore.css" rel="stylesheet" type="text/css" />
	 <link href="css/shThemeDefault.css" rel="stylesheet" type="text/css" />

	 <!-- Finally, to actually run the highlighter, you need to include this JS on your page -->		     <script type="text/javascript">
	 SyntaxHighlighter.config.clipboardSwf = 'http://www.marchwicki.pl/blog/wp-content/plugins/syntax-highlighter-and-code-prettifier/scripts/clipboard.swf';
	 SyntaxHighlighter.all()
	 </script>
		<!--[if lt IE 7]>
		<div style=' clear: both; text-align:center; position: relative;'>
			<a href="http://windows.microsoft.com/en-US/internet-explorer/products/ie/home?ocid=ie6_countdown_bannercode">
				<img src="http://storage.ie6countdown.com/assets/100/images/banners/warning_bar_0000_us.jpg" border="0" height="42" width="820" alt="You are using an outdated browser. For a faster, safer browsing experience, upgrade for free today." />
			</a>
		</div>
		<![endif]-->
		<!--[if lt IE 9]>
			<script type="text/javascript" src="js/html5.js"></script>
		<![endif]-->
	    <style type="text/css">
<!--
.style3 {color: #000000}
.style15 {font-weight: bold; color: #000000;}
.style17 {color: #800000}
.style18 {color: #0000CC}
.style23 {color: #0000CC; font-size: small; }
.style22 {color: #660000}
.style28 {
	color: #660000;
	font-size: large;
	font-weight: bold;
}
.style29 {font-weight: bold; color: #660000; }
.style30 {font-weight: bold; color: #330000; }
.style31 {font-weight: bold; color: #000000; font-size: medium; }
-->
        </style>
</head>
	<body id="page3">
		<div class="extra">
<!--==============================header=================================-->
			<header>
				<div class="main">
					<div class="border-top">
						<div class="wrapper">
						  <h1><img src="images/title.jpg" width="266" height="101"></h1>
							<nav>
								<ul class="menu">
									<li><a href="http://3pintech.com/index.htm">Home</a></li>
									<li><a href="http://3pintech.com/about_us.htm">About Us</a></li>
									<li><a class="active" href="http://3pintech.com/products.htm">Products</a></li>
									<li><a href="http://3pintech.com/solutions.htm">Solutions</a></li>
									<li><a href="http://3pintech.com/clients.htm">Clients</a></li>
									<li class="last-item"><a href="http://3pintech.com/contacts.htm">Contacts</a></li>
								</ul>
							</nav>
						</div>
					</div>
					<div class="slider-bg">
					  <div class="slider"></div>
					</div>
				</div>
			</header>
<!--==============================content================================-->
<div align="right">
  <ul class="list-1">
    <li class="style23"><a href="http://sourceforge.net/projects/fast-code/files/updates/" class="style18">Fast Code Download</a> | <a href="license.htm"><span class="style18">Fast Code</span> <span class="style18">License</span></a><span class="style18"> |</span> <a href="feedbacks.htm" class="style18">Feedback</a> | <a href="http://www.youtube.com/watch?v=fxuJOvkNdL8" class="style18">3PinTalk</a></li>
  </ul>
</div>
<div class="ic"></div>
				<div class="main">
				  <div class="container_12">
				    <div class="wrapper p3">
                      <div align="right">
                        <ul class="list-1">
                          <div align="left">
                            <h4><a href="/products/" class="style18">Fast code eclipse plug-in</a><a href="/products/" class="style17"></a></h4>
                            <div align="right">
                              <ul class="list-1">
                                <li class="style18">
                                  <div align="left" class="style17">
                                    <div align="left"><a href="documentation.htm" class="style22">Documentation</a> | <a href="templates.htm" class="style22">Templates</a> | <a href="dbcodetemplates.htm" class="style22">Database Templates</a> | <a href="templatelist.htm" class="style22">Template List</a> |<a href="installation.htm" class="style22"> Installation </a> | <a href="troubleshooting.htm" class="style22">Trouble shooting</a> | <a href="faq.htm" class="style22">FAQ</a> | <a href="tracker.htm" class="style22">Tracker</a> | <a href="video.htm" class="style22">Video Tutorials</a> | <a href="spreadthenews.htm" class="style22">Spread the news</a> | <a href="features.htm" class="style22">Features</a> | <a href="discussionforum.htm" class="style22">Discussion Forum</a> | <a href="releasenotes.htm" class="style22">Release Notes</a> </div>
                                  </div>
                                </li>
                              </ul>
                            </div>
                          </div>
                        </ul>
                        <div align="left">
                          <p class="style28">DOCUMENTATION</p>
                        </div>
                      </div>
				      <p class="style15">This part of the documentation explains some of the most useful features of fastcode plugin. </p>
				      <div class="extra-wrap" color: #333333>
                        <p class="style3"><img src="images/arrow1.jpg" width="11" height="22"> FastCode Plugin is available for <strong>JAVA</strong> and <strong>PHP</strong> developers, please see the <a href="installation.htm" class="style29">installation page</a> to install the plugins. </p>
                        <p class="style3"><img src="images/arrow1.jpg" width="11" height="22"> For a list of short video tutorials, you can click <strong><a href="video.htm" class="style22">here</a>.</strong> </p>
				        <p class="style3"><a href="fast-code/templates.htm" class="style15"></a><img src="images/arrow1.jpg" width="11" height="22"> If you have any trouble with this plugin, please see the <a href="troubleshooting.htm" class="style22"><strong>trouble shooting page</strong></a>. </p>
				        <p class="style3"><img src="images/arrow1.jpg" width="11" height="22"> You can see the release note <a href="releasenotes.htm" class="style29">here</a>. </p>
				        <p><img src="images/arrow1.jpg" width="11" height="22"> <span class="style3">Detailed documentation on</span><span class="style15"> templates </span><span class="style3">can be found</span><span class="style15"> <a href="templatelist.htm" class="style22">here</a>. </span></p>
				        <p><img src="images/arrow1.jpg" width="11" height="22"> <span class="style3">Detailed documentation on </span><span class="style15">database templates </span><span class="style3">can be found</span><span class="style15"> <a href="dbcodetemplates.htm" class="style22">here</a>. </span></p>
				        <p class="style3">One can configure the plugin features by going to  <strong>Windows -&gt; Preferences -&gt;Fast Code</strong>.</p>

						<div class="background" style="width: 1000px; height: 710px;  overflow-x: scroll; border: 0; padding: 1px;">
				<p class="style3"><img src="images/fastcode1.JPG" width="940" height="748">
						          <img src="images/fastcode2.JPG" width="940" height="748">
						          <img src="images/fastcode3.JPG" width="940" height="748"></p>
						</div>
				        <h6 class="style29">&nbsp;</h6>
				        <p class="style31">The user can choose the following plugin features:</p>
				        <p class="style29"><img src="images/arrow1.jpg" width="11" height="22"> <a href="#similarclass" class="style22 style3">Create Similar Class</a>.<br>
				          <img src="images/arrow1.jpg" width="11" height="22"> <a href="#newfields" class="style22">Create a New Simple string Field/Field with getter/setter</a>. <br>
				          <img src="images/arrow1.jpg" width="11" height="22">				          <a href="#modifyfield" class="style22">Modify a field</a>. <br>
				          <img src="images/arrow1.jpg" width="11" height="22">				          <a href="#listmap" class="style22">Create   New Tree Map/Hash Set/Hash Map/Array List</a>. <br>
				          <img src="images/arrow1.jpg" width="11" height="22">				          <a href="#staticimport" class="style22">Create  Static Import</a>.<br>
				          <img src="images/arrow1.jpg" width="11" height="22">				          <a href="#synchronize" class="style22">Synchronize Method (Class-Interface)</a>. <br>
				          <img src="images/arrow1.jpg" width="11" height="22">				          <a href="#copy" class="style22">Copy Member/Multiple members</a>.<br>
				          <img src="images/arrow1.jpg" width="11" height="22">				          <a href="#importexport" class="style22">Export/Import Unit Test Preference</a>.<br>
				          <img src="images/arrow1.jpg" width="11" height="22">				          <a href="#export" class="style22">Export Unit Test Result Format</a>.<br>
				          <img src="images/arrow1.jpg" width="11" height="22">				          <a href="#unittest" class="style22">Create Unit Test</a>.<br>
				          <img src="images/arrow1.jpg" width="11" height="22">				          <a href="#jump" class="style22">Jump to  Unit Test</a>.<br>
				          <img src="images/arrow1.jpg" width="11" height="22">				          <a href="#templates" class="style22">Templates</a>. <br>
				          <img src="images/arrow1.jpg" width="11" height="22"> <a href="#dbtemplates" class="style22">Database Templates</a>.<br>
				          <img src="images/arrow1.jpg" width="11" height="22">				          <a href="#filetemplates" class="style22">File Templates</a>.<br>
			              <img src="images/arrow1.jpg" width="11" height="22">				          <a href="#rulesbasedtemplates" class="style22">Rules Based Templates</a>.</p>
				        <p class="style30">&nbsp;</p>
				        <h6 class="style29"><img src="images/arrow1.jpg" width="11" height="22"> <a name="similarclass"></a>CREATE SIMILAR CLASS</h6>
				        <p class="style3">This may be the most useful feature of this plugin. With this you can create similar classes, from <strong>FooDAO</strong> to <strong>FooService</strong> and <strong>FooService</strong> to <strong>FooAction</strong>. To use this feature one need to configure it by going to <strong>Windows -&gt; Preference -&gt;Fast Code</strong>. Here is a <a href="images/CreateSimilar-preference.jpg">screenshot</a>. As one can see that it starts with  &quot;From Classes&quot; box. It is of the form (${ANY_PACKAGE})<strong>.dao.</strong>(${ANY_CLASS})<strong>DAO</strong>. Who is familar with regular expressions in java will have no problem to see the structure. It has been grouped using parenthesis. These groups can be used in the later parts of the configuration, especially &quot;To Classes&quot; field. Here you can use place holders e.g. <strong>${1}, ${2}</strong> . It is to be noted that ${ANY_PACKAGE} and ${ANY_CLASS} are kind of reserved expressions, the <strong>'$'</strong> in <strong>${ANY_PACKAGE}</strong> does not have the usual meaning of regular expression.</p>
				        <p class="style3">Typically, one would start from a<strong> DAO</strong> interface, e.g <strong>FooDAO</strong>. From this interface, you can create <strong>FooService</strong> and its implemenation <strong>FooServiceImpl</strong> . Then you can create configuration files as well. Certain types configurations come out of the box. These are spring, dozer, tiles, struts, etc. If you do not need these or need some other kind of configurations, you can open the jar file and edit the file org/fastcode/util/fast-code-config.xml. To any developer format of the file should be self explanatory. It is important to note that more than one configuration files can be created. This is especially useful for resource bundle typically required in web applications using struts or similar frameworks.</p>
				        <p class="style3">When you create a similar class, you can also copy all the public methods. It is recommended that you start with<strong> FooDAO</strong> interface, then create <strong>FooService</strong> &amp; <strong>FooServiceImpl </strong>with this plugin and also create <strong>FooAction</strong> along with the configuration files.</p>
				        <p class="style3">One can copy the methods from the source class to the destination class. One can put some filters on the name of the methods to be copied. One can also copy one method only. To do this, one has to open the source class in editor, highlight any method name and from the top menu click <strong>Fast Code --&gt; Create Similar Class</strong>. There is keyboard shortcuts <strong>(Ctl-Alt-Shift-S )</strong> available for this. The plugin will copy only the method highlighted.</p>
				        <p class="style3">The create similar class can be used for value beans as well. In this case, 'Copy Fields' checkbox need to be checked.</p>
				        <p class="style29">In summary,  plugin helps create similar class as shown in the following diagram:</p>
				        <p class="style3"><img src="images/arrow1.jpg" width="11" height="22"> com.test.dao.FooDAO (Assume one already has this)<br>
                          <img src="images/arrow1.jpg" width="11" height="22"> com.test.dao.impl.FooDAOImpl (Assume one already has this)<br>
                          <img src="images/arrow1.jpg" width="11" height="22"> com.test.service.FooService (<span class="style17">Can be created this with the plugin</span> )<br>
                          <img src="images/arrow1.jpg" width="11" height="22"> com.test.service.impl.FooServiceImpl (<span class="style17">Can be created this with the plugin</span> )<br>
                          <img src="images/arrow1.jpg" width="11" height="22"> com.test.ui.action.FooAction ( <span class="style17">Can be created this with the plugin </span>)<br>
                          <img src="images/arrow1.jpg" width="11" height="22"> com.test.domain.FooPOJO (Assume you already have this)<br>
                          <img src="images/arrow1.jpg" width="11" height="22"> com.test.service.domain.FooVO  ( <span class="style17">Can be created with the plugin</span>) <br>
                          <img src="images/arrow1.jpg" width="11" height="22"> com.test.ui.bean.domain.FooBean ( <span class="style17">Can be created with the plugin</span>)<br>
                          <img src="images/arrow1.jpg" width="11" height="22"> Various configuration file skeleton (struts-config.xml, faces-config.xml, dozer-mapping.xml, Application.properties, etc) ( <span class="style17">Can be created with the plugin</span> )</p>
				        <p class="style3"><br>
				          It is possible to add pre-defined code snippet in the class body. To do this you need to put the code in the text box for inside the class body in the preferences. E.g, one can put </p>
				        <p class="style15">•private static Logger logger = Logger.getLogger(${class_name}.class); </p>
				        <p><span class="style3"> and it will create the logger field with appropriate initializer. One can configure it to implement any interface, e.g the DAO impl class can implement InitializingBean, or a Vo class can implement Serializable. To do this, populate the 'Interfaces To Implement' list box, e.g. if one puts <strong>'org.springframework.beans.factory.InitializingBean`</strong> the implementation class will implement the interface and the mehods in the interface (afterPropertiesSet in this case) will be copied. One can put code snippet in this method as well. To do this go to <strong>Windows -&gt; Preference -&gt;Fast Code-&gt;Templates --&gt; Templates Additional </strong>as shown below. With the code below, it will automatically create the method <strong>afterPropertiesSet</strong> with code to check that all fields have been properly initialized. It is to be noted that just by populating the list box, it will not automatically implement all the interfaces, it will give the user a choice when the program is run. In other words, they become candidates for interfaces to implement. </span><br>
                            <img src="images/method-body.jpg" width="966" height="280"> </p>
				        <p class="style3">The template for a method body for InitializingBean is already there as shown above. To create the template for any other method, you need to open the jar file. In the resources folder there is an file called <strong>additional-templates-config.xml </strong>which you can edit. Once the file has been updated, one can edit the template from the preferences. The template need to have an type attribute which is of the form &quot;method.body.method_name&quot;, where method_name can be the just the name of the method or one can put the fully qualified class name and the method name, e.g. it will be 'method.body.org.springframework.beans.factory.InitializingBean.afterPropertiesSet' or 'method.body.afterPropertiesSet'. It is better to use the long version as there will be less chance of conflict. </p>
				        <p><span class="style3">One can create additional fields as well. When the service class is being created, one might want to create other DAO fields in addition to the one automatically created (e.g.<strong> FooDao</strong> for <strong>FooService</strong>). To do this check the<strong> &quot;Create Additional Fields&quot;</strong> checkbox as shown below : </span><br>
                        </p>
				        <img src="images/create-additional-fields1.jpg" width="1002" height="45">
                        <p class="style3">&nbsp;</p>
				        <p class="style3">If one puts *Dao in the text box below the checkbox, it will open the type dialog with classes ending with Dao. One can now select as many Dao classes as possible, and it will create the fields in the ServiceImpl class. </p>
				        <p class="style3">One can also import certain classes. What kind of classes should be considered for import? If there are some classes with constant fields, or some utility classes, one might consider importing them. Again by configuring does not mean they will be automatically imported but they become candidates for import. The user will be still able to pick and choose which files to import. This also supports wildcard feature, e.g.if one wants to consider to import all classes in the package <strong>com.test.util</strong>, one needs to put <strong>com.test.util.*.</strong> When one executes the option, all classes in the package will show up in a list box from which the user can choose which classes to import. </p>
				        <p class="style3">It is possible to convert the method parameters while doing Create Similar Class, e.g. if the <strong>DAO</strong> class has a method </p>
				        <p class="style3">•public void saveFoo(<strong>FooVo fooVo</strong> ); <br>
				          and one wants the Service class to have </p>
				        <p class="style3">•public void saveFoo(<strong>FooDto fooDto</strong> ); </p>
				        <p class="style3">it is possible to do that. To do the check the convert Method Param CheckBox and populate the next two fields as shown below.</p>
				        <img src="images/convert-method-param.jpg" width="712" height="73">
                        <p class="style3">&nbsp;</p>
				        <p class="style3">It is also possible to have code convert one object to another (from fooVo to fooDto in this case). To do this, one can put a code snippet in the Convert Method Param Pattern text box in Fast Code as shown below : </p>
				        <p class="style3"><img src="images/convert-method-param-pattern.jpg" width="990" height="147"> </p>
				        <p class="style3">In the above example it is shown how to convert one object to another using the dozer mapping. To do other kind of conversion is straightforward. </p>
				        <p class="style3">One useful feature of the plugin is '<strong>Create Similar Class with Different Name</strong>'. This is particularly useful to create similar classes of the same type, i.e. one DAO to another DAO or one service to another service. With this action one can create <strong>FooDAO</strong> to <strong>BarDAO</strong> with click of a mouse. As usual, if the <strong>FooDAO</strong> is an interface, you can create <strong>BarDAO</strong> interface along with the implementation class. You can copy the methods as well, but this time with a catch, method names are converted, e.g methods with name getFoo, saveFoo etc will be converted to getBar, saveBar etc. It will try to convert the method parameter as much as possible. E.g. for the method saveFoo(FooVO FooVO), it will create saveBar(BarVO barVO) provided it can find the BarVO class. To convert the method parameter in this case, one must have convert Method Param CheckBox checked and configure it accordingly in the 'Create Similar Class with Different Name' preference as shown above. To use this, highlight a method or the class and type Ctl-Alt-Shift-D or choose the option Create Similar Class with Different Name from the fast code menu. </p>
				        <p class="style3">All the create similar features can be invoked from the implementation classes even though it is configured with the interfaces. This way one does not have jump to the interface just for creating similar classes.</p>
				        <h6 class="style22"><img src="images/arrow1.jpg" width="11" height="22"> CREATE NEW CLASS</h6>
				        <p class="style3">One can create a DAO or Service as interface-implemenation pair. To do this one needs to select Create New Dao or Service class from the fast code menu. Once selected, it will prompt one with an input box. At this time, one can put any alpha numeric values (space separeted). If one types in foo, it will create FooDao and FooDaoImpl in approppriate packages and their configurations. To configure this one needs to go to <strong>Windows -&gt; Preference -&gt;Fast Code -&gt;Create Similar --&gt; Create New Service Class.</strong> Configuration is very similar to create similar configuration except that there is no From classes box as there are the no from classes to start with. You need to configure it just once and use the feature many times. The menu is shown below :</p>
				        <p class="style3"><img src="images/create-new-service.JPG" width="646" height="331"></p>
				        <h6>The preference path is shown below :</h6>
				        <p><img src="images/create_new_dao-preference.JPG" width="890" height="738"></p>
				        <p class="style3">As one can see it has a special keyword called <strong>input</strong> which is what the user enters as he is prompted. If one types in foo it will generate <strong>FooDao</strong> and <strong>FooDaoImpl</strong>. Before using it is necessary to configure it including the project and package. It is also possible to create value objects e.g. FooVO or FooDto. One can create fields in the class such as FooName or FooType by including code in the class as <strong>private String ${input}Name</strong> and such.</p>
				        <p class="style3">The <strong>${input}</strong> is a special object which all the necessary methods from the String class in java. However, it is not possible check for equality with other string. To check for equality with other string one has to use<strong> ${input.value}</strong>. It is explained in the code block below. Otherwise, one can put any arbitrary code snippet with <strong>${input} </strong>variable and use inside class body or annotations, etc.<br>
                        <pre class="brush: java;">

   #if (${input} == "foo") {   // Do not do this.
	   // some code
	}

    #if (${input.value} == "foo") {   // Do do this.
	   // some code
	}


</pre>
                        <h6 class="style22"><img src="images/arrow1.jpg" width="11" height="22"> <a name="newfields"></a>CREATE NEW FIELD WITH DETAILS</h6>
                        <p class="style3">This menu is a one stop point for creating any kind of variable in a java or groovy class. The user can specify if they want getter/setter both, just getter or setter or none. If they choose List or Set, they have an option for getter/adder also. User can specify format for getter setters and a prefix for setter method. These once set will be appplicable for variables created from any other fast code menu as well. They can always change it from this menu. If one wants to use Lombok annotation, they can do so, if they have the lombok jar in the project class path. User can create variables of primitive types, or defined types—this they can do by choosing the available classes displayed, when the browse button is clicked. If user wants to use wrapper class for the primitive types, the can do so by checking the ‘change to wrapper’ check box. User can specify the desired access specifier modifier. Accordingly, the getter/setters will be enabled or disabled. </p>
                        <p class="style3">Sample code generated:</p>
                        <p class="style3">With private List, getter/setter –single line, prefix – b </p>
                        <p class="style3">•private List&lt;Sample&gt; sampleList = new ArrayList&lt;Sample&gt;();<br>
                        </p>
                        <p class="style3">•public List&lt;Sample&gt; getSampleList() {return this.sampleList;}<br>
                          •public void setSampleList(final List&lt;Sample&gt; bSampleList) { this.sampleList = bSampleList;}</p>
                        <p class="style3">One can add  annotation listeditor in <strong>Window-&gt;Preferences-&gt;Fast  Code -&gt;Variable </strong>as shown below:</p>
                        <p class="style3"><img src="images/variablepreference.JPG" width="890" height="718"></p>
                        <p class="style3">When Create variable  dialog is selected, it displays the annotation list selected in preference  page.  One can choose the annotation  which will be appended with the new variable.   These annotations are applicable only for variables.</p>
                        <p><img src="images/create-variable-dialog.JPG" width="713" height="624"></p>
                        <p class="style3">The annotations will  be created as below:</p>
<pre class="brush: xml;">
 	@Setter()
	private String firstName;
	@Setter()
	private String lastName;

	public String getFirstName() {
		return this.firstName;
	}

	public void setFirstName(final String firstName) {
		this.firstName = firstName;
	}

	public String getLastName() {
		return this.lastName;
	}

	public void setLastName(final String lastName) {
		this.lastName = lastName;
	}
</pre>
                        <p class="style3"><a name="buildpattern"></a>When user selects the option <strong>Builder Pattern</strong> while creating a new field, a builder class for the field will be generated as shown in sample code  below:</p>
<pre class="brush: xml;">
	private String firstName;
	/**
	 *
	 * getter method for firstName
	 * @return
	 *
	 */
	public String getFirstName() {
		return this.firstName;
	}
	private Subtract(final Builder builder){
		 this.firstName = builder.firstName;
	}
	public static class Builder{
		@Setter()
		private String firstName;
		public Builder(){
		}
		public Subtract build() {
			return new Subtract(this);
		}
		public Builder withFirstName(final String firstName) {
			this.firstName = firstName;
			return this;
		}
	}
	getterSetterReflection.setGetter(null);
	getterSetterReflection.setSetter(null);
</pre>

                        <h6 class="style22">&nbsp;</h6>
                        <h6 class="style22"><img src="images/arrow1.jpg" width="11" height="22"> CREATE NEW VARIABLE WITH GETTER/SETTER</h6>
                        <p class="style3">This plugin make it easy to create private variables in a class. To use this simply choose <strong>'Create a New Field '</strong> from the menu at the top as shown below. This brings up a type dialog where you can find and select your type. When you have put a name or multiple names for the variable. Also if one can create a bunch of fields in one shot. One can also create new variable of type string by choosing a different option 'Create a New String Field with getter/setter' from the same menu. This will by-pass the type dialog, everything else will be same. These two menu create the field with getter and setter by default. If user wants to create fields with specific details, then they can use the menu '<strong>Create new field</strong>'.</p>
                        <p><img src="images/create-new-field.JPG" width="601" height="331"></p>
                        <p class="style29"><img src="images/arrow1.jpg" width="11" height="22"> <a name="modifyfield"></a>MODIFY A FIELD</p>
                        <p class="style3">One can modify a field by selecting the <strong>Fast Code-&gt;Create Field--&gt;Modify a field</strong> menu where user can modify field name,  field type, getter/setter of an existing field.</p>
                        <p><img src="images/modifyfield.JPG" width="598" height="331"> </p>
                        <p class="style3">When <strong>modify a field</strong> menu is selected modify  variable dialog will appear where one can choose the field types as shown:</p>
                        <p><img src="images/modifyvariabledialog.JPG" width="699" height="624"></p>
              <h6 class="style22"><img src="images/arrow1.jpg" width="11" height="22"> <a name="listmap"></a>CREATE LIST/MAP ETC</h6>
                        <p class="style3">This plugin helps create code snippet to create List/Map/Set etc.  This is especially useful for parameterized list. E.g, we want to create a List of class Foo as : </p>
                        <p class="style15">•List&lt;Foo&gt; fooList = new ArrayList&lt;Foo&gt;();</p>
                        <p><span class="style3"> <br>
                          As one can see there is so much typing involved although any ide's code assists feature help. With this plugin one can generate the whole line with one click along with all the necessary imports. As an added benefit, it will also prompt you to create getter/setters or adder methods as well as shown below. </span><br>
  <img src="images/getter-setter-map.jpg" width="531" height="151"></p>
                        <h6 class="style22">&nbsp;</h6>
                        <h6 class="style22"><img src="images/arrow1.jpg" width="11" height="22"> <a name="staticimport"></a>CREATE STATIC IMPORT </h6>
                        <p class="style3">Another useful feature of this plugin is to create import. Normally, one would not need to have another method to import files as eclipse already provides importing functionality. This plugin helps to create static import easily. If the class to be imported has static members only it can automatically create static import. All the static members from the chosen class are displayed to the user. The user can specifically choose the static members to be imported. As always, this feature is configurable. One can add  new class/member  of the class which has static members in <strong>Fast Code page</strong>. If there is some  value in the preference page,  then below dialog box will popup when we invoke the menu  create static import otherwise previous dialog box will come and if user  select any new class that will be appended in preference page box.</p>
                        <p class="style3"><img src="images/createstaticimport.JPG" width="643" height="444"></p>
                        <h6 class="style22"><img src="images/arrow1.jpg" width="11" height="22"> <a name="synchronize"></a>SYNCHRONIZING CLASSES WITH INTERFACES</h6>
                        <p class="style3">Coding to interfaces is a hallmark of any j2ee projects. This separates the interfaces from implementation, but during development it is tedious to put a method in two places. This is where this plugin can help. One can create a method in the implementation class (e.g. <strong>FooServiceImpl</strong>) and from the Fast Code menu at the top select Synchronize Member (Class - Interface). If the method is not there in the interface (<strong>FooService</strong>), it will put it there. Also an option will come up to create Junit test at the same. So one can be just in the implementation class and have all the necessary classes (interface and junit in this case) be modified accordingly.</p>
                        <p><img src="images/Synchronize20Member.JPG" width="293" height="432"></p>
                        <h6 class="style22"><img src="images/arrow1.jpg" width="11" height="22"> <a name="copy"></a>COPY MEMBER</h6>
                        <p class="style3">With this plugin, one can create copies of members (class/fields/methods) in a class or interface. This come very convenient in large class. Let's say you want to create  from field <strong>fooName</strong> to <strong>fooType</strong> and <strong>fooAge</strong>. To do this you select fooName and right click on it and navigate to <strong>Fast Code -&gt; Copy Member</strong> menu or type Ctl-Alt-Shift-C . A simple dialog box will appear to prompt you to input. Here you just type Type and Age. You will see two new fields with name <strong>fooType</strong> and <strong>fooAge</strong> will be created. If the original field (fooName) had getter/setters the new fields will be created with getter/setters as well. If the original field had only getter or setter the new fields will also have only getter or setter. However, in the preferences, one can set the preference to always create getter/setters regardless whether the original fields has it or not, but it is not recommended. Similarly one can create copies of methods as well. One can, of course, select the full name of the field/method. One can copy a class as well. If one has action class called <strong>FooAction</strong>, one can create a <strong>BarAction</strong>. To do this, just highlight Foo and then type <strong>Ctl-Alt-Shift-C</strong>. Once a input dialog comes asking for input where one can type bar and BarAction will be created. If FooAction had a super class and implemented some interfaces it will ask if one want to extend the same super class and implement the interfaces for <strong>BarAction</strong> as well.</p>
                        <h6 class="style22"><img src="images/arrow1.jpg" width="11" height="22"> <a name="importexport"></a>IMPORT-EXPORT UNIT TEST PREFERENCE</h6>
                        <p class="style3">With this plugin, one can create import or export unit test preferences to an xml file by going into  <strong>Windows --&gt; Preferences --&gt; Fast Code  --&gt;JUnitTest Page</strong>. The xml can then be edited as required and imported again. </p>
                        <p><img src="images/unit-test-import.JPG" width="290" height="432"></p>
                        <h6 class="style22"><img src="images/arrow1.jpg" width="11" height="22"> <a name="export"></a>EXPORT UNIT TEST RESULT FORMAT</h6>
                        <p class="style3">One can export the  unit test result format by going into  <strong>Fast Code  --&gt;Export Unit Test Result Format</strong>. The output file  exported  <strong>unit-test-result-format.xml</strong> <span dir="ltr" id=":4z">can then be edited as required and one can use the changes by adding the xml into the plugin jar</span>.</p>
                        <p><img src="images/exportresultformat.JPG" width="295" height="435"></p>
                        <h6 class="style22"><img src="images/arrow1.jpg" width="11" height="22"> <a name="jump"></a>JUMPING BETWEEN SIMILAR CLASSES</h6>
                        <p class="style3">An useful feature of this plugin is the ability to jump between similar class, e.g FooDAO to FooService, FooService to FooAction, etc. To use this feature, one needs to configure this first. To configure, please go to <strong>Windows -&gt; Preferences -&gt;Fast Code -&gt; Mapping Between Similar Classes</strong>. This is very similar to the configuration for create similar classes.</p>
				        <h6 class="style22"><img src="images/arrow1.jpg" width="11" height="22"> DEPENDENCY INJECTION</h6>
				        <p class="style3">Another useful feature of this plugin is easy dependency injection. Let us say one has class <strong>SampleServiceImpl</strong> which needs to have <strong>FooDao</strong> and <strong>BarDao</strong> as dependencies. Instead of manually creating an instance of the Dao classes and their getter/setters with their configurations, this plugin has feature that enables one to select <strong>FooDao</strong> and <strong>BarDao</strong> in the package explorer and click <strong>Fast</strong> <strong>Code -&gt; Add As Spring Dependency</strong>. In one click it will create instances of FooDao and BarDao with the imports and the getter/setters. It will also update the configuration file. It is also possible to just create the instances without configuration. To do this just click<strong> Fast Code -&gt; Create Dependency</strong>. This helps when one is using the spring's auto-inject feature or is not using the spring framework at all. With this plugin one can create simple (without configuration) of complex dependency injection of any number classes in one click. </p>
				        <h6 class="style22"><img src="images/arrow1.jpg" width="11" height="22"> <a name="unittest"></a>CREATE UNIT TEST</h6>
				        <p class="style3">A very useful feature of this plugin is to create unit tests automatically. Unit tests can be of type Junit 3, Junit 4 or TestNG. For Junit 4 or TestNG tests, appropriate annotations will be automatically added. One needs to configure it just once. One can setup test profiles as well, e.g. DAO classes can have one kind of unit test and the service classes can have another. One can select the class or any method and from the Fast Code menu select <strong>Create Unit Test </strong>or type <strong>Ctl-Alt-Shift-U.</strong> If a method is selected then unit test dailog box will be displayed with the details applicable for that method only, otherwise all the methods in that class, for which there is no test method yet, are displayed. And one can select any number of methods. If the unit test is already present, it will prompt the user to create another test, or jump to test. If the method chosen already has a test method then user can create an additonal test method. If the method does not throw any exception, user can choose any Exception class to be thrown. Depending upon the unit test type (junit3/4 or testNG), appropriate annotaions will be added to the method. The user can choose to generate a regular test or an exception test. When the user wants to create a regualar test, they can choose to throw an exceptiton -- the test method will throw the exception or get it consumed -- the test method body will be surrounded with try/catch. </p>
				        <p class="style3"><img src="images/unit-test-menu.JPG" width="293" height="432"></p>
				        <p class="style3"><img src="images/Unit_test_dialog.JPG" width="792" height="657"></p>
				        <p class="style3">Based on the return type of the method choosen,the result format is listed. The result formats are loaded from resource -&gt; <strong>unit-test-result-format.xml</strong>. This has templates for &quot;Not Null and not empty&quot;, &quot;Equal to&quot;, &quot;Greater than&quot;, &quot;Less than&quot; etc. For the formats that need a value two more attributes require-value and value-type will be specified. For those formats which need to be validated against any value i.e. require-value=&quot;true&quot;, another dialog box will be shown where the user can specify the values. The return types like ArrayList, List, LinkedList, Set, TreeSet, SortedSet, LinkedHashSet are stored in one parent return type as <strong>Collection</strong> and return types like HashMap, HashTable, TreeMap are stored in<strong> Map </strong>return type,   these return types are stored in <strong>parent-child.xml</strong> and are called in <strong>unit-test-result-format.xml</strong> as <strong>&quot;&lt;format return-type=&quot;java.util.Collection&quot;&gt;&quot;</strong>.</p>
				        <p class="style3">Below is the sample template from the xml.<br>
                        </p>
				        <pre class="brush: xml;">
 	&lt;format return-type="int"&gt;
		&lt;options&gt;
			&lt;option name="Greater than Zero"&gt;

				&lt;![CDATA[
					assertTrue("${result.name} should be greater than zero", ${result.name} > 0);
				]]&gt;
			&lt;/option&gt;
			&lt;option name="Less than Zero"&gt;
				&lt;![CDATA[
					assertTrue("${result.name} should be less than zero", ${result.name} < 0);
				]]&gt;
			&lt;/option&gt;
			&lt;option name="Equal to Zero"&gt;
				&lt;![CDATA[
					assertTrue("${result.name} should be equal to zero", ${result.name} == 0);
				]]&gt;
			&lt;/option&gt;
			&lt;option name="Equal to" require-value="true" value-type="int"&gt;
				&lt;![CDATA[
					assertTrue("${result.name} should be equal to ${value}", ${result.name} == ${value});
				]]&gt;
			&lt;/option&gt;
			&lt;option name="Greater than" require-value="true" value-type="int"&gt;
				&lt;![CDATA[
					assertTrue("${result.name} should be greater than ${value}", ${result.name} > ${value});
				]]&gt;
			&lt;/option&gt;
			&lt;option name="Less than" require-value="true" value-type="int"&gt;
				&lt;![CDATA[
					assertTrue("${result.name} should be less than ${value}", ${result.name} < ${value});
				]]&gt;
			&lt;/option&gt;
		&lt;/options&gt;
	&lt;/format&gt;
                    </pre>
                        <p class="style3">Below is the sample output for a method with return type integer, format chosen is &quot;Greater Than&quot;.</p>
				        <pre class="brush: java;">
    		assertTrue("result should be greater than 48", result &gt; 48);
                    </pre>
                        <p><img src="images/unit-test-return-values.jpg" width="365" height="174"></p>
				        <p class="style3">This plugin also provides a way to jump to the unit test. If more than one tests are found, it will show a dialog with all the tests; negative tests (tests that pass if an exception is thrown) are distinguished from positive tests. It also has a way to jump from one junit test to another which are tests for the same method.</p>
				        <p><img src="images/Junit-tests.jpg" width="444" height="374"></p>
				        <p class="style3">To use this feature effectively, one needs to configure it first by going to <strong>Windows --&gt; Preferences --&gt; Fast Code  --&gt;JUnitTest Page</strong>. As shown in the figure below, one can set up different profiles for different kinds of classes, e.g. DAO classes can have one kind of tests while Service classes can have another. Most of the other fields are pretty much self explanatory. </p>
				        <p><img src="images/Junit-pref.JPG" width="844" height="738"></p>
				        <p class="style3">As in the create new class, create unit test also supports predefined code snippets to be inserted inside the test class. As an example, in Junit 4, one can add the following rules before generating the tests in the class body : </p>
				        <p class="style3">•<strong>@Rule</strong> public TemporaryFolder tempFolder = new TemporaryFolder(); <br>
				          •<strong>@Rule</strong> public ExpectedException exception = ExpectedException.none();<br>
				          Junit tests can be created from the implementation classes even if the unit test is by the interface. In most cases, one needs to create the unit test from the interface, and next time onwards the implementation class can be used to create unit tests for other methods from the implementation class. Also Jump to the unit test can be done from implementation class as well. </p>
				        <p class="style3">Below is sample code generated for JUnit4:</p>
				        <pre class="brush: java;">
	/**
	 *
	 * @see pack2.TestOfCVDialog#getVar2()
	 */
	@After
	@Before
	@Test
	public void getVar2() {
		int result = testOfCVDialog.getVar2();

		assertTrue("result should be less than zero", result < 0);
	}
                    </pre>
                        <p class="style3"><img src="images/unit_test_dialog_for_junit4.jpg" width="803" height="586"></p>
				        <p class="style3"><a name="unitestng"></a>Unit Test for TestNG added with features for @DataProvider &amp; Depends On Methods annotations.  At the time of additional test, if the test  class has @Test annotation and @DataProvider(name=” “) annotation, then the  @Test annotation will be generated like below. It is only applicable for TestNG  unit test type.</p>
				        <p class="style3"><img src="images/unit_test_dialog_ng.jpg" width="802" height="690"></p>
				        <p class="style3">Below  is the sample code generated for Unit TestNG:</p>
				        <pre class="brush: java;">
	/**
	 *
	 * @see pack2.TestOfCVDialog#getVar2()
	 */
	@After
	@Before
	@Test(dataProvider = "getVarMap", dependsOnMethods = { "getTest,getVarList" })
	public void getVar2() {
		int result = testOfCVDialog.getVar2();

		assertTrue("result should be equal to 12", result == 12);

		assertTrue("result should be less than 15", result < 15);
	}

</pre>
                        <h6 class="style22"><img src="images/arrow1.jpg" width="11" height="22"> <a name="templates"></a>TEMPLATES</h6>
                        <p class="style3">The templates  extends eclipse code templates by being able to generate code snippets based on fields from arbitutary pojo class or class from any package or files in folder. This kind of snippets are needed in various scenerios, e.g. create instance of a java bean and populate the bean, create jsp fragments, copy one java bean to another, create dozer mapping between two classes, create hql for hibernate queries, etc. This plugin provides a very intuitive interface by allowing the user select a class and then select the fields within the class. More detailed description is provided <a href="templates.htm" class="style29">here</a>. </p>
                        <p class="style3">The templates can be invoked from the fast code menu. But it is always more convenient to use the keyboard shortcut (<strong>Ctl-Alt-Shift-T</strong>). </p>
                        <h6 class="style22"> <img src="images/arrow1.jpg" width="11" height="22"> <a name="dbtemplates"></a>DATABASE TEMPLATES</h6>
                        <p class="style3">The templates are also available with database tables.  It extends eclipse code templates  by being able to generate code snippet with multiple columns. This kind of snippets are needed in various scenarios, e.g. create sql statements, with Named paramenter, Named query or just a simple query, etc. This plugin provides a very intuitive interface by allowing the user select a table and then select the columns from that table. More detailed description is provided <a href="dbcodetemplates.htm" class="style29">here</a>. </p>
                        <p class="style3"><span class="style3">The database templates can be invoked from the fast code menu. But it is always more convenient to use the keyboard shortcut <strong>(Ctl-Alt-Shift-B)</strong>. </span><br>
                        </p>
                        <h6 class="style22"><img src="images/arrow1.jpg" width="11" height="22"> <a name="filetemplates"></a>FILE BASE TEMPLATES</h6>
                        <p class="style3">This is useful to create code snippets with data from text files.  It extends eclipse code templates  by being able to generate code snippets with delimited data. The user can choose the desired text file.The user can specify the delimiter  for file templates by going into <strong>Windows -&gt; Preference -&gt;Fast Code --&gt;Template</strong>. The code presents the data in a Map, with  headers and the values. The template can be suitably edited to get the output in the desired format. It is assumed that any line in the file starting with ## is a comment line, and these lines will be ignored. Lines starting with # is considered to be the header. <br>
                        </p>
                        <p class="style3">For instace if the file contents look like something below: <br>
                          ##country name details<br>
                          #Code Country EName<br>
                          IN INDIA Delhi<br>
                          US USA Washington D.C</p>
                        <p><span class="style3">The output would look like: <br>
  &lt;tr&gt; IN : INDIA : Delhi &lt;/tr&gt;<br>
  &lt;tr&gt; US : UnitedStates : Washington D.C &lt;/tr&gt;</span><br>
  <img src="images/file-template-menu.JPG" width="451" height="331"> </p>
                        <p><img src="images/file-template.jpg" width="600" height="500"><br>
                        </p>
                        <p><img src="images/file-template-preference.JPG" width="922" height="727"></p>
                        <p class="style3">One can set the delimiter value for <strong>File templates</strong> in <strong>Templates</strong> Preference page. This delimiter value will be used while generating code snippets with delimited data for text files as shown below:</p>
                        <p class="style3"><img src="images/file-template-delimeter.JPG" width="932" height="727">.</p>
                        <h6 class="style22">&nbsp;</h6>
                        <h6 class="style22"><img src="images/arrow1.jpg" width="11" height="22"> <a name="rulesbasedtemplates" id="rulesbasedtemplates"></a>RULES BASED  TEMPLATES</h6>
                        <p class="style3">This template  uses a set of rules to create instances, classes, fields, etc.  which is defined in <a href="templatelist/fast-code-rules.xml" class="style3"><strong>fast-code-rules.xml</strong></a> file.  This xml file  is present in resources folder or one can export the fastcode rules by going into <strong>Fast Code --&gt; Rules based --&gt; Export Fast Code Rules</strong>. Unlike other templates even <a href="templatelist/fast-code-rules.xml" class="style15">fast-code-rules.xml</a> can be  edited to get the output in the desired format.</p>
                        <p class="style3"><img src="images/fastcoderules.JPG" width="564" height="344"></p>
                        <p class="style3">In <a href="templatelist/fast-code-rules.xml" class="style15">fast-code-rules.xml</a> file,  the action tags are defined for which the   action types can be any one of these -- create, update, select, import,   prompt.  Action entities can be class, file, package, folder, method,   snippet, interface, field. etc. The output of the action is  set to the   place holder with the attribute result set. The value of results will be the   key value where one can refer to this key in  further actions to access the   output of the earlier actions. One can define an action with type as   abstract and refer to this from other actions. The abstract action will   not be listed in the menu. We can pass the required attributes and its   value in parameters tag.   The menu can be invoked in any files (*.java, *.xml, *.jsp, etc). The list of actions are are popped up once the Process Rule action is invoked as shown: </p>
                        <p class="style3"><img src="images/fastcoderules1.JPG" width="328" height="381"></p>
                        <p class="style3"><strong>For Example:</strong> If one selects <strong>Create Abstract Class</strong> action, it ask for the class name to be created  as shown:</p>
                        <p class="style3"><img src="images/fastcoderules2.JPG" width="399" height="171"></p>
                        <p class="style3">Once the class Name is provided, the <strong>project</strong> and <strong>package</strong> selection dialog popups where one can select the project and package names which are the parameters.  An <strong>AbstractPerson.java</strong> file is created as the action_type defined in templates for abtract class is &quot;CREATE CLASS&quot;.  Similarly, one can set desired rule for each action types by editing the xml file.</p>
                        <p class="style3"> Below template shows how a rule is created for action &quot;Create Abstract Class&quot;. </p>
<pre class="brush: java;">
	<action name="CREATE_ABSTRACT_CLASS">
		<action-ref action-name="PROMPT">
			<parameters>
				<parameter name="title" value="Person"></parameter>
			</parameters>
		</action-ref>
		<action-ref action-name="CREATE_CLASS">
			<parameters>
				<parameter name="project" value="sample"></parameter>
				<parameter name="package" value="com.test"></parameter>
				<parameter name="abstract" value="true"></parameter>
				<parameter name="source" value="public abstract class Abstract${name} {\n}"></parameter>
			</parameters>
		</action-ref>
	</action>
</pre>
                        <p class="style22">&nbsp;</p>
                        <div class="wrapper border-bot prev-indent-bot2"></div>
			          </div>
			        </div>
				  </div>
	</div>

				<div class="block"></div>


<br>  </br>
<br>  </br>
<br>  </br>
<br>
</br>
<div align="left" class="style17">
  <div align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://sourceforge.net/projects/fast-code/"><img src="images/sourceforge.jpg" width="168" height="49" border="0"></a></div>
</div>
<br>  </br>

<!--==============================footer=================================-->
	<footer>
      <div class="main">
        <div class="footer-bg">
          <div class="aligncenter"> 3Pin Technology, LLC &copy; 2011<br>
            www.3pintech.com  </div>
        </div>
      </div>
    </footer>
	</body>
</html>
