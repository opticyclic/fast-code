
<!DOCTYPE html>
<html lang="en">
	<head>
		<title>FastCode-Templates</title>
		<meta charset="utf-8">
		<link rel="stylesheet" href="css/reset.css" type="text/css" media="screen">
		<link rel="stylesheet" href="css/style.css" type="text/css" media="screen">
		<link rel="stylesheet" href="css/grid.css" type="text/css" media="screen">
		<script type="text/javascript" src="js/shCore.js"></script>
		<script type="text/javascript" src="js/shAutoloader.js"></script>
		<script type="text/javascript" src="js/shBrushJava.js"></script>
		<script type="text/javascript" src="js/shBrushXml.js"></script>
		<script type="text/javascript" src="js/shBrushJScript.js"></script>
 <!--	 <script type="text/javascript" src="js/shCore.js"></script>
	 <script type="text/javascript" src="css/shBrushJScript.js"></script>-->
	 <link href="css/shCore.css" rel="stylesheet" type="text/css" />
	 <link href="css/shThemeDefault.css" rel="stylesheet" type="text/css" />

	 <!-- Finally, to actually run the highlighter, you need to include this JS on your page -->		     <script type="text/javascript">
	 SyntaxHighlighter.config.clipboardSwf = 'http://www.marchwicki.pl/blog/wp-content/plugins/syntax-highlighter-and-code-prettifier/scripts/clipboard.swf';
	 SyntaxHighlighter.all()
	 </script>
		<!--[if lt IE 7]>
		<div style=' clear: both; text-align:center; position: relative;'>
			<a href="http://windows.microsoft.com/en-US/internet-explorer/products/ie/home?ocid=ie6_countdown_bannercode">
				<img src="http://storage.ie6countdown.com/assets/100/images/banners/warning_bar_0000_us.jpg" border="0" height="42" width="820" alt="You are using an outdated browser. For a faster, safer browsing experience, upgrade for free today." />
			</a>
		</div>
		<![endif]-->
		<!--[if lt IE 9]>
			<script type="text/javascript" src="js/html5.js"></script>
		<![endif]-->
	    <style type="text/css">
<!--
.style3 {color: #000000}
.style18 {color: #0000CC}
.style23 {color: #0000CC; font-size: small; }
.style20 {color: #800000}
.style22 {color: #660000}
.style30 {color: #000000; font-weight: bold; }
.style31 {
	color: #800000;
	font-size: large;
	font-weight: bold;
}
.style33 {color: #660000; font-weight: bold; }
.style34 {font-size: 18px}
.style36 {color: #800000; font-size: 16px; font-weight: bold; }
.style37 {font-size: medium}
.style38 {color: #660000; font-size: medium; }
.style42 {color: #660000; font-size: medium; font-weight: bold; }
.style60 {font-weight: bold}
.style61 {font-weight: bold}
.style75 {font-size: medium; color: #333399; font-weight: bold; }
.style77 {font-size: medium; color: #333399; }
.style80 {font-weight: bold}
-->
        </style>
</head>
	<body id="page3">
		<div class="extra">
<!--==============================header=================================-->
			<header>
				<div class="main">
					<div class="border-top">
						<div class="wrapper">
						  <h1><img src="images/title.jpg" width="266" height="101"></h1>
							<nav>
								<ul class="menu">
									<li><a href="http://3pintech.com/index.htm">Home</a></li>
									<li><a href="http://3pintech.com/about_us.htm">About Us</a></li>
									<li><a class="active" href="http://3pintech.com/products.htm">Products</a></li>
									<li><a href="http://3pintech.com/solutions.htm">Solutions</a></li>
									<li><a href="http://3pintech.com/clients.htm">Clients</a></li>
									<li class="last-item"><a href="http://3pintech.com/contacts.htm">Contacts</a></li>
								</ul>
							</nav>
						</div>
					</div>
					<div class="slider-bg">
					  <div class="slider"></div>
					</div>
				</div>
			</header>
<!--==============================content================================-->
			<div align="right">
              <ul class="list-1">
                <li class="style23"><a href="http://sourceforge.net/projects/fast-code/files/updates/" class="style18">Fast Code Download</a> | <a href="license.htm"><span class="style18">Fast Code</span> <span class="style18">License</span></a><span class="style18"> |</span> <a href="feedbacks.htm" class="style18">Feedback</a> | <a href="http://www.youtube.com/watch?v=fxuJOvkNdL8" class="style18">3PinTalk</a></li>
              </ul>
    </div>
			<div class="ic"></div>
				<div class="main">
    <div class="container_12">
						<div class="wrapper p3">
							<h4>						    &nbsp;&nbsp;<a href="/products/" class="style18">Fast code eclipse plug-in</a></h4>
						  <div class="indent-left">
							  <div align="right">
                                <ul class="list-1">
                                  <li class="style18">
                                    <div align="left" class="style20">
                                      <div align="left"><a href="documentation.htm" class="style22">Documentation</a> | <a href="templates.htm" class="style22">Templates</a> | <a href="dbcodetemplates.htm" class="style22">Database Templates</a> | <a href="templatelist.htm" class="style22">Template List</a> |<a href="installation.htm" class="style22"> Installation </a> | <a href="troubleshooting.htm" class="style22">Trouble shooting</a> | <a href="faq.htm" class="style22">FAQ</a> | <a href="tracker.htm" class="style22">Tracker</a><span class="style20"> | </span> <a href="video.htm" class="style22">Video Tutorials</a> | <a href="spreadthenews.htm" class="style22">Spread the news</a> | <a href="features.htm" class="style22">Features</a> | <a href="discussionforum.htm" class="style22">Discussion Forum</a> | <a href="releasenotes.htm" class="style22">Release Notes</a> </div>
                                    </div>
                                  </li>
                                </ul>
						      </div>
							  <p class="style31">TEMPLATES </p>
							  <p class="style3">This part of the documentation explains the fastcode templates. This templates differs from eclipse code templates. With fastcode templates, one can select multiple fields in a class/multiple classes from a package/multiple files from a folder and can create generated code easily to configure velocity templates. One can also add new templates. Various kind of code snippets can be created with this plugin. The plugin comes with some built-in templates.</p>
							  <ul>
							    <li class="style36">
							      <p><strong><a name="stepstoinvoketemplates" id="stepstoinvoketemplates"></a></strong>The templates  can be invoked with the following steps:</p>
						        </li>
						    </ul>
							  <p class="style22"><img src="images/arrow1.jpg" width="11" height="22"><span class="style3"> Navigate to an appropriate file, e.g. if one wants to create jsp form elements, one needs to be in a jsp file or if one needs to create a spring bean definition one needs to be in a spring configuration file or if one needs to create an instance </span><span class="style3">of a class one needs to be in a java file. </span></p>
							  <p class="style22"><img src="images/arrow1.jpg" width="11" height="22"> <span class="style3">Before selecting the menu, one needs to first check the Templates Preference page, by default the values will be set as </span><span class="style80"><a href="#colorcodingtemplates" class="style3">shown</a> </span><span class="style3">and one can find how to set the values with detailed descriptions  <a href="#templatesdesc" class="style30">here</a></span><span class="style3">.</span></p>
							  <p class="style22"><span class="style3"> <img src="images/arrow1.jpg" width="11" height="22"> The preference page is defined in the <a href="templatelist/templates-config.xml" class="style30">templates-config.xml</a> file. One can also add or update templates  as required. To know more about how to use this file, please click <a href="#exportimport" class="style30">here</a></span><span class="style3">.</span></p>
							  <p class="style22"><img src="images/arrow1.jpg" width="11" height="22"><span class="style3"> Once preference page is set, one can select appropriate template by using shortcut key <strong>Ctrl-Alt-Shift-T</strong>.</span></p>
							  <p class="style22"><img src="images/arrow1.jpg" width="11" height="22"><span class="style3"> Alternatively, one can go to <strong>Fast Code -&gt;Templates</strong> at the top and select appropriate template.</span></p>
							  <p class="style22"><img src="images/arrow1.jpg" width="11" height="22"> <span class="style3">For e.g. if one selects the template &quot;<strong>create instance of a class as method</strong>&quot;. A create snippet dialog popups where one can select the class name to create the instance of a class. Once class is selected in snippet dialog, field selection dialog popups, where one can select multiple fields of a class.</span></p>
							  <p class="style3"><img src="images/arrow1.jpg" width="11" height="22"> The instance will be created at the point where the cursor is located in a java file. Here java file is where the template is invoked. To know more about different types of snippet and how to use the templates, please click <a href="#snippets" class="style30">here</a>. </p>
							  <p class="style3"><img src="images/arrow1.jpg" width="11" height="22"> By this one can easily use the templates and can update the templates as  explained <a href="#templates" class="style30">here</a>.</p>
							  <p class="style3"> One can configure some basic template features by going to <strong>Windows -&gt; Preference -&gt;Fast Code --&gt;Templates </strong>as shown in <strong>Templates</strong> preference dialog: </p>
							  <p class="style3"><img src="images/templateprefembeddedfeilds.JPG" width="917" height="768"></p>
							  <p class="style36">Basic template features can be set in Templates Preference page as follows:</p>
							  <p><img src="images/arrow1.jpg" width="11" height="22"> <a name="embedded"></a><span class="style3"><span class="style22"><strong>Show child Fields: </strong></span>One can set to view child  (parent-child hierarchy) fields in  Template page of the classes either in flat or hierarchical  view  while creating snippets as shown below:</span></p>
							  <p class="style3">In the below sample, <strong>Person</strong> is a class with 8 fields and the fields<strong> &quot;address&quot;</strong> and<strong> &quot;salary&quot;</strong> are instance of another class <strong>com.test.address </strong>and<strong> com.test.salary</strong>, the field selection view displays the fields of the class <strong>com.test.Person</strong> and also the fields of the class <strong><strong>com.test.address </strong></strong>and<strong><strong> com.test.salary</strong> </strong>in the hierarchical and flat view as shown below:</p>
							  <p class="style3"><strong>&nbsp;&nbsp;FLAT VIEW &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; HIERARCHICAL VIEW </strong></p>
							  <p><img src="images/flatview.JPG" width="350" height="554">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;<img src="images/hierarchicalview.JPG" width="350" height="554"></p>
							  <p class="style3"><strong><img src="images/arrow1.jpg" width="11" height="22"> <span class="style22">Include Package: </span></strong>One can add list of packages from which fields need to be extracted in &quot;Include package&quot; option. The fields of the classes are extracted only if package is included in<strong> Template Page, </strong>If the classes are not within the included package, then the fields will not be displayed for a class.</p>
							  <p class="style3"><strong><img src="images/arrow1.jpg" width="11" height="22"> <a name="excludepackage" id="excludepackage"></a><span class="style22">Exclude Package: </span></strong>One can exclude list of packages using exclude package option in template page. The fields in the class present with in these packages will be excluded.</p>
							  <p class="style3">In the above sample, <strong>Salary </strong> class has a field<strong> &quot;company&quot;</strong> which is instance of another class &quot; <strong>test.company&quot; </strong>and package <strong>&quot;test&quot;</strong> is set in exclude package list as shown in template preference page, then the fields of<strong> company</strong> class will not be displayed.</p>
							  <p><img src="images/arrow1.jpg" width="11" height="22"> <span class="style33">Strictly maintain getter/setter:</span> <span class="style3">Some of the templates display fields from a class. Among the fields listed there can be fields which have getter/setter and those which dont have. In case user chooses a field that does not have getter/setter, but the template chosen needs the field to have getter/setter, then such fields will be skipped. In order to handle such scenario, there is an option provided in <strong>Template</strong> page as  <strong>Striclty maintain getter/setter</strong>, If this  check box is selected, then only fields with getter/setter are displayed. In case user want all the fields to be shown irrespective of whether it has getter/setter, then they can always un-check this field in the Template page.</span></p>
							  <p><img src="images/arrow1.jpg" width="11" height="22"><strong class="style22"> Delimiter for File Template :</strong> <span class="style3">One can set the delimiter value for <strong>File templates</strong> in <strong>Templates</strong> page. This delimiter value will be used while generating code snippets with delimited data for text files.</span></p>
							  <h6 class="style31 style34"><span class="style3"><a name="templates" id="templates"></a></span>Templates:</h6>
							  <p class="style3">One can update the templates by going to <strong>Windows--&gt; Preferences--&gt;Fast Code--&gt;Templates--&gt;Templates</strong>. One can enable or disable any template from templates preference page, but to completely delete a template or insert a new template, one has to update the<strong> <a href="templatelist/templates-config.xml" class="style3">templates-config.xml</a></strong> file. One can however export the templates by using <a href="#exportimport" class="style30">Export Template</a> menu.  Once the template file is in place, one can update the templates as shown in <strong>Templates</strong> preference dialog:</p>
                              <div class="background" style="width: 1000px; height: 710px; overflow-x: scroll; border: 0; padding: 0.25px;">
			<p class="style3"><a name="colorcodingtemplates" id="colorcodingtemplates"></a><img src="images/templates.JPG" width="925" height="738">
			<img src="images/templates1.JPG" width="925" height="738">
			<img src="images/templates4.JPG" width="925" height="738">
			<img src="images/templates5.JPG" width="925" height="738"></p>
			</div>
							  <p class="style36"><span class="style3"><a name="templatesdesc" id="templatesdesc"></a></span>Detailed description of the templates preference page are as follows: </p>
							  <p class="style3"><img src="images/arrow1.jpg" width="11" height="22"> <strong>Variations:</strong> Variations can be left completely blank. In that case, only one kind of template will be possible. One can put special characters like &quot;\n&quot;, &quot;\t&quot;, &quot;t&quot; in the template body. It may be useful to  build the string by template using set command in velocity rather than straight macro. One can study the template provided for <strong>toString</strong> as an example.</p>
							  <p class="style22"><span class="style3"><img src="images/arrow1.jpg" width="11" height="22"></span> <span class="style3"><strong>Allowed File names: </strong>This option is used to set which type of files one needs to create. For eg: if it is *.java then the  template is allowed only for java files. Similarly, one can also set multiple variations for a template by checking<strong> Allow Multiple Variation</strong> option.</span></p>
							  <p class="style22"><img src="images/arrow1.jpg" width="11" height="22"> <span class="style3"><strong>Class/File/Package/Folder choice :</strong> This option denotes that a template is based on a class, file, package or folder selection. Based on these choices, the below choice will be selected. </span><span class="style3"> The preference page allows only valid options to be selected specific to  each template. One cannot select  invalid choice,  if it is invalid choice, then it prints a message  what choices needs to be selected for each choice.</span></p>
							  <p class="style22"><img src="images/arrow1.jpg" width="11" height="22"> <span class="style3"><strong>Method/Field/Class/File choice:</strong> This option is used to select methods, fields, class or file based on class to create a code snippet. </span></p>
							  <p class="style3"> If one selects  <strong>Class </strong>choice,  then one can select either <strong>Method</strong>,<strong> Field</strong> or <strong>custom</strong> choice for a class.   Similarly, if the above choice is <strong>File</strong>, then none of these options will be selected. For e.g. if one needs to just print the resource bundle, then only file can be selected.  If it is a <strong>Package</strong>, then this option will be a <strong>Class</strong> or <strong>none</strong>. If the option is <strong>Folder</strong>, then obviously the choice should be <strong>File</strong> or <strong>none</strong>.  </p>
							  <p class="style22"><img src="images/arrow1.jpg" width="11" height="22"><span class="style3"><strong> <a name="gettersetter"></a>Required Getter Setter:</strong> One  can set  getter/setter both, just getter or setter or none this will be set for variables created while creating a code snippet.</span></p>
							  <p class="style22"><img src="images/arrow1.jpg" width="11" height="22"> <strong class="style3"> </strong><strong><a name="additionalparam" id="additionalparam"></a></strong><strong class="style3">Additional Parameters: </strong><span class="style3">Additional parameters are extra variables that can be injected into a template. One can inject an arbitrary number of parameters which can be a string, class, file, package and folder  which are seperated by a space.</span></p>
							  <p class="style22"> <span class="style3"><strong>For example:</strong> If we put additional parameters as <strong>myvar myclass:class myfile:file mypackage:package myfolder:folder</strong>, where myvar is a simple string, myclass is placeholder that contains the  class, myfile is the file and mypackage is the package and myfolder is the folder. One can see  these parameters in additional parameters dialog as shown below: </span></p>
<p class="style22"><img src="images/additionalparametereg.JPG" width="682" height="309"></p>
<p class="style3">On click of myclass browse button, a class selection dialog popups where one can select the class as shown. In the same way, using browse button one can select the file, package and folder.  </p>
<p class="style22"><img src="images/additionalparameterstaticimport2.JPG" width="318" height="394"></p>
<p class="style22"><span class="style3">Similarly, another  example is shown for template &quot;<strong>Create Static String Sield And Import</strong>&quot;. One can add additional parameter  as<strong> targetClass:class fieldName value</strong></span><span class="style3"> which are seperated by a space. Additional parameters comes as an extra dialog while creating  snippets.</span></p>
<p class="style22"><img src="images/additionalparameterstaticimport.JPG" width="682" height="218"></p>
                              <p class="style3">The template shown below is defined in <a href="templatelist/templates-config.xml" class="style30">templates-config.xml</a> file. </p>
                              <p class="style22"><img src="images/additionalparameterstaticimport1.JPG" width="960" height="232"><span class="style3">The static string field for the above e.g. is created as shown:</span></p>
                              <pre class="brush: java;">
import static com.test.Person.FIRSTNAME;
public class Car {
	public static final String FIRSTNAME = "xyz";
}
</pre>
                              <p class="style22"><img src="images/arrow1.jpg" width="11" height="22"> <span class="style3"><strong>Template body :</strong> The most important item is the template body which is a velocity template. Also useful is the variation which can be used to generate various kind of templates. If there are variations present, it is expected that the template body can have branching condition as shown below:</span></p>
                              <pre class="brush: java;">
	// Creating new instance of ${class.name}
	final ${class.name} ${class.defaultInstance} = new ${class.name}();
	#foreach ($field in ${fields})
		${class.defaultInstance}.${field.setter}(${field.value});
	#end
</pre>
					        <p class="style3"><span class="style22"><img src="images/arrow1.jpg" width="11" height="22"> <strong class="style3">Number of required classes:</strong> </span>This option denotes the number of fields needed from one class for a template. </p>
					        <p class="style3"><img src="images/arrow1.jpg" width="11" height="22"> A default placeholder is created to hold the variation and it is <strong>_template_variation</strong>. As one can see, one can check against various values for this variable. Name of this variation variable is configurable. In the fast-code.properties file in the jar file there is a property called <strong>default.template.variation.field.name</strong> which can be changed to any other value. Typically, one does not need to do that.			                </p>
					        <p class="style3"><img src="images/arrow1.jpg" width="11" height="22"> Special variables are always available as  <strong>enclosing_file </strong>and<strong> enclosing_class</strong> for example  <strong>${enclosing_class.name</strong>} and <strong>${enclosing_file.name}.</strong></p>
					        <p class="style3">All the built in templates can be viewed or downloaded from <a href="templatelist/templates-config.xml">here</a>.</p>
					        <p class="style30">The template can be a arbitrary velocity template with the following variables : </p>
					        <ul>
					          <li class="style3"><img src="images/arrow1.jpg" width="11" height="22"><strong> Class:</strong> Class has several attributes like:</li>
					          <li class="style3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src="images/arrow1.jpg" width="11" height="22"><strong> ${class.name} </strong>is the name of class selected.</li>
					          <li class="style3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src="images/arrow1.jpg" width="11" height="22"><strong> ${class.fullyQualifiedName}</span></strong><strong> </strong>is the name of fully qualified class name.</li>
					          <li class="style3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src="images/arrow1.jpg" width="11" height="22"><strong> ${from_class}</strong> and <strong>${to_class}</strong> where two classes are needed as in dozer mapping file or copy between two classes.</li>
				              <li class="style3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src="images/arrow1.jpg" width="11" height="22"><strong> ${class.defaultInstance}</strong> is the default instance which will have the class name in lower case.</li>
				              <li class="style3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src="images/arrow1.jpg" width="11" height="22"><strong> ${class.defaultConstructor}</strong> is the default constructor.</li>
				              <li class="style3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src="images/arrow1.jpg" width="11" height="22"><strong> ${class.package.name}</strong> is  the package name of the class.</li>
			                </ul>
					        <ul>
					          <li class="style3"><img src="images/arrow1.jpg" width="11" height="22"><strong> Fields:</strong> Fields has several attributes like: </li>
					          <li class="style3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src="images/arrow1.jpg" width="11" height="22"><strong> ${fields} </strong>is  list of fields selected where each element can be accessed as <strong>${field}</strong>. </li>
					          <li class="style3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src="images/arrow1.jpg" width="11" height="22"><strong>${field}</strong> is the type of the element within <strong>${fields}</strong>. Each has the attributes <strong>name</strong>, <strong>fullName</strong>, <strong>value</strong>, <strong>getter</strong>, <strong>setter</strong>, <strong>type</strong>. It also has a computed attribute &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;called <strong>nameAsWord</strong> which converts the name to a word, e.g. firstName will become First Name. These attributes can be accessed by <strong>${field.name}, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;${field.type.name}, ${field.nameAsWord}</strong>,  etc in the loop as shown below in one example. The fullName is the full name of the field e.g. if a class has a field &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;named x and which has field named y then <strong>${field.name}</strong>, is just where the <strong>${field.fullName}</strong> will be x.y. This is only relevant if x is a composite object i.e. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;not a simple field like String or int. When it is expected to have one field, then a variable named field will be available as <strong>${field}</strong>. All private fields will be &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;available unless it is configured to exclude certain fields. To do so, one needs to modify the property exclude.fields.from.snippets in fast-code.properties file in &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;the plugin jar file. A line containing the property item is already there, one just needs to uncomment it and put appropriate value. Typically, there are fields like &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;createUser, updateUser, etc which are typically not needed in jsp or java files. This will reduce quite bit of clutter.</li>
				            </ul>
					        <ul>
                              <li class="style3"><img src="images/arrow1.jpg" width="11" height="22"><strong> File:</strong> File has attributes as follows:</li>
					          <li class="style3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src="images/arrow1.jpg" width="11" height="22"><strong> ${files} </strong>is  list of files selected where each file can be accessed as<strong> ${file}.</strong></li>
				              <li class="style3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src="images/arrow1.jpg" width="11" height="22"><strong> ${file}</strong> is the type of the element within <strong>${files}</strong>.</li>
				              <li class="style3"><img src="images/arrow1.jpg" width="11" height="22"><strong> Folder:</strong> Folder variable is used to specify the folder. One can use<strong>  ${folder.fullPath},<strong> ${folder.name}</strong></strong> to get  the attributes of the folder.</li>
					          <li class="style3"> </li>
					          <li class="style3"><img src="images/arrow1.jpg" width="11" height="22"><strong> Instance:</strong> <strong>${instance}</strong> is used to hold the instance name while creating snippet.</li>
				              <li class="style3"><img src="images/arrow1.jpg" width="11" height="22"> <strong>Class Header:</strong> <strong>${class_header}</strong> is the name/value to represent class headers.</li>
					          <li class="style3"><img src="images/arrow1.jpg" width="11" height="22"> <strong>Package: </strong>Package  is the placeholder used to specify the package.  The attributes <strong>${package.name}</strong>, <strong>${package.javaProject}</strong>  are used to get the package name and the project within that package.</li>
					        </ul>
					        <ul><li class="style36"><p>&nbsp;</p>
					          </li>
				            </ul>
					        <p class="style36"><span class="style3"><a name="fctags" id="fctags"></a></span>In  templates, some special tags can be put for java files. The list of special tags are as follows:</p>
					        <table width="897" class="color3" border="1" bordercolor="#303030">
                              <tr>
                                <td width="132" valign="top" class="tablebord" style="background-color:#E0E0E0"><div align="center"><span class="style75">Special Tags </span> </div></td>
                                <td width="191" valign="top" class="tablebord" style="background-color:#E0E0E0"><div align="center"><span class="style75">Attributes</span></div></td>
                                <td width="148" valign="top" class="tablebord" style="background-color:#E0E0E0"><div align="center"><span class="style75">Content </span></div></td>
                                <td width="396" valign="top" class="tablebord" style="background-color:#E0E0E0"><div align="center"><span class="style75">Usage</span> </div></td>
                              </tr>
    <tr>
      <td class="tablebord" width="132" valign="top"> &nbsp;<a href="#fcimport" class="style30">FC import</a></td>
      <td class="tablebord" width="191" valign="top"><span class="style3">&nbsp;NA</span>  </td>
      <td class="tablebord" width="148" valign="top"><span class="style3">&nbsp;Fully qualified class</span></td>
      <td width="396" valign="top" class="tablebord style3"><p class="style3">&nbsp;&lt;fc:import&gt;<br>
        &nbsp;${field.type.fullyQualifiedName}<br>
        &nbsp;&lt;/fc:import&gt;</p>
        </td>
      </tr>
  <tr>
    <td width="132" height="34" valign="top" class="tablebord">&nbsp;<a href="#fcmethod" class="style30">FC method</a></td>
    <td width="191" valign="top" class="tablebord style3">&nbsp;name (method name)<br>
      &nbsp;target (optional)</td>
    <td class="tablebord" width="148" valign="top"><p class="style3">&nbsp;Complete source body<br>
&nbsp;fc:import</p>
      </td>
    <td width="396" valign="top" class="tablebord style3"><p>&nbsp;&lt;fc:method name=&quot;create${class.name}&quot; &nbsp;target=&quot;${targetClass.fullyQualifiedName}&quot;&gt; <br>
      &nbsp;/* Complete Source body */<br>
      &nbsp;&lt;fc:import&gt;${field.type.fullyQualifiedName}&lt;/fc:import&gt; <br>
      &nbsp;&lt;/fc:method&gt;</p>
      </td>
    </tr>
  <tr>
    <td class="tablebord" width="132" valign="top">&nbsp;<a href="#fcclass" class="style30">FC class</a></td>
   <td class="tablebord" width="191" valign="top"><p class="style3">&nbsp;type (class or interface type) <br>
     &nbsp;name (classname) <br>
     &nbsp;package (packagename) <br>
     &nbsp;project (optional)</p>
     </td>
    <td width="148" valign="top" class="tablebord style3">&nbsp;Complete source body</td>
    <td width="396" valign="top" class="tablebord style3">&nbsp;&lt;fc:class type=&quot;class&quot; name=&quot;${className}&quot; &nbsp;package=&quot;${package.name}&quot; project=&quot;${package.javaProject}&quot;&gt;<br>
&nbsp;/* Complete Source body */<br>
&nbsp;&lt;/fc:class&gt;</td>
    </tr>
  <tr>
    <td class="tablebord" width="132" valign="top">&nbsp;<a href="#fcfield" class="style30">FC field</a></td>
    <td class="tablebord" width="191" valign="top"><span class="style3">&nbsp;name (field name) </span></td>
    <td width="148" valign="top" class="tablebord style3">&nbsp;Complete code for field  </td>
    <td width="396" valign="top" class="tablebord style3">&nbsp;&lt;fc:field name=&quot;${class.defaultInstance}&quot;&gt;<br>
&nbsp;/* complete code for field */<br>
&nbsp;&lt;/fc:field&gt;</td>
    </tr>
  <tr>
    <td class="tablebord" width="132" valign="top">&nbsp;<a href="#fcfile" class="style30">FC file</a></td>
    <td class="tablebord" width="191" valign="top"><p class="style3">&nbsp;dir (file dir)</p>
      <p class="style3">&nbsp;name (file name)  </p></td>
    <td width="148" valign="top" class="tablebord style3">&nbsp;File Content </td>
    <td width="396" valign="top" class="tablebord style3">&nbsp;&lt;fc:file dir=&quot;folder.fullpath&quot; name=&quot;fileName&quot;&gt;<br>
&nbsp;/* File content */<br>
&nbsp;&lt;/fc:file&gt; </td>
    </tr>
  <tr>
    <td class="tablebord" width="132" valign="top">&nbsp;<a href="#fcxml" class="style30">FC xml</a></td>
    <td class="tablebord" width="191" valign="top"><p class="style3">&nbsp;parent (entity) <br>
      &nbsp;node (named-query)<br>
      &nbsp;target (optional)</p>
      </td>
    <td width="148" valign="top" class="tablebord style3">&nbsp;<span class="style3">Complete source body</span></td>
    <td width="396" valign="top" class="tablebord style3">&nbsp;&lt;fc:xml parent=&quot;entity-mappings&quot; node=&quot;&nbsp;named-query&quot; &nbsp;target=&quot;${target}&quot;&gt;<br>
&nbsp;/* Complete Source body */<br>
&nbsp;&lt;/fc:xml&gt;</td>
    </tr>
  <tr>
    <td class="tablebord" width="132" valign="top">&nbsp;<a href="#fcmessage" class="style30">FC message</a></td>
    <td width="191" valign="top" class="tablebord style3"><span class="style3">&nbsp;title (message title)</span></td>
    <td width="148" valign="top" class="tablebord style3">&nbsp;Message Body</td>
    <td width="396" valign="top" class="tablebord style3">&nbsp;&lt;fc:message title=&quot;title&quot;&gt;<br>
&nbsp;/* message body */<br>
&nbsp;&lt;/fc:message&gt;</td>
    </tr>
  <tr>
    <td class="tablebord" width="132" valign="top">&nbsp;<a href="#fcexit" class="style30">FC exit</a></td>
    <td width="191" valign="top" class="tablebord style3"><span class="style3">&nbsp;NA</span></td>
    <td width="148" valign="top" class="tablebord style3">&nbsp;NA</td>
    <td width="396" valign="top" class="tablebord style3">&nbsp;&lt;fc:exit&gt;&lt;/fc:exit&gt;</td>
    </tr>
                            </table>
					        <p>&nbsp;</p>
					        <p align="left" class="style3"><span class="style33"><img src="images/arrow1.jpg" width="11" height="28"> <a name="fcimport" id="fcimport"></a>FC import: </span>Fc:import tag can be used to import a class into the enclosing java class. The target is fully qualified class. Fc:import can be used within <strong>&lt;fc:method&gt;</strong> tag. </p>
					        <pre class="brush: java;">
	<fc:import>${field.type.fullyQualifiedName}</fc:import>
                            </pre>
                            <p class="style3"><strong>Example:</strong> One can create <strong>fc:import </strong>tags as shown  below:</p>
                            <pre class="brush: java;">
	<fc:import>org.apache.log4j.Logger</fc:import>
                            </pre>
                            <p class="style3"><span class="style22"><strong><strong><span class="style33"><img src="images/arrow1.jpg" width="11" height="28"></span> <a name="fcmethod" id="fcmethod"></a>FC method:</strong></strong></span><span class="style22"><strong><strong> </strong></strong></span>Fc:method is used to create a method within the enclosing java class. For fc:method, name(method name) is  mandatory and if target is present then the method will be created in target class else the method is created from where the template is invoked. So target is optional. Fc:import tag can be used within the fc:method tag.</p>
                            <pre class="brush: java;">
	<fc:method name="method name" target="com.test.util.PersonUtil"> // method name is mandatory and target is optional
		/*
	 	* Complete Source body
	 	*
		*/
	<fc:import>com.test.util.PersonUtil#method name</fc:import>
    </fc:method>
</pre>
                            <p class="style3"><span class="style22"><strong><strong><span class="style33"><img src="images/arrow1.jpg" width="11" height="28"></span><a name="fcclass" id="fcclass"></a> FC class: </strong></strong></span>FC class is used to create a class for a given package and project selected. The class type can be class or interface. </p>
                            <pre class="brush: java;">
	<fc:class type="class" name="className" package="package name" project="project name">
	// class type can be class or interface, name and package are mandatory.  Project is optional.
		/*
 		* Complete Source body
 		*
 		*/
	</fc:class>
</pre>
                            <p class="style3"><span class="style22"><strong><span class="style33"><img src="images/arrow1.jpg" width="11" height="28"></span> <a name="fcfield" id="fcfield"></a>FC field: </strong></span>Fc:field tag is used to create a field within the enclosing java class. </p>
<pre class="brush: java;">
	<fc:field name="field name"> /*here field name is mandatory for one to create a field*/
		/*
	    *complete code for field
	    */
	</fc:field>
</pre>
                            <p class="style3"><strong>Example:</strong> Logger field can be created using  <strong>fc:field name </strong>tags while printing a class:</p>
                            <pre class="brush: java;">
	<fc:field name="logger">private static final Logger logger = Logger.getLogger(${enclosing_class.name}.class);</fc:field>
                            </pre>
                            <span class="style3"><span class="style22"><strong><strong><span class="style33"><img src="images/arrow1.jpg" width="11" height="28"></span><a name="fcfile" id="fcfile"></a> FC file: </strong></strong></span>FC file tag is used to create  a file in the specified </span><span class="style3">dir and one can specify file name, full source path,  file description to create a file within the enclosing java class.</span>
                            </p>
                            <pre class="brush: java;">
	<fc:file dir="folder.fullpath" name="fileName">
		// file is full folder path. Here both dir and filenames are mandatory.
		/*
 		* File content
 		*
 		*/
	</fc:file>
                            </pre>
                            <p class="style3"><strong><strong><span class="style3"><span class="style33"><img src="images/arrow1.jpg" width="11" height="28"></span><a name="fcxml" id="fcxml"></a></span> <span class="style22">FC xml:</span> </strong></strong></span><span class="style3">FC xml tag is used to generate an xml files for a given entity in specified target. </span></p>

<pre class="brush: java;">
	<fc:xml parent="entity"  node="named-query" target="Sample/src/xml/Person.xml">
		/*parent is the entity-mappings, node is the named-query and target is the xml file */
	  	/*
 	  	* Complete Source body
 	  	*
 	  	*/
   </fc:xml>
</pre>
                            <p class="brush: java;"><span class="style22"><strong><strong><span class="style3"><span class="style33"><img src="images/arrow1.jpg" width="11" height="28"></span><a name="fcmessage" id="fcmessage"></a></span> FC message:</strong></strong></span> <span class="style3">FC message tag is used to create a message within the enclosing java class.</span></p>
<pre class="brush: java;">
	<fc:message title="title">
 		/*
		*message body
		*/
	 </fc:message>
	 <fc:exit></fc:exit>
</pre>
                            <p class="style3"><span class="style22"><strong><strong><span class="style33"><img src="images/arrow1.jpg" width="11" height="28"></span><a name="fcexit" id="fcexit"></a> FC exit: </strong></strong></span>FC exit tag can be used to exit within an enclosing java class.</p>
                            <pre class="brush: java;">
<fc:exit></fc:exit>
                            </pre>
                            <p>&nbsp;</p>
					        <p><span class="style30"><span class="style3"><img src="images/arrow1.jpg" width="11" height="22"></span> <span class="style38"><span class="style37"><a name="snippets" id="snippets"></a></span>Snippets: </span></span><span class="style3">A  snippet files can be created using fastcode plugin which provides easy way to implement commonly used code.   Just type <strong>Ctrl-Alt-Shift-T</strong> and select appropriate templates or by going into <strong>Fast Code -&gt;Templates</strong>.</span></p>
					        <h4 class="style42 style37"> One can create the following types of snippets:</h4>
<table width="925" class="color3" border="2" bordercolor="#333399">
              <tr>
                <td class="tablebord" style="background-color:#E0E0E0" valign="top"><p align="center" class="style42"><span class="style37"><a name="class"></a></span><span class="style77">Class/Field based templates</span></p>                </td>
                <td class="tablebord" style="background-color:#E0E0E0" valign="top"><p align="center" class="style42"><span class="style3"><a name="method"></a></span><span class="style77">Class/Method based templates</span></p>                </td>
                <td class="tablebord" style="background-color:#E0E0E0" valign="top"><p align="center" class="style42"><span class="style3"><a name="file"></a></span><span class="style77">File based Templates</span></p>                </td>
                <td class="tablebord" style="background-color:#E0E0E0" valign="top"><p align="center" class="style42"><span class="style3"><a name="package" id="package"></a></span><span class="style77">Package based templates</span></p>                </td>
                <td class="tablebord" style="background-color:#E0E0E0" valign="top"><p align="center" class="style42"><span class="style3"><a name="folder" id="folder"></a></span><span class="style77">Folder based templates</span></p>                </td>
              </tr>
              <tr>
                <td class="tablebord" width="182" valign="top"><a href="#instanceclass" class="style30">Create instance of a class</a></td>
                <td class="tablebord" width="195" valign="top"><strong><span class="style3"><a href="#snippetmethod" class="style3">Create snippet from method</a></span></strong></td>
                <td class="style3 style4" width="161" valign="top"><strong><a href="#snippetfile" class="style3">Create New simple Snippet with File</a></strong></td>
                <td class="tablebord" width="184" valign="top"><a href="#createinstanceclasses" class="style30">Create Intances of classes</a></td>
                <td class="tablebord" width="169" valign="top"><a href="#createinstanceclasses" class="style3"></a> <a href="#createfileinclude" class="style30">Create File and Include</a></td>
              </tr>
  <tr><td class="tablebord" valign="top"><a href="#extractfields" class="style30">Extract fields from a class into variables</a></td>
      <td class="tablebord" valign="top"><span class="style60"><a href="#delegatemethod" class="style3">Delegate Method</a></strong></span></td>
      <td class="tablebord"  valign="top"><strong><a href="#printresource" class="style3">Print Resource Bundle</a></strong></td>
	  <td class="tablebord" width="184" valign="top"><strong><a href="#createimpl" class="style3">Create Impl</a></strong></td>
	  <td class="tablebord" width="169" valign="top"><a href="#multiplefiles" class="style30">Multiple Files</a></td>
  </tr>
  <tr><td class="tablebord" valign="top"><a href="#print" class="style30">Print fields of a class</a></td>
      <td class="tablebord"  valign="top"><strong></strong></td>
	  <td class="tablebord" width="161" valign="top"><a href="#includefiles" class="style3"><strong>Include Files</strong></a> </td>
	  <td class="tablebord" width="184" valign="top"><a href="#multipleclass" class="style30">Create Multiple class</a></td>
	  <td class="tablebord" width="169" valign="top"><a href="#multipleclass" class="style3"></a> </td>
  </tr>
  <tr>
    <td height="30" valign="top" class="tablebord"><span class="style61"><a href="#instanceclassmethod" class="style3">Create instance of a class as method</a><a href="#snippetmethod" class="style3"></a></span></td>
        <td class="tablebord" width="161" valign="top"><a href="#jsonfromfiles" class="style30"></a> </td>
	  <td class="tablebord" width="184" valign="top"><a href="#jsonfromfiles" class="style30">Json from class as file</a><a href="#multipleinterface" class="style30"></a></td>
	  <td class="tablebord" width="169" valign="top"><a href="#multipleinterface" class="style3"></a> <a href="#multipleinterface" class="style30">Create Multiple interfaces</a></td>
	   <td class="tablebord" width="169" valign="top"><a href="#multipleinterface" class="style3"></a> <a href="#multipleinterface" class="style30"></a></td>
  </tr>
  <tr>
    <td class="tablebord" valign="top"><span class="style30"><a href="#stringmethod" class="style3">Create to String method</a></span>
    <td class="tablebord" valign="top"><strong><a href="#springbeanfile" class="style3"></a></strong><strong><a href="#springbeanfile" class="style3"><span class="style61"></a></strong></td>
    <td class="tablebord" width="184" valign="top"><strong><a href="#springbeanfile" class="style3">Spring Bean as File</a><a href="#multipleabstract" class="style3"></a></strong></td>
    <td class="tablebord"  width="169" valign="top"><strong><a href="#multipleabstract" class="style3">Create Multiple abstract classes</a></strong></td>
	    <td class="tablebord"  width="169" valign="top"><strong><a href="#multipleabstract" class="style3"></a></strong></td>
  </tr>
  <tr>
    <td class="tablebord" valign="top"><span class="style30"><a href="#copyclass" class="style3">Methods to copy fields of one class to another</a></span>
    <td class="tablebord" valign="top">&nbsp;</td>
    <td class="tablebord" valign="top"><a href="#multiplefiles" class="style30"></a></td>
    <td class="tablebord" valign="top"><a href="#multipleexception" class="style30">Create Multiple exception classes</a></td>
    <td class="tablebord" valign="top"><p>&nbsp;</p>      </td>
  </tr>
  <tr>
    <td class="tablebord" valign="top"><a href="#springbean" class="style30">Create a spring bean</a>
    <td class="tablebord" valign="top">&nbsp;</td>
    <td class="tablebord" valign="top">&nbsp;</td>
    <td class="tablebord" valign="top"><a href="#multipleruntime" class="style30">Create Multiple Runtime exception classes</a></td>
    <td class="tablebord" valign="top"><p>&nbsp;</p>      </td>
  </tr>
  <tr>
    <td class="tablebord" valign="top"><a href="#jsfbean" class="style30">Create a JSF managed bean</a>
    <td class="tablebord" valign="top">&nbsp;</td>
    <td class="tablebord" valign="top">&nbsp;</td>
    <td class="tablebord" valign="top"><a href="#copyclasses" class="style3"><strong>Copy Classes</strong></a></td>
    <td class="tablebord" valign="top"><p>&nbsp;</p>      </td>
  </tr>
  <tr>
    <td class="tablebord" valign="top"><a href="#dozerclass" class="style30">Create dozer mapping between two classes</a>
    <td class="tablebord" valign="top">&nbsp;</td>
    <td class="tablebord" valign="top">&nbsp;</td>
    <td class="tablebord" valign="top"><a href="#instancegenericdao" class="style30">Create Instance of generic Dao</a></td>
    <td class="tablebord" valign="top"><p>&nbsp;</p>      </td>
  </tr>
  <tr>
    <td class="tablebord" valign="top"><a href="#jsonfromclass" class="style30">Json from Class</a>
    <td class="tablebord" valign="top">&nbsp;</td>
    <td class="tablebord" valign="top">&nbsp;</td>
    <td class="tablebord" valign="top"></td>
    <td class="tablebord" valign="top"><p>&nbsp;</p>      </td>
  </tr>
  <tr>
    <td class="tablebord" valign="top"><a href="#struts" class="style30">Create Struts validation</a>
    <td class="tablebord" valign="top">&nbsp;</td>
    <td class="tablebord" valign="top">&nbsp;</td>
    <td class="tablebord" valign="top"></td>
    <td class="tablebord" valign="top"><p>&nbsp;</p>      </td>
  </tr>
  <tr>
    <td class="tablebord" valign="top"><a href="#classweb" class="style30">Create instance of a class web</a>
    <td class="tablebord" valign="top">&nbsp;</td>
    <td class="tablebord" valign="top">&nbsp;</td>
    <td class="tablebord" valign="top"></td>
    <td class="tablebord" valign="top"></td>
  </tr>
  <tr>
    <td class="tablebord" valign="top"><a href="#simpleclasssnippet" class="style30">Simple Class Snippet</a>
    <td class="tablebord" valign="top">&nbsp;</td>
    <td class="tablebord" valign="top">&nbsp;</td>
    <td class="tablebord" valign="top"></td>
    <td class="tablebord" valign="top"></td>
  </tr>
  <tr>
    <td class="tablebord" valign="top"><a href="#struts" class="style30">Create Struts validation</a>
    <td class="tablebord" valign="top">&nbsp;</td>
    <td class="tablebord" valign="top">&nbsp;</td>
    <td class="tablebord" valign="top"></td>
    <td class="tablebord" valign="top"></td>
  </tr>
  <tr>
    <td class="tablebord" valign="top"><a href="#classweb" class="style30">Create instance of a class web</a>
    <td class="tablebord" valign="top">&nbsp;</td>
    <td class="tablebord" valign="top">&nbsp;</td>
    <td class="tablebord" valign="top"></td>
    <td class="tablebord" valign="top"></td>
  </tr>
  <tr>
    <td class="tablebord" valign="top"><a href="#snippetfield" class="style30"></a>
      <a href="#struts" class="style30">Create Struts validation</a>
    <td class="tablebord" valign="top">&nbsp;</td>
    <td class="tablebord" valign="top">&nbsp;</td>
    <td class="tablebord" valign="top"></td>
    <td class="tablebord" valign="top"></td>
  </tr>
  <tr>
    <td class="tablebord" valign="top"><a href="#struts" class="style30"></a>
      <a href="#exportimport" class="style30">Export/Import Templates</a>
    <td class="tablebord" valign="top">&nbsp;</td>
    <td class="tablebord" valign="top">&nbsp;</td>
    <td class="tablebord" valign="top"></td>
    <td class="tablebord" valign="top"><p>&nbsp;</p>      </td>
  </tr>
  <tr>
    <td class="tablebord" valign="top"><a href="#exportimport" class="style30"></a>
      <a href="#createresourcebundle" class="style30">Create New Resource Bundle</a>
    <td class="tablebord" valign="top">&nbsp;</td>
    <td class="tablebord" valign="top">&nbsp;</td>
    <td class="tablebord" valign="top"></td>
    <td class="tablebord" valign="top"><p>&nbsp;</p>      </td>
  </tr>
  <tr>
    <td valign="top" class="tablebord style3"><a href="#createresourcebundle" class="style30"></a>
      <a href="#createhql" class="style30">Create HQL</a>
    <td class="tablebord" valign="top">&nbsp;</td>
    <td class="tablebord" valign="top">&nbsp;</td>
    <td class="tablebord" valign="top">&nbsp;</td>
    <td class="tablebord" valign="top">&nbsp;</td>
  </tr>
            </table>

					        <p>&nbsp;&nbsp;</p>
					        <h6 align="justify" class="style33"><img src="images/arrow1.jpg" width="11" height="22"> <a name="instanceclass"></a>CREATE INSTANCE OF A CLASS &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</h6>
					        <p class="style3">One can create an instance of a java bean. To select create instance of class one can click  the menu or type <strong>Ctl-Alt-Shift-T </strong>which will show create snippet dialog menu.   To appreciate the use of it, let us consider a case where one has to create an instance of a java bean with some twenty fields as shown below.</p>
					        <p class="style3"><img src="images/instanceofclass.JPG" width="724" height="657"></p>
					        <p class="style3">Below sample shows the snippet code generated:</p>
					        <pre class="brush: java;">

	public void someMethod() {
		// following instance of PersonVo can be created with the plugin
		// Creating new instance of Person
		final Person person = new Person();
		person.setBirthDate(null);
		person.setFirstName(null);
		person.setGender(null);
		person.setLastName(null);
		person.setPersonId(0);
		person.setTitle(null);
		// so on with twenty other fields.
	}
</pre>

<p class="style3">&nbsp;</p>
<h6 class="style33"><img src="images/arrow1.jpg" width="11" height="22"> <a name="extractfields"></a>EXTRACT FIELDS OF A CLASS</h6>
<p class="style3">One can extract fields of class as well. To do this, please select extract fields of a class from the menu or by typing <strong>Ctl-Alt-Shift-T</strong> and select extract fields of a class option. As before, if you select a class <strong>Person,</strong> it will create a snippet as shown below:</p>
<pre class="brush: java;">
	// plugin can create the following lines to extract fields out of person
	final String firstName = person.getFirstName();
	final String lastName = person.getLastName();
	final Date birthDate = person.getBirthDate();
	final String gender = person.getGender();
	final Integer personId = person.getPersonId();
	final Car car = person.getCar();
	final String color = person.getCar().getColor();
	final String model = person.getCar().getModel();
	final String fuel = person.getCar().getFuel();
	final String engineno = person.getCar().getEngineNo();
</pre>
<p class="style3">As one can see it will extract the fields from the class through their getter methods and assign the type of it automatically. </p>
<h6 class="style33"><img src="images/arrow1.jpg" width="11" height="22"> <a name="instanceclassmethod"></a>CREATE INSTANCE OF A CLASS AS METHOD</h6>
<p class="style3">One can also create an instance of a class as method.</p>
<p class="style3"><img src="images/instanceofclassasmethod.JPG" width="727" height="659"></p>
<p class="style3">This template shows how an fc tag can be used to create a method:</p>
<pre class="brush: java;">
	<fc:method name="create${class.name}" target="com.test.util.PersonUtil">
	<fc:import>${class.fullyQualifiedName}</fc:import>
	// It will create a method in target file PersonUtil
	/**
	* This will create an instance of ${class.name}
	*
	#foreach ($field in ${fields})
	* @parm ${field.type}
	#end
	* @return
	*
	*/
	public static ${class.name} create${class.name}
	(#foreach ($field in ${fields}) ${field.type} ${field.name}
		#if (${velocityCount} < ${fields.size()}),#end #end) {
	final ${class.name} ${class.defaultInstance} = new ${class.name}();
	#foreach ($field in ${fields})
		<fc:import>${field.type.fullyQualifiedName}</fc:import>
		${class.defaultInstance}.${field.setter}(${field.name});
	#end
	return ${class.defaultInstance};
	}
	</fc:method>
</pre>

<p class="style3">Further variations can be used to this template to enhance fc:method tag </p>

<img src="images/fcmethodtag.JPG">
<p class="style3">&nbsp;</p>
<p class="style3">This plugin makes it very easy to generate codes like this. To invoke one can either go to the top menu and select appropriate template or type <strong>Ctl-Alt-Shift-T</strong> and select instance of class template type. This option allows one to create code snippets to create an instance of a class with setters with multiple fields from the class. It will first open the type dialog (same dialog as you get with <strong>Ctl-Shift-T</strong> in eclipse) and once one selects a java bean class, it will prompt one with the fields within the class as shown below. Once one selects the fields it will able to generate code snippet as shown above. It is also possible to generate instance using the builder pattern as described by Martin Fowler in <a href="http://www.martinfowler.com/bliki/FluentInterface.html">here</a>. The details is not described here. It has been very well explained in this <a href="http://www.marchwicki.pl/blog/2010/11/building-a-pojo-in-an-elegant-way/">blog</a>. </p>
<p class="style3"><span class="style3">The velocity template that is needed for the snippet is shown below as an example. For the subsequent snippet types the velocity macro will not be shown but one can always see it in the configuration. </span><br>
			                </p>
					        <pre class="brush: java;">
	// ## Warning this is a velocity template
	// ## So Do not include '//' at the begining of lines
	// ## One can keep the ## which is a comment in velocity.
	// ## This line below will create the instance of the class.
	final ${class_name} ${instance} = new ${class_name}();
	// ## The loop below will iterate through the fields selected and
	// ## put the corresponding setter methods.
	#foreach (${field} in ${fields})
		${instance}.${field.setter}(null);
	#end
</pre>

					        <p class="style3">The <strong>PersonUtil</strong> fields can be selected using the field selection dialog as shown: </p>
					        <p class="style3"><img src="images/select-fields.JPG" width="347" height="440"></p>
					        <p class="style3">Once fields are selected for a class, one can specifiy the targetclass to create instance of a class as method which comes as an additional parameters as shown:</p>
					        <p class="style3"><img src="images/instanceofclassasmethod1.JPG" width="682" height="173"></p>
                            <span class="style3">The below snippet is generated for class <strong>PersonUtil</strong> in target class <strong>StringUtil</strong>.</span>
<pre class="brush: java;">
	public static PersonUtil createPersonUtil( final int personId   final String[] firstName   final String[] lastName   final Date birthDate   final String gender   final CarUtil carutil   final String color   final String model   final String fuel  ) {
		final PersonUtil personUtil = new PersonUtil();
		personUtil.setPersonId(personId);
			personUtil.setFirstName(firstName);
			personUtil.setLastName(lastName);
			personUtil.setBirthDate(birthDate);
			personUtil.setGender(gender);
			personUtil.setCarutil(carutil);
			personUtil.getCarutil().setColor(color);
			personUtil.getCarutil().setModel(model);
			personUtil.getCarutil().setFuel(fuel);
			return personUtil;
	}
</pre>
					        <h6 class="style22"><img src="images/arrow1.jpg" width="11" height="22"> <a name="print"></a>PRINT FIELDS OF A CLASS</h6>
					        <p class="style3">One example of a template is the print fields of a class. To use it, just type <strong>Ctl-Alt-Shift-T</strong> from inside any mehtod of a class. A dialog box as shown will appear and choose Print fields of Class from there. </p>
					        <p><img src="images/print_fields_of_class.JPG" width="724" height="657"><br>
                            </p>
					        <p class="style3">One can select any one of the variations, e.g logger.debug and select a class e.g. Person. At this point, a list dialog with all the fields will appear as shown below. </p>
					        <p><img src="images/print_fields_of_class_fieldsel.JPG" width="328" height="387"></p>
					        <p class="style3">One can select a few fields from there and it will generate the following code : </p>
<pre class="brush: java;">
	if (logger.isDebugEnabled()) {
		logger.debug("Person Id " + person.getPersonId());
		logger.debug("First Name " + person.getFirstName());
		logger.debug("Last Name " + person.getLastName());
		logger.debug("Birth Date " + person.getBirthDate());
		logger.debug("Gender " + person.getGender());
		logger.debug("Car " + person.getCar());
		logger.debug("Color " + person.getCar().getColor());
		logger.debug("Model " + person.getCar().getModel());
		logger.debug("Fuel " + person.getCar().getFuel());
		logger.debug("Engine No " + person.getCar().getEngineNo());
	}
</pre>

				            <p class="style3">One can include  tags <strong>fc:import</strong> and   <strong>fc:field name</strong>     while printing a logger class and logger field as shown below:</p>
<pre class="brush: java;">
	<fc:import>org.apache.log4j.Logger</fc:import>
</pre>
<pre class="brush: java;">
    <fc:field name="logger">private static final Logger logger = Logger.getLogger(${enclosing_class.name}.class);</fc:field>
</pre></pre>
				            <p><span class="style3">			                As one can see it can convert the field names to english words such as firstName to First Name, dateOfBirth to Date Of Birth, etc. This is also useful in generating the toString method. The built-in toString generator in eclipse will only print the field name as it is. </span><br>
			                </p>
				            <h6 class="style22"><strong><img src="images/arrow1.jpg" width="11" height="22"> <a name="printjsp"></a>PRINT FIELDS OF A CLASS IN A JSP</strong></h6>
				            <p class="style3">Printing fields in a jsp or xhtml can be very painstaking. This plugin makes this easy as well. For this one needs to select the <strong>Print Fields of</strong> <strong>Class Web</strong> option. </p>
				            <pre class="brush: xml;">&lt;!-- The following jsp snippet can be generated by the plugin --&gt;

&lt;table align="center" &gt;</font>
	&lt;tr&gt;
		&lt;td align="right" align="top"&gt;
			&lt;bean:message bundle="personVo" key="firstName"/&gt; :
		&lt;/td&gt;
		&lt;td align="right" valign="top"&gt;
			&lt;html:text name="personVo" property="firstName" size="10"/&gt;
		&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td align="right" valign="top"&gt;
			&lt;bean:message bundle="personVo" key="lastName"/&gt; :
		&lt;/td&gt;
		&lt;td align="right" valign="top"&gt;
			&lt;html:text name="personVo" property="lastName" size="10"/&gt;
		&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;

</pre>
				            <p class="style3">Now to generate the display element for another field which will be different type, (e.g. title which will be a select box) one needs to invoke <strong>Print Fields of Class Web Single</strong> option. To repeat the process for several fields, one can use the Last Snippet Action from the Fast Code menu from top or better yet use <strong>Ctl-Alt-Shift-L</strong> shortcut. The snippet is generated in html table format, one can change it to other format if one wishes. The label has been generated with standard <strong>&lt;bean:message&gt;</strong> tag. If one likes, one can use the more direct way :  <strong>&lt;td align=&quot;right&quot; valign=&quot;top&quot;&gt;${field.makeWord()} : &lt;/td&gt;</strong>. By default struts tags and jsf tags are provided. One remove the some of them or add new ones.</p>
				            <h6 class="style22"><img src="images/arrow1.jpg" width="11" height="22"> <a name="stringmethod" id="stringmethod"></a>TO STRING METHOD </h6>
				            <p class="style3">One example of a template is to create a string method of a class. To use it, just type <strong>Ctl-Alt-Shift-T</strong> from inside any mehtod of a class. A dialog box as shown will appear and choose ToString Method from there. </p>
				            <h6 class="style33"><img src="images/tostringmethod.JPG" width="724" height="716"></h6>
				            <p class="style33">&nbsp;</p>
				            <p class="style3">It converts the methods in a java file into string for the methods selected as shown in below sample:.</p>
<pre class="brush: java;">
	/**
	 * toString method for Car
	 *
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		final StringBuilder sb = new StringBuilder();
		sb.append("Color :  " + this.color == null ? "" : this.color).append(
				"Engine No :  " + this.engineNo == null ? "" : this.engineNo);
		return "Car [" + sb.toString() + "]";
	}
</pre>
				            <h6 class="style22"><strong><img src="images/arrow1.jpg" width="11" height="22"> <a name="classweb"></a>CREATE INSTANCE OF A CLASS WEB</strong></h6>
						    <p class="style3">This plugin can create instance of class in a file in the web tier e.g jsp, js files etc. If one select PersonVo as the class it can create a snippet as show below which are usually useful in a javasctipt fiels to make ajax calls with frameworks such as DWR. <br>
				            </p>
<pre class="brush: java;">
	var personVo =  new  Object();
	personVo.firstName = firstname;
	personVo.lastName = lastname;
	personVo.title = title;
	personVo.dateOfBirth = dateOfBirth;
	// so on with more fields
</pre>

			    <p class="style3">							      If one selects jsp:useBean as the variation, it will create the following snippet : </p>
<pre class="brush: xml;">
 	&lt;jsp:useBean id="personVo" scope="page" class="com.test.vo.PersonVo"&gt;
		&lt;jsp:setProperty name="personVo" property="firstName" value=""/&gt;
		&lt;jsp:setProperty name="personVo" property="lastName" value="" /&gt;
		&lt;jsp:setProperty name="personVo" property="title" value="" /&gt;
		&lt;jsp:setProperty name="personVo" property="dateOfBirth" value="" /&gt;
	&lt;/jsp:useBean&gt;
</pre>

						    <p class="style3">It can form elements with fields of a class in the ExtJs format as well. The following snippet will be produced if you select all the fields from the PersonVo class as before.</p>
						    <pre class="brush: js; ruler: true;">
	{
		xtype : 'textfield',
		fieldLabel : 'First Name',
		name : 'firstName'
	},   {
		xtype : 'textfield',
		fieldLabel : 'Last Name',
		name : 'lastName'
	},   {
		xtype : 'datefield',
		fieldLabel : 'Date Of Birth,
		name : 'dateOfBirth'
	} // so on with more fields
</pre>

						    <h6>&nbsp;</h6>
						    <h6 class="style33"><img src="images/arrow1.jpg" width="11" height="22"> <a name="simpleclasssnippet" id="simpleclasssnippet"></a>SIMPLE CLASS SNIPPET</h6>
						    <p class="style3">Sometimes, one just needs to create simple snippets of a class. Using this menu, one can easily  create a code template to create a class snippet like below. To do this, just use shortcut  <strong>Ctrl-Alt-Shift-Y</strong>. Once invoked, it will popup the below snippet dialog. A class snippet will be created when appropriate template variations and class is selected.</p>

                            <h6 class="style33"><img src="images/simpleclasssnippet.JPG" width="724" height="716"></h6>
						    <p class="style3">nbsp;</p>
						    <p class="style3">If one selects template variation &quot;<strong>class-name</strong>&quot; as the variation, it will create a simple snippet for the class-name provided in snippet dialog. Similarly, for variation &quot;<strong>fully-qualified-class-name</strong>&quot;, it creates snippet with the fully qualified class name as &quot;<strong>com.test.Person</strong>&quot;.</p>
						    <p class="style3">If one selects  template variation &quot;<strong>field-name</strong>&quot;, it will create a snippet for the fields of a class. A field selection dialog popups where one can select the field of the class. The user can select a single field and it will place the full name of   the field at the point where the cursor is located. Similary the user   can create code templates for other kinds of fields, e.g. <strong>html:radio, html:select, html:checkbox,</strong> etc. </p>
						    <p class="style3">One can select a single method of a class using template variation &quot;<strong>method-name</strong>&quot;. When  method is selected using method selection dialog, it will place the full name of   the method at the point where the cursor is located.</p>
						    <p class="style3">One can get all the Jsp code templates for struts and other web frameworks from <span class="style3"><strong><a href="http://3pintech.com/products/fast-code/templatelist.htm">here</a>.</strong></span> </p>
						    <p class="style3">&lt;!-- One can generate the familiar html:text with a regular code templates in eclipse.
Then use the plugin to fill in the value for the property attribute--&gt;
&lt;html:text size="10" name="myFormBean" property="${cursor}" maxlength="10"/&gt;</p>


<pre class="brush: java;">
// It is not just the form elements in jsp, it can easily create see tag in javadocs as
// shown below.

/**
 *
 * @see com.abc.test.class
 */
</pre>

<pre class="brush: xml;">		<!-- inside a web.xml -->
		<!-- The listener class can be put here by this plugin.-->
		&lt;listener&gt;
			&lt;listener-class&gt;
				org.springframework.web.context.ContextLoaderListener
			&lt;/listener-class&gt;
		&lt;/listener&gt;


		<!-- Or inside a struts-config.xml -->
		<!-- The action class can be put here by this plugin.-->

	    &lt;action path="/somepath" type="com.abc.web.action.SomeAction" name="someBean" scope="request"&gt;
		&lt;/action&gt;
 </pre>

						    <h6 class="style22"><strong><img src="images/arrow1.jpg" width="11" height="22"> <a name="snippetfile"></a>SIMPLE SNIPPET WITH FILE</strong></h6>
						    <p class="style3">Similarly, simple snippets are provided with files. WIth his option one can easilly create classpath elements. A direct shortcut is available for this as well and it is <strong>Ctrl-Alt-Shift-Z</strong>. To use this, just type <strong>Ctrl-Alt-Shift-Z</strong>, a file dialog will come up, when the user selects a file, it will put the file name or path in the editor. This feature can be used wherever a file name is needed and where the ide does not provide auto complete. Examples can be generating context-param in web.xml, or placing javascript file in a jsp, or putting a jsp file inside &lt;jsp:include /&gt;, etc.</p>
						    <p class="style3">The template body for action is ${file.name}.</p>
<pre class="brush: xml;">		<!-- inside a web.xml -->
		&lt;context-param&gt;
		&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
			&lt;param-value&gt;
				/WEB-INF/classes/foo-service.xml    <!-- This file can be placed here with this plugin -->
				/WEB-INF/classes/bar-service.xml
			&lt;/param-value&gt;
		&lt;/context-param&gt;
</pre>

<pre class="brush: xml;">	<!-- inside a jsp -->
	<!-- The js file can be placed here with this plugin -->
	&lt;SCRIPT type= "text/javascript"src="/scripts/foo.js"&gt;&lt;/SCRIPT&gt;

	<!-- similar an included jsp can be easily generated with the help of this plugin -->
	&lt;jsp:include page="some.jsp" /&gt;
</pre>

<pre class="brush: xml;">	<!-- name of the resource file can be put inside a spring configuration file.-->
	&lt;beans&gt;
		&lt;import resource="resources/someresource.xml"/&gt;
	&lt;/beans&gt;
</pre>

						    <h6 class="style3">&nbsp;</h6>
						    <h6 class="style33"><span class="style22"><img src="images/arrow1.jpg" width="11" height="22"> <a name="createresourcebundle" id="createresourcebundle"></a></span>CREATE RESOURCE BUNDLE</h6>
						    <p class="style3">One can also create resource bundle for the fields of a class. For this  one has to be in the properties file and execute the create resource bundle option.</p>
<pre class="brush: xml;">
				# Resource Bundle for ${class.fullyQualifiedName}\n
				#foreach ($field in ${fields})
					${prefix}.${field.name} = ${field.nameAsWord}
				#end
</pre>
						    <h6 class="style22"><img src="images/arrow1.jpg" width="11" height="22"> <a name="printresource"></a>PRINT RESOURCE BUNDLE</h6>
						    <p class="style3">One can print a key from resource bundle without switching to the resource file. This is very convenient as one can see and use the key from the specified resource bundle from a jsp file. To do this, just select the <strong>print resource bundle</strong> option and select the resource file from the file selection dialog. It will then show the list keys contained in the file. For convenience, keys are shown first the key = value is shown. This helps to search for the key one wants.</p>
                            <pre class="brush: xml;">	<!-- Name of the resource bundle key can be put inside a jsp.-->
	&lt;bean:message bundle="somebundle" key="label.property"/&gt;
</pre>
						    <h6>&nbsp;</h6>
						    <h6 class="style22"><img src="images/arrow1.jpg" width="11" height="22"> <a name="copyclass"></a>COPY CLASS</h6>
						    <p class="style3">Sometime one wants to write a copy method which will copy the properties of one java bean to another. This plugin helps one do that also easily. Unlike other template options, this will require two classes for obvious reason. If the two classes and the fields have been selected it will create the following method :</p>
<pre class="brush: java;">
	 /**
	  * This method copies fields from PersonVo to PersonDto
	  * @param personVo
	  * @param personDto
	  *
	  */
	  public void copyPersonVoToPersonDto(final PersonVo personVo, final PersonDto personDto) {

		personDto.setFirstName(personVo.getFirstName());
		personDto.setLastName(personVo.getLastName());
		personDto.setTitle(personVo.getTitle());
		personDto.setDateOfBirth(personVo.getDateOfBirth());
		// and so on with twenty other fields.
	  }
</pre>

					       <p class="style3"> The field selection dialog will come once as it expect the field name in one class will be the same in the other class. If one wants to copy fields with different name e.g. field foo in PersonVo to field bar in PersonDto one needs to select the <strong>Copy Class Single</strong> option which will show two field selection dialogs, one for the from_class and the other one for the to_class. </p>
						    <h6 class="style22"><img src="images/arrow1.jpg" width="11" height="22"> <a name="dozerclass"></a>DOZER MAPPING BETWEEN CLASSES</h6>
						    <p class="style3">Dozer mapping can be created easily between two classes. Two classes are required for this option and one needs to be in the dozer mapping file before executing this option. Once the two classes have been selected, it will open the field selection dialog once with fields which are same in both classes. To map fields of different name one needs to select <strong>dozer mapping single</strong> option where two fields selection dialog will open and one can select the from_field first and the to_field next. An example of the mapping generated is shown below.</p>
                            <pre class="brush: xml;">
	&lt;mapping&gt;
		&lt;class-a&gt;com.test.vo.PersonVo&lt;class-a&gt;
		&lt;class-b&gt;com.test.dto.PersonDto&lt;class-b&gt;
			&lt;field&gt;
				&lt;a&gt;firstName&lt;/a&gt;
				&lt;b&gt;firstName&lt;/b&gt;
			&lt;/field&gt;
			&lt;field&gt;
				&lt;a&gt;lastName&lt;/a&gt;
				&lt;b&gt;lasttName&lt;/b&gt;
			&lt;field&gt;
	&lt;mapping&gt;
</pre>
						    <h6>&nbsp;</h6>
						    <h6 class="style22"><img src="images/arrow1.jpg" width="11" height="22"> <a name="struts"></a>STRUTS VALIDATION</h6>
						    <p class="style3">One can create struts validation snippets as well. If one selects <strong>PersonForm</strong> class and the firstName and lastName property, a validaion snippet will be generated if validation types of <strong>required</strong>, <strong>minlength</strong> and <strong>maxlength</strong> are chosen as shown below.  </p>
						    <p class="style3">Unlike other templates this one lets one choose multiple variations. To have this feature, one needs to check the <strong>allow multiple variation checkbox</strong> in the configuration. To make it work, one needs to be in the validation file and place the cursor at appropriate place.</p>
<pre class="brush: xml;">
	&lt;form name="personForm"&gt;
		&lt;field property="firstName" depends="required, minlength, maxlength"&gt;

			&lt;arg1 name="minlength" key="${var:minlength}" resource="false"/&gt;
			&lt;arg1 name="maxlength" key="${var:maxlength}" resource="false" /&gt;
			&lt;var&gt;
				&lt;var-name&gt;minlength&lt;/var-name&gt;
				&lt;var-value&gt;1&lt;/var-value&gt;
			&lt;/var&gt;
			&lt;var&gt;
				&lt;var-name&gt;maxlength&lt;/var-name&gt;
				&lt;var-value&gt;10&lt;/var-value&gt;
			&lt;/var&gt;
		&lt;/field&gt;
		&lt;field property="lastName" depends="required, minlength, maxlength"&gt;
			&lt;arg1 name="minlength" key="${var:minlength}" resource="false" /&gt;
			&lt;arg1 name="maxlength" key="${var:maxlength}" resource="false" /&gt;
			&lt;var&gt;
				&lt;var-name&gt;minlength&lt;/var-name&gt;
				&lt;var-value&gt;1&lt;/var-value&gt;
			&lt;/var&gt;
			&lt;var&gt;
				&lt;var-name&gt;maxlength&lt;/var-name&gt;
				&lt;var-value&gt;10&lt;/var-value&gt;
			&lt;/var&gt;
		&lt;/field&gt;
	&lt;/form&gt;
</pre>
						    <p class="style3"> One still needs to change the values of var-name minlength and maxlength according to one's requirement, but one can see that it generated a chunk of code. Also notice that it does not create the <strong>&lt;formset&gt; </strong>tag or the <strong>&lt;form-validation&gt;</strong> tag. One needs to create them manually or by some other code templates. </p>
						    <p class="style3">If one needs to create validation snippet for another field with different type (e.g dateOfBirth which will have validation type date), one should invoke the Struts Validation Single option as shown above. For this also one needs to place the cursor on an empty line after the last element and execute this option with appropriate field name and validation type. If one needs to create the validation snippet repeatedly for many fields, one can invoke the Last Snippet Action or by using keyboard shortcuts (<strong>Ctl-Alt-Shift-L</strong>). This saves the user finding the class and goes the fields selection dialog directly.</p>
						    <p><span class="style3">It is also possible to create xwork (struts2) validation style snippets as well. This is, however, not included in the jar file. But one can download the templates from <a href="templatelist/templates-config.xml">here</a> and uncomment the struts2 validation part.</span><br>
						    </p>
						    <h6 class="style22"><img src="images/arrow1.jpg" width="11" height="22"> <a name="springbean"></a>SPRING BEAN</h6>
						    <p class="style3"> One can create spring bean definition. For this one needs to select the <strong>Create New Spring Bean </strong>option .</p>
						    <p><img src="images/spring-bean.jpg" width="575" height="374"></p>
						    <p class="style3">After selecting the Spring Bean option, one needs to select the template variations for bean type injections as shown below.</p>
						    <p><img src="images/createspringbeandialog.JPG" width="724" height="648"></p>
						    <p class="style3">Once the appropriate template variation and class is selected, a spring bean definition will be created. Below one such bean definition is shown for Person with setter injection variation. </p>
<pre class="brush: xml;">
&lt;bean id="person" class="com.test.Person"&gt;
	&lt;property name="addressDAO" ref="addressDAO" /&gt;
&lt;/bean&gt;
</pre>
<span class="style3">One can select as many fields within the class Person, but the it will not check if bean definitions exist for those fields. Also the id attribute will be Person, but one would probably want to change it to person. Simliarly, it will generate bean definition for constructor injection as shown below.
</pre>
</span>
<pre class="brush: xml;">
	&lt;bean id="person" class="com.test.Person"&gt;
		&lt;constructor-arg index="0"&gt;
			&lt;ref bean="addressDAO" /&gt;
		&lt;/constructor-arg&gt;
	&lt;/bean&gt;
</pre>
						    <p class="style3">						      One thing to note it will not check if the constructor actually exists or the order in which the parameters would appear. </p>
						    <h6 class="style22"><img src="images/arrow1.jpg" width="11" height="22"> <a name="jsfbean"></a>JSF MANAGED BEAN</h6>
						    <p class="style3">One can create JSF managed bean by selecting the appropriate option of same name. One needs to open the faces-config.xml file into an editor before executing this option. An example is shown below where SomeBean is a managed bean which contains SomeOtherBean which is another managed bean. This plugin will not verify the managed bean definition exists for SomeOtherBean, one needs to create the managed bean definition for SomeOtherBean manually.</p>
<pre class="brush: xml;">
	&lt;managed-bean&gt;
		&lt;managed-bean-name&gt;SomeBean&lt;/managed-bean-name&gt;
		&lt;managed-bean-class&gt;com.test.bean.SomeBean&lt;/managed-bean-class&gt;
		&lt;managed-property&gt;
			&lt;property-name&gt;SomeOtherBean&lt;/property-name&gt;
			&lt;value&gt;#{SomeOtherBean}&lt;/value&gt;
		&lt;/managed-property&gt;
	&lt;managed-bean&gt;
</pre>
						    <h6>&nbsp;</h6>
						    <h6 class="style22"><img src="images/arrow1.jpg" width="11" height="22"> <a name="createhql"></a>CREATE HQL</h6>
						    <p class="style3">Most of the snippets are created within one file. However, it has the ability to generate one snippet in one file and another in a different file at the same time. This is useful in the case of hql  in hibernate where a named query is created in a xml file, and the code to invoke the named query is needed in the java class. To do this one needs to select one of the hql s<strong>elect/update/delete</strong> options and when the snippet dialog come up one need to select the named query option.
					          <span class="style3">With this option, it will prompt one for the location of the named query file for the first time. If the file is there and it is a valid xml file with proper tags, it will ask if the user wants to create a new query or use an existing query.</span></p>
						    <p class="style3"><span class="style3"> The snippet is contained in the  </span><a href="templatelist/templates-config.xml">templates-config.xml</a><span class="style3"> file. The hql query will be contained in the <a href="templatelist/additional-templates-config.xml">additional-templates-config.xml</a> file. The template with type hql.select.format is used for the hql select. Similarly type<strong> hql.update.format</strong> is used for the hql update. For hql select there are three kinds of fields : <strong>selected_fields</strong> are the ones to use in the select part of the hql, where_fields are used in the where condition and <strong>join_fields</strong> are use for the<strong> joined fields</strong>. Similarly, for update hqls there is <strong>update_fields</strong> and <strong>where_fields</strong> . It is possible to use existing named query or create named query as shown in the picture below. </span></p>
						    <p class="style3">The special logic for hql is hard coded in the program, it is not possible to configure it except for the templates. It is, however, possible to remove the variation dialog altogether. If one is interested only in creating named queries only, one can edit the file fast-code.properties in the resources folder and put </p>
						    <p><span class="style3">•hql.variation.default=named-query <br>
						      The line is already there, one just needs to uncomment it.  It is also necessary to leave variation and variation field fields blank. In this case no variations dialog will appear and it will directly do the named query instead. It is to be noted that the query it generates will not be ready to use. You need make sure all the names are distinct and you may have to change some of them manually. </span><br>
						    </p>
						    <h6>&nbsp;</h6>
						    <h6 class="style22"><img src="images/arrow1.jpg" width="11" height="22"><a name="springbeanfile" id="springbeanfile"></a> SPRING BEAN AS A FILE </h6>
						    <p class="style3">This plugin can create spring bean of a class in a file. If one select Car as the class it can create a new snippet file using <strong>fc:file</strong> tag in file dir &quot;Sample/src/xml&quot; and one can set the xml file name for a class in <a href="templatelist/templates-config.xml" class="style30">templates-config.xml</a> file. Once appropriate template variation and class is selected, a spring   bean definition will be created in a xml file. Below one such bean definition is shown   for Car with embeded-setter injection variation. </p>
                            <pre class="brush: xml;">
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">
	<bean id="car" parent="parent">
		<property name="target">
			<bean class="com.test.Car">
				<property name="color" ref="color" />
				<property name="model" ref="model" />
				<property name="fuel" ref="fuel" />
				<property name="engineNo" ref="engineNo" />
			</bean>
		</property>
	</bean>
</beans>

</pre>
						    <p>&nbsp;</p>
						    <h6 class="style22"><img src="images/arrow1.jpg" width="11" height="22"> <a name="delegatemethod"></a>DELEGATE METHOD </h6>
						    <p class="style3">This menu is used to create instance of the class selected and a delegate  method with the method selected. Delegate method contains the target object along with the method to be invoked. </p>

                            <p><img src="images/delegatemethod.JPG" width="737" height="708"></p>
							<p><img src="images/delegatemethod1.JPG" width="741" height="442"></p>
<pre class="brush: xml;">
	/**
	 *
	 * @return
	 */
	@Override
	public String getFirstName() {
		String getFirstName = person.getFirstName();
		return getFirstName;
	}
</pre>
	    <p>&nbsp;</p>
						    <h6 class="style22"><img src="images/arrow1.jpg" width="11" height="22"> <a name="createinstanceclasses"></a>CREATE INSTANCE OF CLASSES</h6>
						    <p class="style3">One can create instance of classes of the given names in the specified package. To use this menu, <span dir="ltr" id=":118"> just type <strong>Ctrl-Alt-Shift-T</strong></span>. </p>
						    <p class="style3"><img src="images/instanceofclasses.JPG" width="729" height="716"></p>
						    <h6 class="style22"><img src="images/instanceofclasses1.JPG" width="676" height="388"></h6>
						    <p class="style22">&nbsp;</p>
						    <p class="style3">The code generated below shows how an instance is created for classes<strong> Person, Salary</strong> and<strong> Address</strong>.</p>
                            <pre class="brush: xml;">
	@Resource
			private Address address;
	@Resource
			private Person person;
	@Resource
			private Salary salary;
</pre>
<h6 class="style22">&nbsp;</h6>
<h6 class="style22"><img src="images/arrow1.jpg" width="11" height="22"> <a name="createimpl"></a>CREATE IMPL</h6>
<p class="style3">One can create  implementation of  interfaces. To do this, just use shortcut key <strong>Ctrl-Alt-Shift-T</strong> which will  show  snippet dialog where one can select the package. Once package is selected, one needs to give the instance of the class name. A class selection dialog popups, where one  can select multiple classes to  create implementation.</p>
<p class="style3">The template shows how one can create Implementation of interfaces using fc:class tag. Sometimes, the interfaces are not located in the same package as the implementing class, so import is used in the templates to import the interfaces. @Service annotation is used to tell the spring which beans should be managed and how they can be connected with the implementation class.</p>
<pre class="brush: java;">
					<fc:class name="${class.name}Impl" package="${class.package.name}.impl" project="${class.package.javaProject}">
						${class_header}
						import ${class.fullyQualifiedName}; //Imports the fully qualified name for eg: com.test.Person
						import org.springframework.stereotype.Service;
						import ${InstanceOfClass.fullyQualifiedName}; //Imports the fully qualified name of instance class
						@Service
						public class ${class.name}Impl implements ${class.name}{
							private ${InstanceOfClass.name} ${InstanceOfClass.defaultInstance};
						}
					</fc:class>
</pre>
						    <h6 class="style22">&nbsp;</h6>
						    <h6 class="style22">&nbsp;</h6>
						    <h6 class="style22"><img src="images/arrow1.jpg" width="11" height="22"> <a name="multipleclass"></a>CREATE MULTIPLE CLASS</h6>
						    <p class="style3">One can create multiple classes of the given names in the specified package. To do this, <span dir="ltr" id=":118"> just type <strong>Ctrl-Alt-Shift-T</strong></span>. Multiple class names can be provided seperated by a space and even the suffix can be provided to the classes as dao, impl, service, etc as shown. :</p>
						    <p class="style3"><img src="images/createmultipleclass.JPG" width="337" height="180"></p>
						    <p class="style3"><img src="images/createmultipleclass1.JPG" width="675" height="448"></p>
						    <h6 class="style22"><img src="images/arrow1.jpg" width="11" height="22"> <a name="multipleinterface"></a>CREATE MULTIPLE INTERFACE</h6>
						    <p class="style3">Using this option, one can create multiple interface files of the given file names in the specified package. One  can also provide suffix to the interface files to be created as shown. To use this menu, one needs to use shortcut key  <strong>Ctrl-Alt-Shift-T</strong>.</p>
						    <p class="style3"><img src="images/createmultipleinterface.JPG" width="356" height="180"> </p>
						    <h6 class="style22"><img src="images/createmultipleinterface1.JPG" width="675" height="442"></h6>
						    <p class="style22">&nbsp;</p>
						    <h6 class="style22"><img src="images/arrow1.jpg" width="11" height="22"> <a name="multipleabstract"></a>CREATE MULTIPLE ABSTRACT CLASSES</h6>
						    <p class="style3">One can create multiple abstract classes of the given names in the specified package. To do this, <span dir="ltr" id=":118"> just type <strong>Ctrl-Alt-Shift-T</strong>, which will show create snippet dialog menu. Once Package is selected, one needs to provide the class names seperated by space in additional paramters dialog as shown</span>:</p>
						    <p class="style3"><img src="images/createabstractclasses.JPG" width="339" height="158"></p>
						    <p class="style3">The class names will then be  prefixed as <strong>&quot;Abstract&quot;</strong> for all the classes as shown in the selection dialog. Here one has the option to select the classes to create abstract class, only the selected classes will be created. </p>
						    <h6 class="style22"><img src="images/createabstractclasses1.JPG" width="675" height="443"></h6>
						    <h6 class="style22">&nbsp;</h6>
						    <h6 class="style22"><img src="images/arrow1.jpg" width="11" height="22"> <a name="multipleexception"></a>CREATE MULTIPLE EXCEPTION  CLASSES</h6>
						    <p class="style3">Multiple exception classes can be created using this menu. To do this, <span dir="ltr" id=":118"> just type  <strong>Ctrl-Alt-Shift-T</strong> which will show create snippet dialog menu. Once Package is selected, one needs to provide the class names seperated by space in additional paramters dialog. The exception   </span>classes will be created which extends <strong>Exception</strong> of the given names in the specified package.</p>
						    <p class="style3">The following example shows how a <strong> CarException</strong> class is generated using fc:class tag:</p>
                            <pre class="brush: java;">
public class CarException extends Exception {
	/**
		 *
		 */
	public CarException() {
		super();
	}

	/**
	 *
	 * @param message
	 */
	public CarException(final String message) {
		super(message);
	}

	/**
	 *
	 * @param message
	 * @param throwable
	 */
	public CarException(final String message, final Throwable cause) {
		super(message, cause);
	}

	/**
	 *
	 * @param throwable
	 */
	public CarException(final Throwable cause) {
		super(cause);
	}
}
</pre>
						    <h6 class="style22">&nbsp;</h6>
						    <h6 class="style22"><img src="images/arrow1.jpg" width="11" height="22"> <a name="multipleruntime"></a>CREATE MULTIPLE RUNTIME EXCEPTION CLASSES</h6>
						    <p class="style3">One can generate multiple runtime exception classes which extends <strong>RuntimeException</strong> of the given names in the specified package. To  use this menu, <span dir="ltr" id=":118"> just type <strong>Ctrl-Alt-Shift-T</strong></span>.</p>
						    <p class="style3">The following example shows how <strong>PersonException</strong> class which extends  runtime exception is generated for <strong>Person</strong> class using <strong>fc:class</strong> tag:</p>
                            <pre class="brush: java;">
public class PersonException extends RuntimeException {
	/**
		 *
		 */
	public PersonException() {
		super();
	}

	/**
	 *
	 * @param message
	 */
	public PersonException(final String message) {
		super(message);
	}

	/**
	 *
	 * @param message
	 * @param throwable
	 */
	public PersonException(final String message, final Throwable cause) {
		super(message, cause);
	}

	/**
	 *
	 * @param throwable
	 */
	public PersonException(final Throwable cause) {
		super(cause);
	}
}
</pre>
						    <h6 class="style22"><img src="images/arrow1.jpg" width="11" height="22"> <a name="copyclasses"></a>COPY CLASSES</h6>
						    <p class="style3">One can copy multiple classes at a time from one package to another  package.  At the sametime, this menu also helps to change the suffixes of the classnames to to specified suffix names of the classes while copying as shown below: </p>
						    <p class="style3"><img src="images/copyclasses.JPG" width="698" height="220"></p>
						    <p class="style3">In below sample, classes <strong>Customerdao</strong>, <strong>CustomerDetailsdao</strong>, <strong>Orderdao</strong> are selected, a dialog appears to select the elements from the tree where the classnames are changed to given suffix as <strong>&quot;domain&quot;</strong>  and also ask for the source path for the classes to be created. </p>
						    <p class="style3"><img src="images/copyclasses1.JPG" width="945" height="384"></p>

						    <h6 class="style22"><img src="images/arrow1.jpg" width="11" height="22"> <a name="snippetmethod"></a>CREATE SNIPPET FROM METHOD</h6>
						    <p class="style3">This menu is used to create code snippet from the attributes of a method. A sample template with all the available place holders for this menu, is present in the <a href="templatelist/templates-config.xml" class="style30">template-config.xml</a>. Below is the list of place holders: <br>
						      •<strong>Method return Type</strong> -- ${method.returnType.name}<br>
•<strong>Method Annotations </strong>-- ${method.annotations}<br>
						      •<strong>Annotations</strong> -- ${annot.type.name}<br>
						      •<strong>Annotation Parameter </strong>-- ${annot.parameterList}<br>
						      •<strong>Exceptions</strong> -- ${method.exceptions}<br>
					        •<strong>Method Parameters</strong> -- ${method.parameters}</p>
						    <p><img src="images/method-snippet-menu.JPG" width="750" height="495">  </p>
						    <p class="style3"> Below snippet dialog shows  how a snippet with method can be created. Class and file selection can be done using browse button as shown or by selecting in dropdown or even one can write the class name directly in the text box. </p>
						    <h6><img src="images/popupsclassfile.JPG" width="763" height="657"></h6>
						    <h6>&nbsp;	</h6>
						    <h6 class="style22"><img src="images/arrow1.jpg" width="11" height="22"> <a name="instancegenericdao" id="instancegenericdao"></a>CREATE INSTANCE OF GENERIC DAO </h6>
						    <p class="style3">This menu is used to generate instance for generic dao class. One can select a package and select  classes in the package to create  instance of generic dao as follows:</p>
                            <h6><img src="images/genericdao.JPG" width="936" height="34"></h6>
                            <h6 class="style22">&nbsp;</h6>
                            <p class="style22"><img src="images/arrow1.jpg" width="11" height="22"> <a name="jsonfromclass" id="jsonfromclass"></a><strong>JSON FROM CLASS</strong></p>
                            <p class="style3">One can create JSON from a class in json or js files. One can update the JSON templates by going to <strong>Windows--&gt; Preference--&gt;Fast  Code--&gt;Templates--&gt;Templates</strong>. This plugin can create instance of a class in the JSON format. If one selects JSON FROM CLASS, it will create JSON formatted snippet. </p>
						    <p class="style3">The following example shows the JSON representation of a class that describes a <strong>Person</strong> class. The person class has string fields for personId, firstname, lastname, birthdate etc and contains an object representing the person's <strong>car</strong>.</p>
                            <pre class="brush: js; ruler: true;" >
{
  " personId " :  0,
  " firstName " :  "",
  " lastName " :  "",
  " birthDate " :  null,
  " gender " :  "",
  " companyName " :  "",
  " car " :  {
 	 " color " :  "",
 	 " model " :  "",
 	 " fuel " :  "",
 	 " engineNo " :  "" }
 }
</pre>
                            <p class="style22">&nbsp;</p>
                            <h6 class="style22"><img src="images/arrow1.jpg" width="11" height="22"> <a name="jsonfromfiles" id="jsonfromfiles"></a>JSON FROM CLASS AS FILE </h6>
                            <p class="style3">This menu can create JSON from a class in a file in the  web tier e.g jsp, js files etc. One can update the Json templates by going to <strong>Windows--&gt; Preference--&gt;Fast  Code--&gt;Templates--&gt;Templates</strong>.  In template body, one can set the source path  and the filename to create the Json class. </p>
<pre class="brush: java;">
	<fc:file dir="Sample/src/jsp" name="PersonJson.js">
	/*file dir is the complete source path and name holds the js or jsp file name */
	/**
	*Source body
	**/
	</fc:file>
</pre>

						    <p class="style3"><br>
						    To use JSON from class, just type <strong>Ctl-Alt-Shift-T</strong> from inside any js or jsp file. A dialog box as shown  will appear and choose JSON FROM CLASS AS FILE from there.</p>
							<h6><img src="images/jsonfromclassfile.JPG" width="724" height="714"></h6>
						    <p class="style3">&nbsp;</p>
						    <p class="style3">The following example shows the JSON representation of a class that describes a <strong>Person</strong> class. The Person class has string fields for firstname, lastname, birthdate, personId, etc and contains an object representing the person's <strong>car</strong>.</p>
					<h6><img src="images/jsonfromclassfile1.JPG" width="350" height="518"></h6>
					<p class="style3">The fields are selected from field selection dialog which  is displayed in a hierarchical structure.  It generates the following JSON  format in <strong>PersonJson.js</strong> file as  shown below: </p>
                    <pre class="brush: java;">
"personId" :  0,
"firstName" :  "",
"lastName" :  "",
"birthDate" :  null,
"gender" :  "",
"companyName" :  "",
"car" :  {
	"color" :  "",
	"model" :  "",
	"fuel" :  "",
	"engineNo" :  "" }
 }
</pre>

						    <h6>&nbsp;</h6>
						    <h6 class="style22"><img src="images/arrow1.jpg" width="11" height="22"> <a name="multiplefiles" id="multiplefiles">/a>MULTIPLE FILES</h6>
						    <p class="style3">This menu has the ability to create multiple files  in the selected folder at a time. One can also provide the file type/extention (.java, .jsp, .js, etc) while creating the files as shown below:</p>
						    <h6><img src="images/multiplefiles.JPG" width="330" height="179"></h6>
						    <p class="style3">&nbsp;</p>
						    <p class="style3">One can update content of the files by updating the  templates as shown below:</p>
<pre class="brush: java;">
<fc:file dir="Sample/src/jsp/" name="Sample1.jsp">
	/*
	**File content*
	*/
</fc:file>
#end
</pre>
						    <p class="style3">&nbsp;</p>
						    <p><img src="images/arrow1.jpg" width="11" height="22"> <a name="includefiles" id="includefiles"></a><span class="style33">INCLUDE FILES </span></p>
						    <p class="style3">One can select a folder and can include any number of files (js, jsp, css and img files) they want to include with this template as shown in below sample where <strong>Person.jsp</strong> and <strong>car.jsp</strong> files are included in Sample.jsp file.</p>



<pre class="brush: java;">
	<jsp:include page="Sample/src/jsp/Person.jsp" flush="true"/></jsp:include>
	<jsp:include page="Sample/src/jsp/Car.jsp" flush="true"/></jsp:include>
</pre>
						    <p>&nbsp;</p>
						    <p><img src="images/arrow1.jpg" width="11" height="22"> <a name="createfileinclude" id="createfileinclude"></a><span class="style33">CREATE FILE AND INCLUDE</span></p>
						    <p class="style3">This menu is used w<span dir="ltr" id=":11a">hile working with a jsp/html file. For   example, one can create a file and include this file  in the file one is  working with.</span> They<span dir="ltr" id=":118"> can change the template to include js or jsp or any other file. To do this, just use shortcut  <strong>Ctrl-Alt-Shift-T</strong>. Once invoked, it will popup the snippet dialog where one can select the project to create a file. Below is an example to create a js file and include it</span>:</p>
						    <p class="style3">Once the project is selected, an additional parameters dialog popups where one needs to  provide the  <strong>filename.extention</strong> as shown. Here one needs to give the extention as to create a specified  file type as js,jsp or html file as required.  For  example, <strong>Person.js</strong> is the file which needs to be created, once the filename is provided, it creates the file in the specified folder and place the javascript to include this <strong>Person.js</strong> file in the file from where you are working with.</p>
						    <h6><img src="images/create_file_include1.JPG" width="323" height="156"></h6>
                            <p>&nbsp;</p>
<h6><img src="images/create_file_include2.JPG" width="347" height="438"></h6>
<p>&nbsp;</p>
<p class="style3"> The  code generated below shows how an include script is generated:</p>
<pre class="brush: java;">
<script type="text/javascript" src="jsp/Person.js"></script>
</pre>

						    <p class="style3">&nbsp;</p>
						    <h6><span class="style22"><img src="images/arrow1.jpg" width="11" height="22"> <a name="exportimport"></a>IMPORT/EXPORT TEMPLATES</span> </h6>
						    <p class="style3">The templates can be exported from the the <strong>FastCode--&gt; Templates --&gt;Export Template</strong> menu.   When exported, a new project called 'Fast Code Eclipse Plugin' will be created and there will be a resources folder within it. There will be a subfolder templates within the resources folder. After the export is completed, one can see the files <strong><a href="templatelist/templates-config.xml" class="style22">templates-config.xml</a></strong> and <strong><a href="templatelist/additional-templates-config.xml" class="style22">additional-templates-config.xml</a></strong> in templates folder as shown below:</p>
						    <h6><img src="images/importexporttemplates.JPG" width="252" height="169"></h6>
						    <p class="style3"> Now one can change the templates by opening them in the editor within eclipse. It is more convenient to change in this manner than going through the preferences. Once they are edited, one can import them from the fast code top menu. Once exported, one can check in to local repositories, e.g. cvs, svn, etc. Then other team members can check out and start using the templates right away.</p>
						    <p class="style3"><strong>For example:</strong> If one needs to  &quot;<strong>create instance of a class as method</strong>&quot; template, one can see  how the mapping is done between the preference page and  the <strong>templates-config.xml</strong> file.</p>
						    <div class="background" style="width: 1000px; height: 710px; overflow-x: scroll; border: 0; padding: 0.25px;">
<img src="images/templatepreferencemenu.JPG" width="962" height="703">
<img src="images/templatepreferencemenu1.JPG" width="962" height="415"></div>
					      </div>
	  </div>
    </div> </div>


	<p align="justify"><br>
				    </br>
		          </br>
		          <br>
    </p>
				<div align="left" class="style20">
                  <div align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://sourceforge.net/projects/fast-code/"><img src="images/sourceforge.jpg" width="168" height="49" border="0"></a></div>
    </div>
				<p align="justify"></br>

		          <!--==============================footer=================================-->
    </p>
				<footer>
      <div class="main">
        <div class="footer-bg">
          <div class="aligncenter"> 3Pin Technology, LLC &copy; 2011<br>
            www.3pintech.com  </div>
        </div>
      </div>
    </footer>
	</body>
</html>
